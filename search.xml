<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>github 自定義個人頁面 ✨</title>
    <url>/2024/05/18/github-personal-page/</url>
    <content><![CDATA[<p>快跟我一起來自訂義獨一無二的個人 github 頁面吧！</p>
<span id="more"></span>

<h4 id="1-先打開-github-首頁"><a href="#1-先打開-github-首頁" class="headerlink" title="1. 先打開 github 首頁"></a>1. 先打開 github 首頁</h4><h4 id="2-建立一個新專案"><a href="#2-建立一個新專案" class="headerlink" title="2. 建立一個新專案"></a>2. 建立一個新專案</h4><p>專案名稱要跟使用者名稱相同，正確的話會發現跳出特殊提示框！<br>這邊記得 ✅ <code>Add a README file</code>，等等要用來輸入自訂義內容。<br><img src="https://firebasestorage.googleapis.com/v0/b/blog-image-2024.appspot.com/o/github-personal-page%2F1.png?alt=media&token=1299f9cc-ba05-4b62-a5d9-e15234e37505" alt="建立專案配置"></p>
<h4 id="3-專案建立成功畫面"><a href="#3-專案建立成功畫面" class="headerlink" title="3. 專案建立成功畫面"></a>3. 專案建立成功畫面</h4><p><img src="https://firebasestorage.googleapis.com/v0/b/blog-image-2024.appspot.com/o/github-personal-page%2F2.png?alt=media&token=db009008-c82b-4715-9190-09518ad12301" alt="專案建立成功畫面，會包含一個 README.md 檔案"></p>
<h4 id="4-點擊右上角的-🖊️-編輯-README-md-檔案，自訂義專屬的個人介紹吧！"><a href="#4-點擊右上角的-🖊️-編輯-README-md-檔案，自訂義專屬的個人介紹吧！" class="headerlink" title="4. 點擊右上角的 🖊️ 編輯 README.md 檔案，自訂義專屬的個人介紹吧！"></a>4. 點擊右上角的 🖊️ 編輯 <code>README.md</code> 檔案，自訂義專屬的個人介紹吧！</h4><p>以下提供我的範例，跟我使用的 Markdown 語法說明</p>
<ul>
<li><p><code>## h2</code></p>
<h2 id="👋-Hi-there-I’m-2fish"><a href="#👋-Hi-there-I’m-2fish" class="headerlink" title="👋 Hi there, I’m 2fish"></a>👋 Hi there, I’m 2fish</h2>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## 👋 Hi there, I&#x27;m 2fish</span><br></pre></td></tr></table></figure>
  <br />
</li>
<li><p><code>#### h4</code></p>
<h4 id="🌱-Junior-Full-Stack-Web-Developer"><a href="#🌱-Junior-Full-Stack-Web-Developer" class="headerlink" title="🌱 Junior Full-Stack Web Developer"></a>🌱 Junior Full-Stack Web Developer</h4>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#### 🌱 Junior Full-Stack Web Developer</span><br></pre></td></tr></table></figure>
  <br />
</li>
<li><p><code>[Email](mailto:yourEmail@gmail.com) [放置顯示文字](幫前面的文字加上連結)</code></p>
  <p>點擊這個連結將會打開電子郵件客戶端，並將收件人的地址設置為 yourEmail@gmail.com</p>
  <p>加上 mailto: 是用來打開電子郵件客戶端的，若是一般的超連結則不需要添加哦</p>

<p>  📮 <a href="mailto:yourEmail@gmail.com">Email</a></p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">📮 [Email](mailto:yourEmail@gmail.com)</span><br></pre></td></tr></table></figure>
  <br />
</li>
<li><p><code>- ul 無序清單</code></p>
  <p>可以在每個項目前添加兩個空格來創建嵌套的無序清單</p>

<ul>
<li>skill<ul>
<li>CSS, SCSS</li>
<li>JavaScript</li>
</ul>
</li>
</ul>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- skill</span><br><span class="line">    - CSS, SCSS</span><br><span class="line">    - JavaScript</span><br></pre></td></tr></table></figure>
  <br />
</li>
<li><p><code>table 表格</code></p>
  <p>使用表格來整齊呈現資料，詳細範例可以參考下方完整程式碼</p>

<table>
<thead>
<tr>
<th>Project</th>
<th>Description</th>
<th>Links</th>
</tr>
</thead>
<tbody><tr>
<td>#1</td>
<td>描述內容</td>
<td>連結</td>
</tr>
</tbody></table>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">| Project | Description | Links |</span><br><span class="line">|---------|-------------|-------|</span><br><span class="line">|   #1    |   描述內容   |  連結  |</span><br></pre></td></tr></table></figure>
  <br />
</li>
<li><p><code>![]() 連結嵌入圖片</code></p>
  <p>使用方法跟上面超連結相似，[] 放置圖片說明文字，() 放置圖片連結，最前面記得加一個 ! 哦</p>

<p>  <img src="https://firebasestorage.googleapis.com/v0/b/simpleportfolio-64b60.appspot.com/o/img%2Fproject-pic-1.png?alt=media&token=388b6fc4-a863-4d12-9e55-f81de4e8c489" alt="軌道漫遊列車之旅"></p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">![軌道漫遊列車之旅](https://firebasestorage.googleapis.com/v0/b/simpleportfolio-64b60.appspot.com/o/img%2Fproject-pic-1.png?alt=media&amp;token=388b6fc4-a863-4d12-9e55-f81de4e8c489)</span><br></pre></td></tr></table></figure>
  <br /></li>
</ul>
<h4 id="5-編輯完成後記得點擊右上角的-Commit-changes-按兩次就可以成功更新囉"><a href="#5-編輯完成後記得點擊右上角的-Commit-changes-按兩次就可以成功更新囉" class="headerlink" title="5. 編輯完成後記得點擊右上角的 Commit changes (按兩次就可以成功更新囉)"></a>5. 編輯完成後記得點擊右上角的 Commit changes (按兩次就可以成功更新囉)</h4><p>更新後回首頁就可以直接看到上方多了剛剛新增的內容</p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/blog-image-2024.appspot.com/o/github-personal-page%2F4.png?alt=media&token=d361e29a-4c15-48a9-a3fd-e4c36cc8d849" alt="首頁示意圖"></p>
<br />
<hr />
<br />

<details>
<summary>點擊這裡查看完整範例程式碼</summary>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## 👋 Hi there, I&#x27;m 2fish</span><br><span class="line"></span><br><span class="line">#### 🌱 Junior Full-Stack Web Developer</span><br><span class="line">#### 📮 You can reach me at [Email](mailto:yourEmail@gmail.com)</span><br><span class="line"></span><br><span class="line">### 💻 Skills</span><br><span class="line"></span><br><span class="line">#### Front-End Development</span><br><span class="line">- HTML</span><br><span class="line">- CSS, SCSS</span><br><span class="line">- JavaScript</span><br><span class="line"></span><br><span class="line">#### Back-End Development</span><br><span class="line">- Node.js</span><br><span class="line">- MySQL</span><br><span class="line"></span><br><span class="line">### 🗂 Portfolio</span><br><span class="line"></span><br><span class="line">| Project | Description | Links |</span><br><span class="line">|---------|-------------|-------|</span><br><span class="line">| ![軌道漫遊列車之旅](https://firebasestorage.googleapis.com/v0/b/simpleportfolio-64b60.appspot.com/o/img%2Fproject-pic-1.png?alt=media&amp;token=388b6fc4-a863-4d12-9e55-f81de4e8c489) | **軌道漫遊列車之旅 (Railway Roaming Train Tour)**&lt;br&gt;這是一個團隊合作開發的網站項目，旨在提供使用者一個互動式的平台，探索和計劃他們的小火車旅行。在這個項目中，我參與了從概念發想到最終產品的全過程。我負責網站的介面設計和前後端開發，使用 Vue.js 和 SCSS 來創建響應式的用戶界面，並透過 JavaScript 增強互動性。後端方面，我使用 PHP 和 MySQL 進行資料庫的規劃和建置，並利用 Ajax 和 Axios 技術實現前後端的資料串接。這個項目不僅鍛鍊了我的全端開發能力，也讓我學習到團隊合作如何溝通及解決問題。 | [GitHub](https://github.com/vicky5645/chd102-g1/tree/dev) \| [Demo](https://tibamef2e.com/chd102/g1/) |</span><br><span class="line">| ![Simple Portfolio](https://firebasestorage.googleapis.com/v0/b/simpleportfolio-64b60.appspot.com/o/img%2F%E4%BD%99%E8%AA%BC%E5%A7%8D%20Sunny%20-%20%E4%BD%9C%E5%93%81%E9%9B%86%20Portfolio.png?alt=media&amp;token=cf0a0add-8f85-4d1d-8c78-cca31301972a) | **個人作品集網站 (Portfolio)**&lt;br&gt;我的個人作品集網站，使用 vue3 + composition API + vite 進行開發，網頁展示了我的經歷、專案和技能。 | [GitHub](https://github.com/sunny96087/simple_portfolio) \| [Demo](https://simpleportfolio-64b60.web.app/portfolio) |</span><br></pre></td></tr></table></figure>

<br />
<hr />
<br />

<blockquote>
<p>範例 demo</p>
</blockquote>
<h2 id="👋-Hi-there-I’m-2fish-1"><a href="#👋-Hi-there-I’m-2fish-1" class="headerlink" title="👋 Hi there, I’m 2fish"></a>👋 Hi there, I’m 2fish</h2><h4 id="🌱-Junior-Full-Stack-Web-Developer-1"><a href="#🌱-Junior-Full-Stack-Web-Developer-1" class="headerlink" title="🌱 Junior Full-Stack Web Developer"></a>🌱 Junior Full-Stack Web Developer</h4><h4 id="📮-You-can-reach-me-at-Email"><a href="#📮-You-can-reach-me-at-Email" class="headerlink" title="📮 You can reach me at Email"></a>📮 You can reach me at <a href="mailto:yourEmail@gmail.com">Email</a></h4><h3 id="💻-Skills"><a href="#💻-Skills" class="headerlink" title="💻 Skills"></a>💻 Skills</h3><h4 id="Front-End-Development"><a href="#Front-End-Development" class="headerlink" title="Front-End Development"></a>Front-End Development</h4><ul>
<li>HTML</li>
<li>CSS, SCSS</li>
<li>JavaScript</li>
</ul>
<h4 id="Back-End-Development"><a href="#Back-End-Development" class="headerlink" title="Back-End Development"></a>Back-End Development</h4><ul>
<li>Node.js</li>
<li>MySQL</li>
</ul>
<h3 id="🗂-Portfolio"><a href="#🗂-Portfolio" class="headerlink" title="🗂 Portfolio"></a>🗂 Portfolio</h3><table>
<thead>
<tr>
<th>Project</th>
<th>Description</th>
<th>Links</th>
</tr>
</thead>
<tbody><tr>
<td><img src="https://firebasestorage.googleapis.com/v0/b/simpleportfolio-64b60.appspot.com/o/img%2Fproject-pic-1.png?alt=media&token=388b6fc4-a863-4d12-9e55-f81de4e8c489" alt="軌道漫遊列車之旅"></td>
<td><strong>軌道漫遊列車之旅 (Railway Roaming Train Tour)</strong><br>這是一個團隊合作開發的網站項目，旨在提供使用者一個互動式的平台，探索和計劃他們的小火車旅行。在這個項目中，我參與了從概念發想到最終產品的全過程。我負責網站的介面設計和前後端開發，使用 Vue.js 和 SCSS 來創建響應式的用戶界面，並透過 JavaScript 增強互動性。後端方面，我使用 PHP 和 MySQL 進行資料庫的規劃和建置，並利用 Ajax 和 Axios 技術實現前後端的資料串接。這個項目不僅鍛鍊了我的全端開發能力，也讓我學習到團隊合作如何溝通及解決問題。</td>
<td><a href="https://github.com/vicky5645/chd102-g1/tree/dev">GitHub</a> | <a href="https://tibamef2e.com/chd102/g1/">Demo</a></td>
</tr>
<tr>
<td><img src="https://firebasestorage.googleapis.com/v0/b/simpleportfolio-64b60.appspot.com/o/img%2F%E4%BD%99%E8%AA%BC%E5%A7%8D%20Sunny%20-%20%E4%BD%9C%E5%93%81%E9%9B%86%20Portfolio.png?alt=media&token=cf0a0add-8f85-4d1d-8c78-cca31301972a" alt="Simple Portfolio"></td>
<td><strong>個人作品集網站 (Portfolio)</strong><br>我的個人作品集網站，使用 vue3 + composition API + vite 進行開發，網頁展示了我的經歷、專案和技能。</td>
<td><a href="https://github.com/sunny96087/simple_portfolio">GitHub</a> | <a href="https://simpleportfolio-64b60.web.app/portfolio">Demo</a></td>
</tr>
</tbody></table>
<blockquote>
<p>也可以直接到我 <a href="https://github.com/sunny96087">github</a> 看效果哦</p>
</blockquote>
</details>

<br />
<hr />
<br />

<p>參考文章 &gt; <a href="https://medium.com/starbugs/%E5%A6%82%E4%BD%95%E5%BB%BA%E7%AB%8B%E7%8D%A8%E4%B8%80%E7%84%A1%E4%BA%8C%E7%9A%84-github-profile-%E8%88%87%E4%B8%89%E5%80%8B%E5%BE%88%E9%85%B7%E7%9A%84%E8%A8%AD%E8%A8%88%E5%8F%8A%E6%87%89%E7%94%A8-ef1cbb4b42c1">如何建立獨一無二的 GitHub Profile！</a></p>
<br />
<hr />
<br />

<blockquote>
<p>希望這篇文章有幫助到你，謝謝你的觀看，若有想看的系列也歡迎告訴我 😉</p>
</blockquote>
]]></content>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>誤打誤撞的 Docker Desktop 災情記錄與解決方案</title>
    <url>/2025/01/19/hexo-docker-desktop-troubleshoot-1/</url>
    <content><![CDATA[<p>最近想要在 Mac 上安裝 MSSQL，看了朋友推薦的 YouTube 教學影片，第一步就是要安裝 Docker。由於之前已經安裝過，就想說直接用快捷鍵開啟，結果系統竟然告訴我 Docker 已經被丟進垃圾桶了！</p>
<p>抱持著「沒關係，重新安裝就好」的心態，前往官網準備重新下載，沒想到這個決定卻開啟了無止盡的錯誤彈窗轟炸…</p>
<span id="more"></span>

<h2 id="🔹-問題調查"><a href="#🔹-問題調查" class="headerlink" title="🔹 問題調查"></a>🔹 問題調查</h2><p><img src="https://firebasestorage.googleapis.com/v0/b/blog-image-2024.appspot.com/o/hexo-docker-desktop-troubleshoot-1%2F1.png?alt=media&token=6aa2f2c5-6c48-4edc-bc31-a976193ab0cf" alt="錯誤彈窗"></p>
<p>在網路上依照錯誤訊息 『未打開「com.docker.vmnetd」，因為它包含惡意軟體。此動作不會損害你的Mac。』 搜尋相關資料時，<br>發現這個問題早在 1 月 9 日就已經開始出現。</p>
<p>一開始找到的多是對岸的部落格文章，正當考慮要依照這些文章建議的方法嘗試時，<br>幸運的發現了國外論壇的相關討論。</p>
<br />
<hr />
<br />

<h2 id="🔹-解決方案"><a href="#🔹-解決方案" class="headerlink" title="🔹 解決方案"></a>🔹 解決方案</h2><p>解決方案來自於 <a href="https://github.com/docker/for-mac/issues/7527">Docker Github Issue</a></p>
<h3 id="1-安裝官方修復版本"><a href="#1-安裝官方修復版本" class="headerlink" title="1. 安裝官方修復版本"></a>1. 安裝官方修復版本</h3><p>首先嘗試安裝官方推薦的修復版本 4.37.2</p>
<blockquote>
<p>直接從<a href="https://docs.docker.com/desktop/release-notes/#4372">官方網站</a>下載</p>
</blockquote>
<p><img src="https://firebasestorage.googleapis.com/v0/b/blog-image-2024.appspot.com/o/hexo-docker-desktop-troubleshoot-1%2F2.png?alt=media&token=f63af7b9-df77-43f0-aefd-cde133d7ecb7" alt="安裝官方推薦的修復版本 4.37.2"></p>
<br />
<hr />
<br />

<h3 id="2-若仍然出現錯誤"><a href="#2-若仍然出現錯誤" class="headerlink" title="2. 若仍然出現錯誤"></a>2. 若仍然出現錯誤</h3><p>如果安裝後持續出現錯誤彈窗，請依照 <a href="https://docs.docker.com/desktop/cert-revoke-solution/">Docker 文件</a> 建議執行以下步驟：</p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/blog-image-2024.appspot.com/o/hexo-docker-desktop-troubleshoot-1%2F3.png?alt=media&token=3310eab7-3de7-4f4d-b9a5-77252883fa1c" alt="Docker 文件"></p>
<ol>
<li><p>終止所有無法正常啟動的 Docker 程序</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> launchctl bootout system/com.docker.vmnetd 2&gt;/dev/null || <span class="literal">true</span></span><br><span class="line"><span class="built_in">sudo</span> launchctl bootout system/com.docker.socket 2&gt;/dev/null || <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">rm</span> /Library/PrivilegedHelperTools/com.docker.vmnetd || <span class="literal">true</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">rm</span> /Library/PrivilegedHelperTools/com.docker.socket || <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># (下面這行我沒有使用到) 因為複製貼上到終端機後無法 Enter，我把這行刪掉後，才成功執行 </span></span><br><span class="line">ps aux | grep -i docker | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | <span class="built_in">sudo</span> xargs <span class="built_in">kill</span> -9 2&gt;/dev/null</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>確認並永久關閉惡意軟體的彈出視窗</p>
</li>
<li><p>(可選) 打開活動監視器，查看是否有 Docker 相關的程序在運行，有的話強制終止</p>
<p> <img src="https://firebasestorage.googleapis.com/v0/b/blog-image-2024.appspot.com/o/hexo-docker-desktop-troubleshoot-1%2F5.png?alt=media&token=5b1ed9ad-f367-42c0-9317-7548f4244457" alt="活動監視器"></p>
</li>
<li><p>重新下載並安裝版本 4.37.2 - <a href="https://docs.docker.com/desktop/release-notes/#4372">下載連結</a></p>
</li>
<li><p>嘗試啟動 Docker Desktop</p>
<p> <img src="https://firebasestorage.googleapis.com/v0/b/blog-image-2024.appspot.com/o/hexo-docker-desktop-troubleshoot-1%2F4.png?alt=media&token=ad65d9a4-0c38-4356-97a1-19838420538a" alt="嘗試啟動 Docker Desktop"></p>
</li>
</ol>
<p>按照上述步驟操作後，成功解決了這個問題！</p>
<br />
<hr />
<br />

<h2 id="🔹-心得總結"><a href="#🔹-心得總結" class="headerlink" title="🔹 心得總結"></a>🔹 心得總結</h2><p>這次的經驗讓我學到，遇到軟體問題時：</p>
<ol>
<li>除了參考部落格文章外，也要多查看官方文件</li>
<li>善用國外論壇資源，因為最新的解決方案可能就在那裡</li>
<li>遇到問題時，保持冷靜並有系統地一步一步排除才是上策</li>
</ol>
]]></content>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 指令合集</title>
    <url>/2024/05/17/hexo-instruction-collection/</url>
    <content><![CDATA[<p>這裡集合了 hexo 常用的指令</p>
<span id="more"></span>

<h3 id="安裝-Hexo-全域"><a href="#安裝-Hexo-全域" class="headerlink" title="安裝 Hexo (全域)"></a>安裝 Hexo (全域)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<h3 id="檢查版本-若有顯示版本號代表安裝成功"><a href="#檢查版本-若有顯示版本號代表安裝成功" class="headerlink" title="檢查版本 (若有顯示版本號代表安裝成功)"></a>檢查版本 (若有顯示版本號代表安裝成功)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure>

<h3 id="快速建立新專案"><a href="#快速建立新專案" class="headerlink" title="快速建立新專案"></a>快速建立新專案</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init &lt;web name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 範例：建立一個叫做 2fish-blog 的專案</span></span><br><span class="line">hexo init 2fish-blog</span><br></pre></td></tr></table></figure>

<h3 id="執行專案"><a href="#執行專案" class="headerlink" title="執行專案"></a>執行專案</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure>

<h3 id="新增文章"><a href="#新增文章" class="headerlink" title="新增文章"></a>新增文章</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new &lt;post name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 範例：建立一個叫做 firstPost 的文章</span></span><br><span class="line">hexo new firstPost</span><br></pre></td></tr></table></figure>

<h3 id="新增頁面"><a href="#新增頁面" class="headerlink" title="新增頁面"></a>新增頁面</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page &lt;page name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 範例：建立一個叫做 about 的文章</span></span><br><span class="line">hexo new page about</span><br></pre></td></tr></table></figure>

<h3 id="打包生成靜態文件"><a href="#打包生成靜態文件" class="headerlink" title="打包生成靜態文件"></a>打包生成靜態文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure>

<h3 id="清除快取-有時候修改內容後沒有顯示，可以使用此指令清除快取"><a href="#清除快取-有時候修改內容後沒有顯示，可以使用此指令清除快取" class="headerlink" title="清除快取 ( 有時候修改內容後沒有顯示，可以使用此指令清除快取 )"></a>清除快取 <small>( 有時候修改內容後沒有顯示，可以使用此指令清除快取 )</small></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>

<h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>

<br />
<hr />
<br />

<h2 id="當你今天忘記指令-🤦🏻‍♀️"><a href="#當你今天忘記指令-🤦🏻‍♀️" class="headerlink" title="當你今天忘記指令 🤦🏻‍♀️"></a>當你今天忘記指令 🤦🏻‍♀️</h2><p><em>可以到專案目錄下的 <code>package.json</code> 查看指令</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;build&quot;</span>: <span class="string">&quot;hexo generate&quot;</span>,</span><br><span class="line">  <span class="string">&quot;clean&quot;</span>: <span class="string">&quot;hexo clean&quot;</span>,</span><br><span class="line">  <span class="string">&quot;deploy&quot;</span>: <span class="string">&quot;hexo deploy&quot;</span>,</span><br><span class="line">  <span class="string">&quot;server&quot;</span>: <span class="string">&quot;hexo server&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>這裡面的指令是預設包裝好的，舉例我們剛剛使用的 <code>hexo clean</code>，<br>你也可以輸入 <code>npm run clean</code> 會執行同樣的操作哦！</p>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 進階 - part 1</title>
    <url>/2024/05/17/hexo-replenish-1/</url>
    <content><![CDATA[<p>這裡包含更換網站圖示、改完的樣式被吃掉怎麼辦、文章摘要下方顯示”查看更多”按鈕</p>
<span id="more"></span>

<h2 id="🔹-更換-Landscape-主題的網站圖示"><a href="#🔹-更換-Landscape-主題的網站圖示" class="headerlink" title="🔹 更換 Landscape 主題的網站圖示"></a>🔹 更換 Landscape 主題的網站圖示</h2><h4 id="1-先找一張圖示"><a href="#1-先找一張圖示" class="headerlink" title="1. 先找一張圖示"></a>1. 先找一張圖示</h4><p>可以到 <a href="https://www.flaticon.com/">flaticon</a> 下載免費圖示</p>
<h4 id="2-把圖示放進專案裡"><a href="#2-把圖示放進專案裡" class="headerlink" title="2. 把圖示放進專案裡"></a>2. 把圖示放進專案裡</h4><p>我這邊圖示取做 favicon.png，放在以下路徑：<br><code>themes/landscape/source/css/images</code></p>
<h4 id="3-修改-config-yml"><a href="#3-修改-config-yml" class="headerlink" title="3. 修改 _config.yml"></a>3. 修改 <code>_config.yml</code></h4><p>到 <code>themes/landscape/_config.yml</code> 修改 favicon 路徑：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Favicon path -&gt; 如果照著我上面放的話會跟範例路徑相同</span></span><br><span class="line"><span class="attr">favicon:</span> <span class="string">/css/images/favicon.png</span></span><br></pre></td></tr></table></figure>

<br />
<hr />
<br />

<h2 id="🔹-好不容易改完的樣式被吃掉"><a href="#🔹-好不容易改完的樣式被吃掉" class="headerlink" title="🔹 好不容易改完的樣式被吃掉"></a>🔹 好不容易改完的樣式被吃掉</h2><h4 id="解決方案"><a href="#解決方案" class="headerlink" title="解決方案"></a>解決方案</h4><p>若你是使用 <code>style.css</code> 修改樣式，那就把舊的樣式檔案 <code>style.styl</code> 刪掉，路徑如下：<br><code>themes/landscape/source/css</code></p>
<h4 id="清除快取並重新生成靜態文件"><a href="#清除快取並重新生成靜態文件" class="headerlink" title="清除快取並重新生成靜態文件"></a>清除快取並重新生成靜態文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br></pre></td></tr></table></figure>
<p>我這樣執行後樣式就會吃到我的 <code>style.css</code> 文件了</p>
<br />
<hr />
<br />

<h2 id="🔹-在文章摘要下方顯示-“Read-More”-連結"><a href="#🔹-在文章摘要下方顯示-“Read-More”-連結" class="headerlink" title="🔹 在文章摘要下方顯示 “Read More” 連結"></a>🔹 在文章摘要下方顯示 “Read More” 連結</h2><h4 id="設定-config-yml"><a href="#設定-config-yml" class="headerlink" title="設定 _config.yml"></a>設定 <code>_config.yml</code></h4><p>在主題裡面的 <code>_config.yml</code> 文件中，設定 <code>excerpt_link</code> 的值來控制是否在文章摘要下方顯示 “Read More” 連結。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># &quot;Read More&quot; link at the bottom of excerpted articles. `false` to hide the link.</span></span><br><span class="line"><span class="attr">excerpt_link:</span> <span class="string">&quot;Read More&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果您希望將 &quot;Read More&quot; 更改為其他文字，例如 &quot;觀看更多&quot;，可以這樣設置：</span></span><br><span class="line"><span class="attr">excerpt_link:</span> <span class="string">&quot;觀看更多&quot;</span></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="設定完後，在文章內需要這樣使用"><a href="#設定完後，在文章內需要這樣使用" class="headerlink" title="設定完後，在文章內需要這樣使用"></a>設定完後，在文章內需要這樣使用</h4><p>在 Hexo 中，您可以使用 <code>&lt;!-- more --&gt;</code> 分隔符來定義哪些內容要在列表顯示或隱藏。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line"><span class="section">title: 我的文章標題</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br><span class="line">這是摘要段落，會顯示在文章列表。</span><br><span class="line"></span><br><span class="line">&lt;!-- more --&gt;</span><br><span class="line"></span><br><span class="line">這邊開始是我只想在文章內頁顯示的內容，列表不會出現！</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="自訂按鈕樣式-修改-CSS"><a href="#自訂按鈕樣式-修改-CSS" class="headerlink" title="自訂按鈕樣式 - 修改 CSS"></a>自訂按鈕樣式 - 修改 CSS</h3><p>在 <code>themes/landscape/source/css/style.css</code> 中自訂樣式：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 可以開啟 f12 查看按鈕屬於哪個 class 控制 */</span></span><br><span class="line"><span class="comment">/* 按鈕預設樣式 */</span></span><br><span class="line"><span class="selector-class">.article-more-link</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">6px</span> <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#eee</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#999</span>;</span><br><span class="line">  <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 按鈕預設 hover 樣式 */</span></span><br><span class="line"><span class="selector-class">.article-more-link</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#258fb8</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">#1e7293</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>六角學院 2024 後端工程師資料庫體驗營 - 小節作業：家具店的菜雞銷售奇遇記</title>
    <url>/2024/10/25/hexschool-sql2024-section-homework-1/</url>
    <content><![CDATA[<!-- 簡介 -->
<p>在這篇文章中，我們將探索六角學院 2024 後端工程師資料庫體驗營的精彩瞬間！跟隨小美的第一天工作，看看她如何在系統當機的危機中，運用 SQL 技能解決客戶需求。最後，我們還會提供實作內容的大綱，幫助你輕鬆掌握 SQL 查詢的基礎與進階技巧。準備好一起來學習了嗎？</p>
<span id="more"></span>


<h2 id="🛠️-環境準備"><a href="#🛠️-環境準備" class="headerlink" title="🛠️ 環境準備"></a>🛠️ 環境準備</h2><h3 id="練習資料庫"><a href="#練習資料庫" class="headerlink" title="練習資料庫"></a>練習資料庫</h3><p>我們將使用 <a href="https://pg-sql.com/">pg-sql</a> 作為線上練習環境。</p>
<h3 id="資料表建立"><a href="#資料表建立" class="headerlink" title="資料表建立"></a>資料表建立</h3><p>首先，讓我們建立一個模擬家具店的商品資料表：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> products (</span><br><span class="line">   name <span class="type">VARCHAR</span>(<span class="number">100</span>),         <span class="comment">-- 商品名稱</span></span><br><span class="line">   price <span class="type">INTEGER</span>,            <span class="comment">-- 原價</span></span><br><span class="line">   discount_price <span class="type">INTEGER</span>,    <span class="comment">-- 優惠價</span></span><br><span class="line">   stock <span class="type">INTEGER</span>,            <span class="comment">-- 庫存數量</span></span><br><span class="line">   category <span class="type">VARCHAR</span>(<span class="number">50</span>),      <span class="comment">-- 商品分類</span></span><br><span class="line">   status <span class="type">VARCHAR</span>(<span class="number">20</span>)         <span class="comment">-- 商品狀態</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> products (name, price, discount_price, stock, category, status) <span class="keyword">VALUES</span></span><br><span class="line">   (<span class="string">&#x27;北歐風雙人沙發&#x27;</span>, <span class="number">39900</span>, <span class="number">35900</span>, <span class="number">3</span>, <span class="string">&#x27;沙發&#x27;</span>, <span class="string">&#x27;active&#x27;</span>),</span><br><span class="line">   (<span class="string">&#x27;貓抓皮L型沙發&#x27;</span>, <span class="number">58900</span>, <span class="number">52900</span>, <span class="number">1</span>, <span class="string">&#x27;沙發&#x27;</span>, <span class="string">&#x27;active&#x27;</span>),</span><br><span class="line">   (<span class="string">&#x27;典雅三人座沙發&#x27;</span>, <span class="number">42800</span>, <span class="number">42800</span>, <span class="number">5</span>, <span class="string">&#x27;沙發&#x27;</span>, <span class="string">&#x27;active&#x27;</span>),</span><br><span class="line">   (<span class="string">&#x27;工業風電視櫃&#x27;</span>, <span class="number">5900</span>, <span class="number">4900</span>, <span class="number">12</span>, <span class="string">&#x27;櫃子&#x27;</span>, <span class="string">&#x27;active&#x27;</span>),</span><br><span class="line">   (<span class="string">&#x27;簡約書櫃&#x27;</span>, <span class="number">3500</span>, <span class="number">3500</span>, <span class="number">8</span>, <span class="string">&#x27;櫃子&#x27;</span>, <span class="string">&#x27;active&#x27;</span>),</span><br><span class="line">   (<span class="string">&#x27;玄關鞋櫃&#x27;</span>, <span class="number">2900</span>, <span class="number">2900</span>, <span class="number">15</span>, <span class="string">&#x27;櫃子&#x27;</span>, <span class="string">&#x27;active&#x27;</span>),</span><br><span class="line">   (<span class="string">&#x27;日式雙人床架&#x27;</span>, <span class="number">12000</span>, <span class="number">11200</span>, <span class="number">6</span>, <span class="string">&#x27;床架&#x27;</span>, <span class="string">&#x27;active&#x27;</span>),</span><br><span class="line">   (<span class="string">&#x27;掀床五尺雙人床&#x27;</span>, <span class="number">19900</span>, <span class="number">18900</span>, <span class="number">2</span>, <span class="string">&#x27;床架&#x27;</span>, <span class="string">&#x27;active&#x27;</span>),</span><br><span class="line">   (<span class="string">&#x27;兒童床架&#x27;</span>, <span class="number">8900</span>, <span class="number">8900</span>, <span class="number">0</span>, <span class="string">&#x27;床架&#x27;</span>, <span class="string">&#x27;inactive&#x27;</span>),</span><br><span class="line">   (<span class="string">&#x27;電腦辦公椅&#x27;</span>, <span class="number">4500</span>, <span class="number">3900</span>, <span class="number">20</span>, <span class="string">&#x27;椅子&#x27;</span>, <span class="string">&#x27;active&#x27;</span>),</span><br><span class="line">   (<span class="string">&#x27;餐椅四入組&#x27;</span>, <span class="number">6000</span>, <span class="number">5200</span>, <span class="number">8</span>, <span class="string">&#x27;椅子&#x27;</span>, <span class="string">&#x27;active&#x27;</span>),</span><br><span class="line">   (<span class="string">&#x27;北歐風餐桌&#x27;</span>, <span class="number">15800</span>, <span class="number">14800</span>, <span class="number">4</span>, <span class="string">&#x27;桌子&#x27;</span>, <span class="string">&#x27;active&#x27;</span>),</span><br><span class="line">   (<span class="string">&#x27;實木咖啡桌&#x27;</span>, <span class="number">3200</span>, <span class="number">2900</span>, <span class="number">10</span>, <span class="string">&#x27;桌子&#x27;</span>, <span class="string">&#x27;active&#x27;</span>),</span><br><span class="line">   (<span class="string">&#x27;電競書桌&#x27;</span>, <span class="number">8900</span>, <span class="number">8900</span>, <span class="number">0</span>, <span class="string">&#x27;桌子&#x27;</span>, <span class="string">&#x27;inactive&#x27;</span>);</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="📝-完整資料表參考"><a href="#📝-完整資料表參考" class="headerlink" title="📝 完整資料表參考"></a>📝 完整資料表參考</h2><table>
<thead>
<tr>
<th>商品名稱</th>
<th>原價</th>
<th>優惠價</th>
<th>庫存</th>
<th>類別</th>
<th>狀態</th>
</tr>
</thead>
<tbody><tr>
<td>北歐風雙人沙發</td>
<td>39900</td>
<td>35900</td>
<td>3</td>
<td>沙發</td>
<td>active</td>
</tr>
<tr>
<td>貓抓皮L型沙發</td>
<td>58900</td>
<td>52900</td>
<td>1</td>
<td>沙發</td>
<td>active</td>
</tr>
<tr>
<td>典雅三人座沙發</td>
<td>42800</td>
<td>42800</td>
<td>5</td>
<td>沙發</td>
<td>active</td>
</tr>
<tr>
<td>工業風電視櫃</td>
<td>5900</td>
<td>4900</td>
<td>12</td>
<td>櫃子</td>
<td>active</td>
</tr>
<tr>
<td>簡約書櫃</td>
<td>3500</td>
<td>3500</td>
<td>8</td>
<td>櫃子</td>
<td>active</td>
</tr>
<tr>
<td>玄關鞋櫃</td>
<td>2900</td>
<td>2900</td>
<td>15</td>
<td>櫃子</td>
<td>active</td>
</tr>
<tr>
<td>日式雙人床架</td>
<td>12000</td>
<td>11200</td>
<td>6</td>
<td>床架</td>
<td>active</td>
</tr>
<tr>
<td>掀床五尺雙人床</td>
<td>19900</td>
<td>18900</td>
<td>2</td>
<td>床架</td>
<td>active</td>
</tr>
<tr>
<td>兒童床架</td>
<td>8900</td>
<td>8900</td>
<td>0</td>
<td>床架</td>
<td>inactive</td>
</tr>
<tr>
<td>電腦辦公椅</td>
<td>4500</td>
<td>3900</td>
<td>20</td>
<td>椅子</td>
<td>active</td>
</tr>
<tr>
<td>餐椅四入組</td>
<td>6000</td>
<td>5200</td>
<td>8</td>
<td>椅子</td>
<td>active</td>
</tr>
<tr>
<td>北歐風餐桌</td>
<td>15800</td>
<td>14800</td>
<td>4</td>
<td>桌子</td>
<td>active</td>
</tr>
<tr>
<td>實木咖啡桌</td>
<td>3200</td>
<td>2900</td>
<td>10</td>
<td>桌子</td>
<td>active</td>
</tr>
<tr>
<td>電競書桌</td>
<td>8900</td>
<td>8900</td>
<td>0</td>
<td>桌子</td>
<td>inactive</td>
</tr>
</tbody></table>
<hr>
<h2 id="🎬-故事背景"><a href="#🎬-故事背景" class="headerlink" title="🎬 故事背景"></a>🎬 故事背景</h2><h3 id="築夢家居的危機時刻"><a href="#築夢家居的危機時刻" class="headerlink" title="築夢家居的危機時刻"></a>築夢家居的危機時刻</h3><p>剛入職築夢家居的銷售顧問小美，萬萬沒想到第一天上班就遇上了巨大挑戰。系統突然大當機，而這間老字號家具店僅存的查詢工具只剩下 POS 機和資料庫。更要命的是，今天剛好是週年慶開跑的大日子，主管還在門市坐鎮！</p>
<p>在一籌莫展之際，小美只好向店裡的工程師小明求救…</p>
<hr>
<h2 id="💡-第一課：基礎查詢"><a href="#💡-第一課：基礎查詢" class="headerlink" title="💡 第一課：基礎查詢"></a>💡 第一課：基礎查詢</h2><h3 id="初次接觸-SQL"><a href="#初次接觸-SQL" class="headerlink" title="初次接觸 SQL"></a>初次接觸 SQL</h3><p><strong>👨🏻‍🦳 客人</strong>：「我要看那個貓抓皮沙發，你們還有貨嗎？」</p>
<p><strong>👩🏻 小美</strong>：（慌張）啊…貓抓皮沙發…</p>
<p>（急忙用 LINE 詢問小明）</p>
<p><strong>👩🏻 小美</strong>：學長救命！要怎麼查這個沙發？</p>
<p><strong>👨🏼‍💻 小明</strong>：用等於就可以了：<br>      <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, price, stock</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;貓抓皮L型沙發&#x27;</span>;</span><br></pre></td></tr></table></figure></p>
<p><strong>👩🏻 小美</strong>：喔！就是<br>      - 選取 名字、價格、庫存<br>      - 從 商品表<br>      - 找 商品名等於貓抓皮L型沙發<br>      對嗎？</p>
<p><strong>👨🏼‍💻 小明</strong>：對！很快就上手了嘛！</p>
<p><strong>👩🏻 小美</strong>：（快速輸入）哇！真的查到了！只剩一張庫存耶…</p>
<p><strong>👨🏻‍🦳 客人</strong>：（不耐煩）小姐？到底有沒有啊？</p>
<p><strong>👩🏻 小美</strong>：這款 L 型沙發目前最後一張特價 52900，要幫您預訂嗎？</p>
<p><strong>👨🏻‍🦳 客人</strong>：哦？最後一張喔…那…就先訂起來好了！</p>
<p><strong>👨🏼‍💻 小明</strong>：！！！這麼快就會了？根本是資料庫天才 &#x3D;&#x3D; b</p>
<hr>
<h2 id="📚-基礎查詢實戰"><a href="#📚-基礎查詢實戰" class="headerlink" title="📚 基礎查詢實戰"></a>📚 基礎查詢實戰</h2><h3 id="情境-1：單品查詢"><a href="#情境-1：單品查詢" class="headerlink" title="情境 1：單品查詢"></a>情境 1：單品查詢</h3><p><strong>客人詢問</strong>：「這張北歐風雙人沙發多少錢？」</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> price, stock, name     <span class="comment">-- 選取 價格、庫存、名稱</span></span><br><span class="line"><span class="keyword">FROM</span> products                 <span class="comment">-- 從 商品表</span></span><br><span class="line"><span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;北歐風雙人沙發&#x27;</span>;  <span class="comment">-- 找 商品名稱等於北歐風雙人沙發</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>💡 <strong>查詢重點</strong>：使用 WHERE 子句指定條件，篩選出符合條件的資料</p>
</blockquote>
<h3 id="情境-2：價格比較"><a href="#情境-2：價格比較" class="headerlink" title="情境 2：價格比較"></a>情境 2：價格比較</h3><p><strong>客人詢問</strong>：「請列出 5000 元以下的櫃子有哪些？」</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span>                     <span class="comment">-- 選取所有欄位</span></span><br><span class="line"><span class="keyword">FROM</span> products                <span class="comment">-- 從 商品表</span></span><br><span class="line"><span class="keyword">WHERE</span> category <span class="operator">=</span> <span class="string">&#x27;櫃子&#x27;</span>      <span class="comment">-- 找 商品類別等於櫃子</span></span><br><span class="line"><span class="keyword">AND</span> price <span class="operator">&lt;</span> <span class="number">5000</span>;            <span class="comment">-- 且 價格小於 5000</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>💡 <strong>查詢重點</strong>：使用 AND 組合多個條件，所有條件都必須符合才會回傳結果</p>
</blockquote>
<h3 id="情境-3：庫存確認"><a href="#情境-3：庫存確認" class="headerlink" title="情境 3：庫存確認"></a>情境 3：庫存確認</h3><p><strong>客人詢問</strong>：「日式雙人床架還有貨嗎？」</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span>                     <span class="comment">-- 選取所有欄位</span></span><br><span class="line"><span class="keyword">FROM</span> products                <span class="comment">-- 從 商品表</span></span><br><span class="line"><span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;日式雙人床架&#x27;</span>;  <span class="comment">-- 找 商品名稱等於日式雙人床架</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="🔄-進階查詢：邏輯運算-AND"><a href="#🔄-進階查詢：邏輯運算-AND" class="headerlink" title="🔄 進階查詢：邏輯運算 AND"></a>🔄 進階查詢：邏輯運算 AND</h2><h3 id="情境-4：預算內的商品"><a href="#情境-4：預算內的商品" class="headerlink" title="情境 4：預算內的商品"></a>情境 4：預算內的商品</h3><p><strong>客人詢問</strong>：「想找 4 萬以下，而且有現貨的沙發」</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> category <span class="operator">=</span> <span class="string">&#x27;沙發&#x27;</span>    <span class="comment">-- 找 分類是沙發</span></span><br><span class="line"><span class="keyword">AND</span> price <span class="operator">&lt;</span> <span class="number">40000</span>         <span class="comment">-- 價格小於 4 萬</span></span><br><span class="line"><span class="keyword">AND</span> stock <span class="operator">&gt;</span> <span class="number">0</span>;           <span class="comment">-- 有庫存</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>💡 <strong>查詢重點</strong>：使用 AND 組合多個條件，所有條件都必須符合才會回傳結果</p>
</blockquote>
<h3 id="情境-5：特價且有貨"><a href="#情境-5：特價且有貨" class="headerlink" title="情境 5：特價且有貨"></a>情境 5：特價且有貨</h3><p><strong>客人詢問</strong>：「沙發有哪些特價且現貨的品項？」</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> category <span class="operator">=</span> <span class="string">&#x27;沙發&#x27;</span>                <span class="comment">-- 找 分類是沙發</span></span><br><span class="line"><span class="keyword">AND</span> price <span class="operator">&gt;</span> discount_price           <span class="comment">-- 有特價（原價大於優惠價）</span></span><br><span class="line"><span class="keyword">AND</span> stock <span class="operator">&gt;</span> <span class="number">0</span>;                      <span class="comment">-- 有庫存</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="🔀-進階查詢：邏輯運算-OR"><a href="#🔀-進階查詢：邏輯運算-OR" class="headerlink" title="🔀 進階查詢：邏輯運算 OR"></a>🔀 進階查詢：邏輯運算 OR</h2><h3 id="情境-6：多分類查詢"><a href="#情境-6：多分類查詢" class="headerlink" title="情境 6：多分類查詢"></a>情境 6：多分類查詢</h3><p><strong>客人詢問</strong>：「我要找櫃子或桌子」</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> category <span class="operator">=</span> <span class="string">&#x27;櫃子&#x27;</span>       <span class="comment">-- 找 分類是櫃子</span></span><br><span class="line"><span class="keyword">OR</span> category <span class="operator">=</span> <span class="string">&#x27;桌子&#x27;</span>;        <span class="comment">-- 或 分類是桌子</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>💡 <strong>查詢重點</strong>：使用 OR 時，符合任一條件就會被包含在結果中</p>
</blockquote>
<h3 id="情境-7：指定商品"><a href="#情境-7：指定商品" class="headerlink" title="情境 7：指定商品"></a>情境 7：指定商品</h3><p><strong>客人詢問</strong>：「北歐風雙人沙發和貓抓皮L型沙發哪個還有貨？」</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, price, discount_price, stock  <span class="comment">-- 選取 名字、價格、優惠價、庫存</span></span><br><span class="line"><span class="keyword">FROM</span> products                              <span class="comment">-- 從 商品表</span></span><br><span class="line"><span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;北歐風雙人沙發&#x27;</span>              <span class="comment">-- 找 商品名稱等於北歐風雙人沙發</span></span><br><span class="line"><span class="keyword">OR</span> name <span class="operator">=</span> <span class="string">&#x27;貓抓皮L型沙發&#x27;</span>;                <span class="comment">-- 或 商品名稱等於貓抓皮L型沙發</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="🎯-進階查詢：IN-運算"><a href="#🎯-進階查詢：IN-運算" class="headerlink" title="🎯 進階查詢：IN 運算"></a>🎯 進階查詢：IN 運算</h2><h3 id="情境-8：多分類查詢"><a href="#情境-8：多分類查詢" class="headerlink" title="情境 8：多分類查詢"></a>情境 8：多分類查詢</h3><p><strong>客人詢問</strong>：「客廳的家具有哪些？我要看沙發、櫃子跟桌子」</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span>                                    </span><br><span class="line"><span class="keyword">FROM</span> products                                </span><br><span class="line"><span class="keyword">WHERE</span> category <span class="keyword">IN</span> (<span class="string">&#x27;沙發&#x27;</span>, <span class="string">&#x27;櫃子&#x27;</span>, <span class="string">&#x27;桌子&#x27;</span>);  <span class="comment">-- 找 分類是 沙發、櫃子、桌子</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>💡 <strong>查詢重點</strong>：使用 IN 運算子，指定多個可能的值，只要符合其中一個值就會被包含在結果中</p>
</blockquote>
<h3 id="情境-9：特定商品"><a href="#情境-9：特定商品" class="headerlink" title="情境 9：特定商品"></a>情境 9：特定商品</h3><p><strong>客人詢問</strong>：「電腦辦公椅和餐椅四入組的價格是多少？」</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, price, discount_price, stock     <span class="comment">-- 選取 名字、價格、優惠價、庫存</span></span><br><span class="line"><span class="keyword">FROM</span> products                                <span class="comment">-- 從 商品表</span></span><br><span class="line"><span class="keyword">WHERE</span> name <span class="keyword">IN</span> (<span class="string">&#x27;電腦辦公椅&#x27;</span>, <span class="string">&#x27;餐椅四入組&#x27;</span>);     <span class="comment">-- 找 商品名稱是 電腦辦公椅、餐椅四入組</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="📊-進階查詢：BETWEEN"><a href="#📊-進階查詢：BETWEEN" class="headerlink" title="📊 進階查詢：BETWEEN"></a>📊 進階查詢：BETWEEN</h2><h3 id="情境-10：價格區間"><a href="#情境-10：價格區間" class="headerlink" title="情境 10：價格區間"></a>情境 10：價格區間</h3><p><strong>客人詢問</strong>：「想找 10000 到 20000 之間的商品有哪些？」</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> products                               </span><br><span class="line"><span class="keyword">WHERE</span> price <span class="keyword">BETWEEN</span> <span class="number">10000</span> <span class="keyword">AND</span> <span class="number">20000</span>;        <span class="comment">-- 找 價格在 10000 到 20000 之間</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>💡 <strong>查詢重點</strong>：使用 BETWEEN 運算子，指定價格範圍，範圍內的資料都會被包含在結果中</p>
</blockquote>
<h3 id="情境-11：庫存區間"><a href="#情境-11：庫存區間" class="headerlink" title="情境 11：庫存區間"></a>情境 11：庫存區間</h3><p><strong>主管要求</strong>：「請列出庫存在 5 到 15 之間的商品」</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> products                               </span><br><span class="line"><span class="keyword">WHERE</span> stock <span class="keyword">BETWEEN</span> <span class="number">5</span> <span class="keyword">AND</span> <span class="number">15</span>;              <span class="comment">-- 找 庫存在 5 到 15 之間</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="❌-進階查詢：NOT-IN"><a href="#❌-進階查詢：NOT-IN" class="headerlink" title="❌ 進階查詢：NOT IN"></a>❌ 進階查詢：NOT IN</h2><h3 id="情境-12：排除商品"><a href="#情境-12：排除商品" class="headerlink" title="情境 12：排除商品"></a>情境 12：排除商品</h3><p><strong>主管要求</strong>：「列出除了沙發和床架以外的商品」</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> products                               </span><br><span class="line"><span class="keyword">WHERE</span> category <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="string">&#x27;沙發&#x27;</span>, <span class="string">&#x27;床架&#x27;</span>);      <span class="comment">-- 找 分類不是 沙發、床架</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>💡 <strong>查詢重點</strong>：使用 NOT IN 運算子，排除特定值，只會回傳符合條件的資料</p>
</blockquote>
<hr>
<h2 id="🔄-資料維護：更新和刪除"><a href="#🔄-資料維護：更新和刪除" class="headerlink" title="🔄 資料維護：更新和刪除"></a>🔄 資料維護：更新和刪除</h2><h3 id="情境-13：調整價格"><a href="#情境-13：調整價格" class="headerlink" title="情境 13：調整價格"></a>情境 13：調整價格</h3><p><strong>主管指示</strong>：「北歐風雙人沙發要調降 2000 元」</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> products                              <span class="comment">-- 更新 products 表</span></span><br><span class="line"><span class="keyword">SET</span> price <span class="operator">=</span> price <span class="operator">-</span> <span class="number">2000</span>                     <span class="comment">-- 調降 2000 元</span></span><br><span class="line"><span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;北歐風雙人沙發&#x27;</span>;                  <span class="comment">-- 指定要降價的商品名稱</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>💡 <strong>查詢重點</strong>：使用 UPDATE 語句，指定要更新的欄位和條件，只會更新符合條件的資料</p>
</blockquote>
<h3 id="情境-14：更新庫存"><a href="#情境-14：更新庫存" class="headerlink" title="情境 14：更新庫存"></a>情境 14：更新庫存</h3><p><strong>主管通知</strong>：「電腦辦公椅進了 5 張」</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> products                              <span class="comment">-- 更新 products 表</span></span><br><span class="line"><span class="keyword">SET</span> stock <span class="operator">=</span> stock <span class="operator">+</span> <span class="number">5</span>                       <span class="comment">-- 進了 5 張庫存</span></span><br><span class="line"><span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;電腦辦公椅&#x27;</span>;                    <span class="comment">-- 指定要增加庫存的商品名稱</span></span><br></pre></td></tr></table></figure>

<h3 id="情境-15：清除資料"><a href="#情境-15：清除資料" class="headerlink" title="情境 15：清除資料"></a>情境 15：清除資料</h3><p><strong>主管指示</strong>：「要清掉兒童床架和電競書桌的資料」</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> products                              <span class="comment">-- 從 products 表刪除資料</span></span><br><span class="line"><span class="keyword">WHERE</span> name <span class="keyword">IN</span> (<span class="string">&#x27;兒童床架&#x27;</span>, <span class="string">&#x27;電競書桌&#x27;</span>);             <span class="comment">-- 指定商品名稱</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>💡 <strong>查詢重點</strong>：使用 DELETE 語句，指定要刪除的條件，只會刪除符合條件的資料</p>
</blockquote>
<hr>
<h2 id="🎯-學習重點總結"><a href="#🎯-學習重點總結" class="headerlink" title="🎯 學習重點總結"></a>🎯 學習重點總結</h2><ol>
<li><p><strong>基礎查詢語法</strong></p>
<ul>
<li>SELECT：選擇要顯示的欄位</li>
<li>FROM：指定查詢的資料表</li>
<li>WHERE：設定查詢條件</li>
</ul>
</li>
<li><p><strong>條件組合</strong></p>
<ul>
<li>AND：多個條件同時成立</li>
<li>OR：任一條件成立</li>
<li>IN：符合列表中的任一值</li>
<li>BETWEEN：範圍查詢</li>
<li>NOT IN：排除特定值</li>
</ul>
</li>
<li><p><strong>資料維護操作</strong></p>
<ul>
<li>UPDATE：更新資料</li>
<li>DELETE：刪除資料</li>
</ul>
</li>
</ol>
<h2 id="💪-練習建議"><a href="#💪-練習建議" class="headerlink" title="💪 練習建議"></a>💪 練習建議</h2><ol>
<li>先從簡單的單一條件查詢開始</li>
<li>逐步嘗試組合多個條件</li>
<li>實際動手操作每個範例</li>
<li>嘗試修改條件創造新的查詢場景</li>
<li>記得在執行 UPDATE 和 DELETE 前先確認條件是否正確</li>
</ol>
<h2 id="🔗-相關資源"><a href="#🔗-相關資源" class="headerlink" title="🔗 相關資源"></a>🔗 相關資源</h2><ul>
<li><a href="https://pg-sql.com/">pg-sql 線上練習環境</a></li>
<li><a href="https://www.w3schools.com/sql/">SQL 完整語法參考</a></li>
<li><a href="https://gamma.app/docs/SQL--23heyix4r93u5u0?mode=doc#card-zbtn6kfn3th4gpr">六角學院講義</a></li>
</ul>
<hr>
<p>希望透過小美的第一天工作經歷，能幫助你更生動地理解 SQL 查詢的基礎概念。</p>
]]></content>
      <tags>
        <tag>SQL</tag>
        <tag>六角學院 2024 後端工程師資料庫體驗營</tag>
      </tags>
  </entry>
  <entry>
    <title>在 Nuxt.js 導入 phosphor-icons</title>
    <url>/2024/06/07/nuxt-icon-phosphor/</url>
    <content><![CDATA[<p>在 Nuxt.js 中導入和使用 @phosphor-icons&#x2F;vue 的範例</p>
<span id="more"></span>

<h4 id="1-連結"><a href="#1-連結" class="headerlink" title="1. 連結"></a>1. 連結</h4><ul>
<li><a href="https://phosphoricons.com/?size=24&q=%22%22">Phosphor Icons</a></li>
<li><a href="https://github.com/phosphor-icons/vue">phosphor-icons&#x2F;vue: A flexible icon family for Vue (github.com)</a></li>
</ul>
<h4 id="2-安裝"><a href="#2-安裝" class="headerlink" title="2. 安裝"></a>2. 安裝</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install @phosphor-icons/vue</span><br></pre></td></tr></table></figure>

<h4 id="3-找喜歡的-Icon"><a href="#3-找喜歡的-Icon" class="headerlink" title="3. 找喜歡的 Icon"></a>3. 找喜歡的 Icon</h4><ul>
<li><a href="https://phosphoricons.com/?size=24&q=%22%22">Phosphor Icons</a><br>也可以在網頁的測試欄進行調整，可以馬上看到效果哦<br><img src="https://firebasestorage.googleapis.com/v0/b/blog-image-2024.appspot.com/o/nuxt-icon-phosphor%2F1.png?alt=media&token=a8c519d7-f75d-457f-8e6e-c6df2b2207b2" alt="找 icon 示意圖"></li>
</ul>
<h4 id="4-在專案內使用"><a href="#4-在專案內使用" class="headerlink" title="4. 在專案內使用"></a>4. 在專案內使用</h4><p>導入和使用 Phosphor Icons</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 需要的 icon 再引入即可</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">PhUserCircle</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">PhHouse</span></span></span><br><span class="line"><span class="language-javascript">&#125; <span class="keyword">from</span> <span class="string">&#x27;@phosphor-icons/vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 引入後就可以在頁面上直接使用囉 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">PhUserCircle</span> <span class="attr">:size</span>=<span class="string">&quot;24&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">PhHouse</span> <span class="attr">:size</span>=<span class="string">&quot;24&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="可調整的屬性"><a href="#可調整的屬性" class="headerlink" title="可調整的屬性"></a>可調整的屬性</h5><ul>
<li><p><code>color(string) 圖標顏色</code><br>  可以接受任何 CSS 顏色字符串，包括hex、rgb、rgba、hsl、hsla、命名顏色，或者特殊的 currentColor 變量；<br>  若無設定則使用預設值 currentColor。<br>  使用 currentColor，則圖標的填充顏色將與其父元素的文字顏色相同。</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">PhBooks</span> <span class="attr">color</span>=<span class="string">&quot;#FF0000&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PhBooks</span> <span class="attr">color</span>=<span class="string">&quot;hotpink&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
  <br />
</li>
<li><p><code>size(string) 圖標高度和寬度</code><br>  可以是一個數字或者一個帶有單位的字符串，單位可以是 px、%、em、rem、pt、cm、mm、in 等；<br>  若無設定則使用預設值 1em。</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">PhBooks</span> <span class="attr">:size</span>=<span class="string">&quot;24&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PhBooks</span> <span class="attr">:size</span>=<span class="string">&quot;2em&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
  <br />
</li>
<li><p><code>weight(string) 圖標的粗細/風格</code><br>  這個屬性可以是 thin、light、regular、bold、fill 或 duotone 。</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">PhStar</span> <span class="attr">weight</span>=<span class="string">&quot;regular&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PhStar</span> <span class="attr">weight</span>=<span class="string">&quot;fill&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>  在上述代碼中，第一行將 PhStar 圖標的風格設定為 regular，這將產生一個空心的星形圖標。<br>  第二行將 PhStar 圖標的風格設定為 fill，這將產生一個實心的星形圖標。</p>
  <br />
</li>
<li><p><code>mirrored(boolean) 水平翻轉圖標</code><br>  如果設定為 true，則圖標將被水平翻轉。在正常圖示方向不合適的 RTL 語言中非常有用。</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">PhBooks</span> <span class="attr">:mirrored</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
  <br />
</li>
<li><p><code>一次是可以使用多個屬性的哦！</code><br>  我這邊對 <code>PhBooks</code> 設定大小 24px、填滿、水平翻轉、藍色。</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">PhBooks</span> <span class="attr">:size</span>=<span class="string">&quot;24&quot;</span> <span class="attr">weight</span>=<span class="string">&quot;fill&quot;</span> <span class="attr">:mirrored</span>=<span class="string">&quot;true&quot;</span> <span class="attr">color</span>=<span class="string">&quot;blue&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<br />
<hr />
<br />

<details>
<summary>等等！ 為什麼有的要 : 有的不用 : 呢 ?</summary>

<h4>基本原理</h4>
<p>在 Vue.js 中，當你使用 v-bind 指令（縮寫為 :）時，你告訴 Vue 這個屬性值是動態的，並且應該被解析為 JavaScript 表達式。如果屬性值是固定的字符串，則不需要使用 :。</p>

<h4>字符串常量 vs. JavaScript 表達式</h4>
- 字符串常量：直接使用固定的字符串值，不需要 `:`。
- JavaScript 表達式：使用變量或計算表達式，需要使用 `:`。

<h4>具體說明</h4>
<h5>字符串常量</h5>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">PhBooks</span> <span class="attr">weight</span>=<span class="string">&quot;fill&quot;</span> <span class="attr">color</span>=<span class="string">&quot;blue&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>weight=&quot;fill&quot;</code> 和 <code>color=&quot;blue&quot;</code> 是固定的字符串常量，不需要 <code>:</code>。</p>
<h5>JavaScript 表達式</h5>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">PhBooks</span> <span class="attr">:size</span>=<span class="string">&quot;24&quot;</span> <span class="attr">:mirrored</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
`:size="24"` 和 `:mirrored="true"` 是 JavaScript 表達式，需要使用 `:`。
    
<h4>結合示例</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">PhBooks</span> <span class="attr">:size</span>=<span class="string">&quot;24&quot;</span> <span class="attr">:mirrored</span>=<span class="string">&quot;true&quot;</span> <span class="attr">weight</span>=<span class="string">&quot;fill&quot;</span> <span class="attr">color</span>=<span class="string">&quot;blue&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">PhBooks</span> <span class="attr">:size</span>=<span class="string">&quot;iconSize&quot;</span> <span class="attr">:mirrored</span>=<span class="string">&quot;isMirrored&quot;</span> <span class="attr">:weight</span>=<span class="string">&quot;iconWeight&quot;</span> <span class="attr">:color</span>=<span class="string">&quot;iconColor&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; <span class="title class_">PhBooks</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@phosphor-icons/vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> iconSize = <span class="title function_">ref</span>(<span class="number">24</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> isMirrored = <span class="title function_">ref</span>(<span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> iconWeight = <span class="title function_">ref</span>(<span class="string">&#x27;fill&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> iconColor = <span class="title function_">ref</span>(<span class="string">&#x27;blue&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4>總結</h4>

<ul>
<li><p>靜態值 -&gt; 不需要 <code>:</code></p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">PhBooks</span> <span class="attr">weight</span>=<span class="string">&quot;fill&quot;</span> <span class="attr">color</span>=<span class="string">&quot;blue&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>動態值 -&gt; 需要 <code>:</code></p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">PhBooks</span> <span class="attr">:size</span>=<span class="string">&quot;24&quot;</span> <span class="attr">:mirrored</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>希望這樣能幫助你更清楚地理解為什麼某些屬性需要使用 <code>:</code> 而其他屬性則不需要！</p>
</details>

<br />
<hr />

<blockquote>
<p>希望這篇文章有幫助到你，謝謝你的觀看，若有想看的系列也歡迎告訴我 😉</p>
</blockquote>
]]></content>
      <tags>
        <tag>Nuxt.js</tag>
        <tag>Icons</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>[ 2024 IT 鐵人賽 DAY1 ] 飛機修不好，鸚鵡也不能養？那就來做網站吧！</title>
    <url>/2024/09/10/2024it/d1/</url>
    <content><![CDATA[<p>從空軍到工程師，從修飛機到寫程式，一個不能養鸚鵡的工程師決定用程式碼創造屬於自己的鸚鵡世界！🦜</p>
<span id="more"></span>

<div class="cus-intro-box">
    <h2>房東不給養鸚鵡 - 那就用 Nuxt + Express + MongoDB 30 天寫一個全端鸚鵡專案。</h2>
    <p>挑戰人生第一次鐵人賽，就來個佛心分享 side project，從專案發想、規劃、設計、資料庫、開發到部署，技術使用 Nuxt 3、Tailwind CSS、Pinia、Axios、Express、MongoDB，製作一個前後端分離的鸚鵡專案，功能主要介紹食物計算機和聯絡我們，希望可以讓更多人瞭解專案的完整流程 ✨</p>
    <a href="https://ithelp.ithome.com.tw/users/20159686/ironman/7564" target="_blank">IT 全文章連結</a>
</div>

<h2 id="自我介紹"><a href="#自我介紹" class="headerlink" title="自我介紹"></a>自我介紹</h2><p>嗨嗨，我是 2魚，目前在高雄的一家新創公司擔任全端工程師。<br>沒錯，你沒聽錯，我曾經是空軍，就是隊伍介紹那個修飛機的 ✈️。<br>去年，我從 Tibame 結訓後，成功轉職成為前端工程師。這次，我號召了另外三位同學，一起來參加鐵人賽。與其說是來<del>坐牢</del>，不如說是來磨練技術、刷經驗啦！畢竟人多好辦事，動力也會 up up 😎。</p>
<h2 id="為什麼要參加鐵人賽？"><a href="#為什麼要參加鐵人賽？" class="headerlink" title="為什麼要參加鐵人賽？"></a>為什麼要參加鐵人賽？</h2><p>今年初，我參加了六角學院的 Node.js 直播班，從此一頭栽進了後端的世界。這次參加鐵人賽，我決定趁熱打鐵，分享一個完整的專案開發流程。能夠獨自包辦前端和後端，光是想到就覺得超級興奮！🔥</p>
<p>我的目標很簡單：透過這次分享，不僅能夠加深自己的技術功力，更希望能讓更多的前端夥伴們了解後端的奧妙。畢竟，知己知彼，百戰百勝嘛！</p>
<h2 id="專案的靈感來源"><a href="#專案的靈感來源" class="headerlink" title="專案的靈感來源"></a>專案的靈感來源</h2><p>目前我住在高雄租屋，每天滑社群軟體時總會看到一堆可愛又搞怪的小鳥。看著看著，突然萌生了想養一隻鸚鵡的念頭。鼓起勇氣問了房東，結果…嗯，你們猜對了，被果斷拒絕了 555。<br>但是！工程師的特質就是：遇到問題，想辦法解決。既然不能真的養鸚鵡，那就來寫個程式吧！於是，我決定為未來的鸚鵡們（或許是你的？）做一個以鸚鵡食物計算機為主軸的網站。</p>
<h2 id="30天專案目標及說明"><a href="#30天專案目標及說明" class="headerlink" title="30天專案目標及說明"></a>30天專案目標及說明</h2><p>接下來的 30 天，我將帶大家從零開始，一步步打造出一個專案的簡化版本。我們的旅程會涵蓋全端開發的各個面向，讓你對整個開發流程有全面的認識：</p>
<ol>
<li>專案發想與規劃（Day 1-2）：<ul>
<li>確定專案主題和目標</li>
<li>探討前後端分離架構</li>
<li>選擇適合的技術（Node.js, Express, MongoDB, Nuxt3）</li>
</ul>
</li>
<li>設計階段（Day 3-6）：<ul>
<li>繪製網站地圖（Whimsical）</li>
<li>設計使用者流程圖（Whimsical）</li>
<li>製作線稿圖（Figma）</li>
<li>完成高保真 UI 設計（Figma）</li>
</ul>
</li>
<li>後端開發（Day 7-21）：<ul>
<li>MongoDB 資料庫設計與部署（MongoDB Atlas）</li>
<li>使用 Firebase Storage 管理圖片資源</li>
<li>搭建 Express.js 伺服器</li>
<li>實作 CRUD 操作的 RESTful API</li>
<li>使用 Postman 進行 API 測試</li>
<li>實作錯誤處理和中間件</li>
<li>使用 Swagger 生成 API 文檔</li>
<li>開發鮮食計算和飲食建議的核心算法</li>
<li>使用 Render 部署後端服務</li>
</ul>
</li>
<li>前端開發（Day 22-28）：<ul>
<li>設置 Nuxt3 開發環境</li>
<li>安裝並配置必要的套件（Pinia, Tailwind CSS 等）</li>
<li>實作響應式導航欄和頁面佈局</li>
<li>開發鮮食計算機介面</li>
<li>製作互動式聯絡表單</li>
<li>整合後端 API，實現數據的讀取和提交</li>
</ul>
</li>
<li>部署與總結（Day 29-30）：<ul>
<li>透過 Vercel 部署前端網站</li>
<li>回顧整個開發過程，分享心得與學習經驗</li>
</ul>
</li>
</ol>
<p>每一天的內容都會緊密相連，就像是在拼一幅巨大的拼圖。我們會循序漸進，從基礎概念開始，逐步深入到更複雜的技術實現。今天學到的知識，明天就能立即派上用場。這個過程不僅能幫助你掌握各種技術，還能讓你了解如何將不同的技術整合在一個完整的專案中。</p>
<h2 id="誰適合跟著一起學習？"><a href="#誰適合跟著一起學習？" class="headerlink" title="誰適合跟著一起學習？"></a>誰適合跟著一起學習？</h2><p>這個系列適合：</p>
<ul>
<li>有基礎程式知識，想挑戰全端開發的朋友</li>
<li>對專案開發流程感興趣，想一窺究竟的新手</li>
<li>非本科背景但想轉職當工程師，不知道該選哪個領域的迷惘者</li>
<li><del>或者單純想來看看我到底在搞什麼飛機的好奇寶寶們</del></li>
</ul>
<h2 id="完整網站連結"><a href="#完整網站連結" class="headerlink" title="完整網站連結"></a>完整網站連結</h2><p>在這 30 天的鐵人賽中，我們會一起打造一個簡化版的鸚鵡食堂網站。這個版本會包含核心功能，讓大家能夠理解整個開發流程。<br>如果你想一窺這個簡化版本的樣貌，可以點擊這個連結：<a href="https://2024it-test-web.vercel.app/">鐵人賽版本連結</a><br>另外，我也想和大家分享我之前完成的完整版本。這個版本包含了更多功能和細節，可以讓你看到這個專案的全貌：<a href="https://parrot.2fishs.com/">完整版本連結</a><br>接下來的 30 天，我們會一起探索這個專案的簡化版本，了解每個環節背後的思考和實作過程。準備好和我一起踏上這趟充滿驚喜的程式之旅了嗎？繫好安全帶，我們要起飛囉！✈️💻</p>
<br />
<hr />
<br />

<blockquote>
<p>希望這篇文章有幫助到你，謝謝你的觀看，若有想看的系列也歡迎告訴我 😉</p>
</blockquote>
]]></content>
      <tags>
        <tag>2024IT鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>[ 2024 IT 鐵人賽 DAY10 ] 輕鬆管理網站圖片：Firebase Storage 使用教學</title>
    <url>/2024/09/19/2024it/d10/</url>
    <content><![CDATA[<p>大家好！已經來到第十篇文章了 🎉<br>今天我們來聊聊如何使用 Firebase Storage 來存儲我們的圖片。<br>上次我們把資料整理好並匯入了 MongoDB Compass，現在是時候來處理圖片了。一個漂亮的鸚鵡網站怎麼能少得了精美的圖片呢？</p>
<span id="more"></span>

<div class="cus-intro-box">
    <h2>房東不給養鸚鵡 - 那就用 Nuxt + Express + MongoDB 30 天寫一個全端鸚鵡專案。</h2>
    <p>挑戰人生第一次鐵人賽，就來個佛心分享 side project，從專案發想、規劃、設計、資料庫、開發到部署，技術使用 Nuxt 3、Tailwind CSS、Pinia、Axios、Express、MongoDB，製作一個前後端分離的鸚鵡專案，功能主要介紹食物計算機和聯絡我們，希望可以讓更多人瞭解專案的完整流程 ✨</p>
    <a href="https://ithelp.ithome.com.tw/users/20159686/ironman/7564" target="_blank">IT 全文章連結</a>
</div>

<blockquote>
<p>注意：Firebase 已經更改免費方案，所以這邊的教學只適用於舊的免費方案，新的方案請參考官方文件。</p>
</blockquote>
<h2 id="Firebase-Storage-是什麼？"><a href="#Firebase-Storage-是什麼？" class="headerlink" title="Firebase Storage 是什麼？"></a>Firebase Storage 是什麼？</h2><p>Firebase Storage 是 Google 提供的雲端存儲服務。它讓我們可以輕鬆地存儲和管理各種文件，特別適合用來存放圖片、影片等媒體文件。使用 Firebase Storage 的好處有：</p>
<ol>
<li>安全性高：提供安全的文件存儲。</li>
<li>擴展性強：不用擔心存儲空間不夠用。</li>
<li>訪問便捷：可以通過網址直接訪問文件。</li>
<li>整合方便：與其他 Firebase 服務無縫連接。</li>
</ol>
<h2 id="如何使用-Firebase-Storage-存儲圖片"><a href="#如何使用-Firebase-Storage-存儲圖片" class="headerlink" title="如何使用 Firebase Storage 存儲圖片"></a>如何使用 Firebase Storage 存儲圖片</h2><p>讓我們一步步來看如何使用 Firebase Storage：</p>
<h3 id="1-註冊-Firebase-帳號"><a href="#1-註冊-Firebase-帳號" class="headerlink" title="1. 註冊 Firebase 帳號"></a>1. 註冊 Firebase 帳號</h3><p>首先，前往 <a href="https://firebase.google.com/?hl=zh-cn">Firebase 官網</a> 註冊帳號。如果你有 Google 帳號，直接用它登入就可以了。</p>
<h3 id="2-創建新項目"><a href="#2-創建新項目" class="headerlink" title="2. 創建新項目"></a>2. 創建新項目</h3><ul>
<li><p>登入後，點擊「新增專案」。<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20240919/2015968666FbE0blqv.png" alt="https://ithelp.ithome.com.tw/upload/images/20240919/2015968666FbE0blqv.png"></p>
</li>
<li><p>為專案取個名字，比如 <code>ex-project</code>。<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20240919/20159686PRbhyxILNP.png" alt="https://ithelp.ithome.com.tw/upload/images/20240919/20159686PRbhyxILNP.png"></p>
</li>
<li><p>在設置過程中，你會看到是否要啟用 Google Analytics 的選項：</p>
<blockquote>
<p>💡 關於 Google Analytics：<br>      Google Analytics 是一個強大的網站分析工具。雖然我們的專案不需要用到，但它確實有些有趣的功能：<br>      1. 訪客分析：可以了解有多少人瀏覽了你的網站，他們來自哪裡。<br>      2. 行為追蹤：知道訪客在網站上做了什麼，瀏覽了哪些頁面。<br>      3. 轉換率：如果你有特定目標（比如註冊會員），可以追蹤達成率。<br>      4. 即時數據：實時查看網站的訪問情況。<br>      對於個人項目來說，這些功能可能用不太到。但如果未來你的網站變得超級受歡迎，這些數據可能會變得很有用。<br>      現在先不用太在意，你可以根據自己的需求決定是否啟用。</p>
</blockquote>
<p>  <img src="https://ithelp.ithome.com.tw/upload/images/20240919/20159686npFlVWfgS2.png" alt="https://ithelp.ithome.com.tw/upload/images/20240919/20159686npFlVWfgS2.png"><br>  <img src="https://ithelp.ithome.com.tw/upload/images/20240919/20159686nfimwh3a8y.png" alt="https://ithelp.ithome.com.tw/upload/images/20240919/20159686nfimwh3a8y.png"><br>  這邊要稍微耐心等候一下下<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20240919/20159686k62RjPKveu.png" alt="https://ithelp.ithome.com.tw/upload/images/20240919/20159686k62RjPKveu.png"></p>
</li>
</ul>
<h3 id="3-設置-Storage"><a href="#3-設置-Storage" class="headerlink" title="3. 設置 Storage"></a>3. 設置 Storage</h3><ul>
<li><p>在左側選單中找到「Storage」並點擊。<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20240919/201596860GV032nj1T.png" alt="https://ithelp.ithome.com.tw/upload/images/20240919/201596860GV032nj1T.png"><img src="https://ithelp.ithome.com.tw/upload/images/20240919/20159686UmYV3rcvLU.png" alt="https://ithelp.ithome.com.tw/upload/images/20240919/20159686UmYV3rcvLU.png"></p>
</li>
<li><p>選擇「正式版」模式，這會使用預設的安全規則。<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20240919/20159686YMBZlEaz26.png" alt="https://ithelp.ithome.com.tw/upload/images/20240919/20159686YMBZlEaz26.png"></p>
</li>
<li><p>選擇存儲位置，建議選擇離目標用戶較近的地方 (這邊使用預設值)。<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20240919/20159686KhTNvt0HHw.png" alt="https://ithelp.ithome.com.tw/upload/images/20240919/20159686KhTNvt0HHw.png"></p>
</li>
</ul>
<h3 id="4-上傳圖片"><a href="#4-上傳圖片" class="headerlink" title="4. 上傳圖片"></a>4. 上傳圖片</h3><p>現在我們來上傳圖片：</p>
<ul>
<li><p>在 Firebase Console 中，進入 Storage 頁面 (上面步驟建立完成會直接進到該頁面)。<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20240919/20159686E7qwjbKfAt.png" alt="https://ithelp.ithome.com.tw/upload/images/20240919/20159686E7qwjbKfAt.png"></p>
</li>
<li><p>點擊「上傳檔案」按鈕。</p>
</li>
<li><p>選擇你要上傳的圖片文件。</p>
</li>
<li><p>等待上傳完成。<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20240919/20159686hgvt5U8fuD.png" alt="https://ithelp.ithome.com.tw/upload/images/20240919/20159686hgvt5U8fuD.png"></p>
</li>
</ul>
<h3 id="5-創建文件夾"><a href="#5-創建文件夾" class="headerlink" title="5. 創建文件夾"></a>5. 創建文件夾</h3><p>為了更好地管理圖片，我們可以創建文件夾：</p>
<ul>
<li><p>在 Storage 頁面，點擊「創建文件夾」。</p>
</li>
<li><p>為文件夾命名，例如「鸚鵡圖片」。<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20240919/20159686FeQjWFOWrp.png" alt="https://ithelp.ithome.com.tw/upload/images/20240919/20159686FeQjWFOWrp.png"></p>
</li>
<li><p>將相關圖片上傳到這個文件夾中。<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20240919/20159686mVKBiZ3q2l.png" alt="https://ithelp.ithome.com.tw/upload/images/20240919/20159686mVKBiZ3q2l.png"></p>
</li>
</ul>
<h3 id="6-獲取圖片-URL"><a href="#6-獲取圖片-URL" class="headerlink" title="6. 獲取圖片 URL"></a>6. 獲取圖片 URL</h3><p>上傳後，我們需要獲取圖片的 URL 來在網站中使用：</p>
<ul>
<li>在 Storage 中找到你上傳的圖片。</li>
<li>點擊圖片，在右側面板中你會看到「文件詳細資料」，右鍵點擊檔案名稱。</li>
<li>複製連結，它就是我們要用的圖片地址。<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20240919/20159686HaNnWuMq34.png" alt="https://ithelp.ithome.com.tw/upload/images/20240919/20159686HaNnWuMq34.png"></li>
</ul>
<h3 id="小提醒"><a href="#小提醒" class="headerlink" title="小提醒"></a>小提醒</h3><ol>
<li>養成良好的文件組織習慣，使用清晰的文件夾結構。</li>
<li>使用有意義的文件名，方便之後查找和管理。</li>
<li>注意圖片的大小和格式，以優化網站加載速度 (上傳之前可以先 <a href="https://www.fonepaw.com/tw/photo-compressor/">壓縮</a> 再上傳)。</li>
</ol>
<h3 id="為什麼選擇雲端圖片庫？"><a href="#為什麼選擇雲端圖片庫？" class="headerlink" title="為什麼選擇雲端圖片庫？"></a>為什麼選擇雲端圖片庫？</h3><p>在結束之前，你可能會問：「為什麼我們要使用 Firebase Storage，而不是直接把圖片放在專案裡呢？」這是個好問題！使用雲端圖片庫有幾個重要的優勢：</p>
<ol>
<li>節省空間：把圖片放在雲端可以減少專案的體積，讓你的程式碼更輕巧。</li>
<li>更快的加載速度：Firebase 有強大的 CDN，可以讓世界各地的用戶都能快速載入圖片。</li>
<li>易於管理：你可以隨時添加、刪除或更新圖片，而不需要重新部署整個專案。</li>
<li>擴展性強：隨著網站成長，你可以輕鬆地存儲更多圖片，而不用擔心空間不足。</li>
<li>版本控制更簡單：當你的專案沒有大量二進制文件（如圖片）時，版本控制會更加輕鬆。<br>所以，使用 Firebase Storage 不僅讓我們的開發過程更順暢，也為未來的擴展和維護鋪平了道路。這就是為什麼我們選擇雲端方案的原因啦！</li>
</ol>
<h3 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h3><p>這就是使用 Firebase Storage 存儲圖片的基本流程了。是不是感覺很簡單？通過 Firebase Storage，我們可以輕鬆地為鸚鵡樂園添加漂亮的圖片，讓網站更加生動有趣。<br>接下來，我們就可以在網站上展示這些可愛的鸚鵡圖片了。想像一下，一隻隻色彩繽紛的鸚鵡在網頁上展翅，是不是很棒？<br>記住，優秀的網站開發不僅需要好的代碼，還需要優質的內容和圖片。下次我們會探討如何在前端頁面上展示這些圖片，大家繼續加油哦！<br>大家有沒有管理圖片資料的秘訣呢？歡迎在下方留言分享喔！我們一起學習、一起成長。明天見啦，掰掰～</p>
<br />
<hr />
<br />

<blockquote>
<p>希望這篇文章有幫助到你，謝謝你的觀看，若有想看的系列也歡迎告訴我 😉</p>
</blockquote>
]]></content>
      <tags>
        <tag>2024IT鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>[ 2024 IT 鐵人賽 DAY12 ] 後端開發好幫手：四大套件使用指南</title>
    <url>/2024/09/21/2024it/d12/</url>
    <content><![CDATA[<p>嗨大家好！今天我們要來認識幾個在後端開發中超級實用的套件。這些套件就像是我們的得力助手，能讓我們的開發過程變得更加順暢。讓我們一起來看看吧！</p>
<span id="more"></span>

<div class="cus-intro-box">
    <h2>房東不給養鸚鵡 - 那就用 Nuxt + Express + MongoDB 30 天寫一個全端鸚鵡專案。</h2>
    <p>挑戰人生第一次鐵人賽，就來個佛心分享 side project，從專案發想、規劃、設計、資料庫、開發到部署，技術使用 Nuxt 3、Tailwind CSS、Pinia、Axios、Express、MongoDB，製作一個前後端分離的鸚鵡專案，功能主要介紹食物計算機和聯絡我們，希望可以讓更多人瞭解專案的完整流程 ✨</p>
    <a href="https://ithelp.ithome.com.tw/users/20159686/ironman/7564" target="_blank">IT 全文章連結</a>
</div>

<h2 id="1-cors：跨來源資源共用的守門員"><a href="#1-cors：跨來源資源共用的守門員" class="headerlink" title="1. cors：跨來源資源共用的守門員"></a>1. cors：跨來源資源共用的守門員</h2><h3 id="什麼是-cors？"><a href="#什麼是-cors？" class="headerlink" title="什麼是 cors？"></a>什麼是 cors？</h3><p>CORS（Cross-Origin Resource Sharing）是一種安全機制，用於控制網頁從不同源（網域）存取資源的權限。想像一下，CORS 就像是一個精明的門衛，決定哪些訪客可以進入你的網站後院。</p>
<h3 id="為什麼需要它？"><a href="#為什麼需要它？" class="headerlink" title="為什麼需要它？"></a>為什麼需要它？</h3><p>在現代網頁開發中，前端和後端經常部署在不同的網域上。如果沒有 CORS，瀏覽器會出於安全考慮，阻止前端向不同網域的後端發送請求。這就像是兩個不同國家的人想要通話，但是沒有國際電話服務一樣。CORS 就是那個讓我們能夠進行「國際通話」的服務。</p>
<h3 id="如何使用："><a href="#如何使用：" class="headerlink" title="如何使用："></a>如何使用：</h3><p>使用 CORS 非常簡單，讓我們一步步來：</p>
<ol>
<li>首先，我們需要安裝 CORS 套件： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install cors</span><br></pre></td></tr></table></figure></li>
<li>然後，在我們的 <code>app.js</code> 檔案中設定：<br>這樣設定後，所有來源的請求都會被允許，就像是給了所有人進入你後院的通行證。 <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">&#x27;cors&#x27;</span>);<span class="comment">// 引入 CORS 套件</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cors</span>());<span class="comment">// 允許所有來源的請求</span></span><br></pre></td></tr></table></figure></li>
<li>如果你想要更嚴格的控制，可以這樣設定：<br>這樣就像是你告訴門衛：「只有來自 ‘<a href="http://yourfrontend.com/">http://yourfrontend.com</a>‘ 的訪客可以進來，而且他們只能用走的或跑的方式進入（GET 和 POST）。」 <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cors</span>(&#123;</span><br><span class="line">  <span class="attr">origin</span>: <span class="string">&#x27;http://yourfrontend.com&#x27;</span>,<span class="comment">// 只允許這個網域的請求</span></span><br><span class="line">  <span class="attr">methods</span>: [<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]<span class="comment">// 只允許 GET 和 POST 請求</span></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure>
<blockquote>
<p>💡 註解說明：<br>     - <strong>origin:</strong><br>         這個參數用來設置允許的前端來源。只有來自這個指定來源的請求才會通過 CORS 檢查。如果你想限制只有特定的網站或應用程序能夠訪問你的 API，這裡就可以指定該網站的 URL。<br>     - <strong>methods:</strong><br>         這個參數指定了允許的 HTTP 方法。例如，這裡的配置僅允許 GET 和 POST 請求。如果你的 API 僅支持這兩種方法，其他方法的請求將被拒絕。這樣可以防止其他類型的請求（如 PUT、DELETE）被不正當使用。</p>
</blockquote>
</li>
</ol>
<h2 id="2-dotenv：環境變數的管家"><a href="#2-dotenv：環境變數的管家" class="headerlink" title="2. dotenv：環境變數的管家"></a>2. dotenv：環境變數的管家</h2><h3 id="什麼是-dotenv？"><a href="#什麼是-dotenv？" class="headerlink" title="什麼是 dotenv？"></a>什麼是 dotenv？</h3><p>dotenv 就像是一個神奇的保險箱，可以安全地存放我們的秘密（環境變數），並在需要時輕鬆取用。它能夠將存儲在 <code>.env</code> 檔案中的環境變數載入到 <code>process.env</code> 中。</p>
<h3 id="為什麼需要它？-1"><a href="#為什麼需要它？-1" class="headerlink" title="為什麼需要它？"></a>為什麼需要它？</h3><p>在開發過程中，我們經常需要使用一些敏感資訊，比如資料庫密碼或 API 金鑰。把這些直接寫在程式碼裡是很危險的，尤其是當你的程式碼會被分享或公開時。dotenv 讓我們可以把這些敏感資訊安全地存放在 <code>.env</code> 檔案中，既方便管理又安全。</p>
<h3 id="如何使用：-1"><a href="#如何使用：-1" class="headerlink" title="如何使用："></a>如何使用：</h3><p>讓我們一步步來設定 dotenv：</p>
<ol>
<li><p>首先安裝 dotenv：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install dotenv</span><br></pre></td></tr></table></figure></li>
<li><p>在專案根目錄創建一個 <code>config.env</code> 檔案：<br> 這就像是在保險箱裡放入我們的秘密。</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DB_HOST=localhost</span><br><span class="line">DB_USER=root</span><br><span class="line">DB_PASS=s1mpl3</span><br></pre></td></tr></table></figure>
<p> <img src="https://ithelp.ithome.com.tw/upload/images/20240921/20159686ab47g8lt4T.png" alt="https://ithelp.ithome.com.tw/upload/images/20240921/20159686ab47g8lt4T.png"></p>
<blockquote>
<p>💡 說明：環境變數檔案中的 Key-Value Pair（鍵值對）<br>     在環境變數檔案（例如 <code>.env</code> 或 <code>config.env</code>）中，變數是以 <strong>Key-Value Pair（鍵值對）</strong> 的形式表示的。這種格式幫助我們輕鬆管理和使用配置數據。<br>     ### Key-Value Pair 結構<br>     <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DB_HOST=localhost</span><br></pre></td></tr></table></figure><br>     - <strong>Key（鍵）:</strong><br>         - <code>DB_HOST</code> 是這個環境變數的 <strong>key</strong>，它是變數的名稱，告訴我們這個變數代表什麼。通常，key 使用全大寫字母並用 <code>_</code> 來分隔單詞。<br>     - <strong>Value（值）:</strong><br>         - <code>localhost</code> 是這個變數的 <strong>value</strong>，它是這個變數的具體內容。在這個例子中，<code>localhost</code> 指的是資料庫的主機位置。<br>     ### 為什麼使用 Key-Value Pair？<br>     - <strong>Key</strong> 是變數的名稱，你可以在程式中通過這個名稱來引用這個變數。<br>     - <strong>Value</strong> 是變數的實際值，代表這個變數的具體內容，比如地址、密碼、或其他配置資料。<br>     這樣的結構讓我們可以在程式中靈活使用不同的配置數據，並且能夠在不同環境中輕鬆切換配置，而不必改動程式碼。
 </p>
</blockquote>
</li>
<li><p>在 <code>app.js</code> 中使用和測試 (記得要將專案 <code>npm start</code> 執行起來)：<br>這樣，我們就可以安全地在程式中使用這些環境變數了。</p>
 <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 將 .env 檔案中的變數載入到 process.env 中</span></span><br><span class="line"><span class="keyword">const</span> dotenv = <span class="built_in">require</span>(<span class="string">&quot;dotenv&quot;</span>);</span><br><span class="line">dotenv.<span class="title function_">config</span>(&#123; <span class="attr">path</span>: <span class="string">&quot;./config.env&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(process.<span class="property">env</span>.<span class="property">DB_HOST</span>); <span class="comment">// 從 process.env 中讀取並打印 DB_HOST 變數的值 // 這邊會得到 localhost</span></span><br></pre></td></tr></table></figure>
<p> <img src="https://ithelp.ithome.com.tw/upload/images/20240921/201596864mzj84h0Rr.png" alt="https://ithelp.ithome.com.tw/upload/images/20240921/201596864mzj84h0Rr.png"></p>
</li>
<li><p>別忘了保護你的秘密！將 <code>.env</code> 檔案加入 <code>.gitignore</code>：<br> 這樣可以確保你的秘密不會被不小心上傳到版本控制系統中。<br> 在專案根目錄新增一個 <code>.gitignore</code> 檔案，貼上範例程式碼：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 不要上傳套件包</span></span><br><span class="line">node_modules/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不要上傳 config.env</span></span><br><span class="line">config.env</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不要上傳所有 .env</span></span><br><span class="line">*.<span class="built_in">env</span></span><br></pre></td></tr></table></figure>
<p> <img src="https://ithelp.ithome.com.tw/upload/images/20240921/20159686AFSrydiu0w.png" alt="https://ithelp.ithome.com.tw/upload/images/20240921/20159686AFSrydiu0w.png"></p>
<blockquote>
<p>💡 說明<br>     1. <strong>忽略特定檔案 <code>config.env</code></strong><br>         如果你有一個特定的環境變數檔案，如 <code>config.env</code>，可以通過在 <code>.gitignore</code> 中添加以下一行來忽略它：<br>         <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">config.env</span><br></pre></td></tr></table></figure><br>     2. <strong>忽略所有 <code>.env</code> 結尾的檔案</strong><br>         若要忽略所有副檔名為 <code>.env</code> 的檔案（例如 <code>production.env</code> 或 <code>development.env</code>），可以添加：<br>         <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*.env</span><br></pre></td></tr></table></figure><br>     這樣設置後，無論是特定的 <code>config.env</code> 還是其他 <code>.env</code> 檔案，都將被 Git 忽略，保護你的敏感資訊不會被推送到遠端版本庫。</p>
</blockquote>
<blockquote>
<p>版本控制 (github) 會在下一篇詳細教學歐</p>
</blockquote>
</li>
</ol>
<h2 id="3-mongoose：MongoDB-的最佳拍檔"><a href="#3-mongoose：MongoDB-的最佳拍檔" class="headerlink" title="3. mongoose：MongoDB 的最佳拍檔"></a>3. mongoose：MongoDB 的最佳拍檔</h2><h3 id="什麼是-mongoose？"><a href="#什麼是-mongoose？" class="headerlink" title="什麼是 mongoose？"></a>什麼是 mongoose？</h3><p>Mongoose 是一個 ODM（Object Data Modeling）庫，它就像是 MongoDB 的私人翻譯官。它幫助我們用 JavaScript 對象的方式來操作 MongoDB 的文檔。</p>
<h3 id="為什麼需要它？-2"><a href="#為什麼需要它？-2" class="headerlink" title="為什麼需要它？"></a>為什麼需要它？</h3><p>MongoDB 本身就很強大，但 Mongoose 讓它變得更加易用。它提供了模式驗證、查詢構建等功能，讓我們可以更直觀、更安全地操作數據。使用 Mongoose，我們可以定義數據的結構，這樣就能確保存入數據庫的數據都是符合預期的。</p>
<h3 id="安裝："><a href="#安裝：" class="headerlink" title="安裝："></a>安裝：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install mongoose</span><br></pre></td></tr></table></figure>
<blockquote>
<p>我們會在後續的課程中深入探討如何使用 Mongoose，敬請期待！</p>
</blockquote>
<h2 id="4-uuid：唯一識別碼生成器"><a href="#4-uuid：唯一識別碼生成器" class="headerlink" title="4. uuid：唯一識別碼生成器"></a>4. uuid：唯一識別碼生成器</h2><h3 id="什麼是-uuid？"><a href="#什麼是-uuid？" class="headerlink" title="什麼是 uuid？"></a>什麼是 uuid？</h3><p>UUID（Universally Unique Identifier）是一個 128 位元的數字，用於在網路中唯一地標識資訊。想像它是一個超級長的，幾乎不可能重複的序號。</p>
<h3 id="為什麼需要它？-3"><a href="#為什麼需要它？-3" class="headerlink" title="為什麼需要它？"></a>為什麼需要它？</h3><p>在開發中，我們經常需要生成唯一的標識符，比如用戶 ID、訂單編號等。UUID 保證了即使在不同的系統或時間點生成的 ID 也不會重複，這在分布式系統中特別有用。</p>
<h3 id="如何使用：-2"><a href="#如何使用：-2" class="headerlink" title="如何使用："></a>如何使用：</h3><ol>
<li><p>安裝 uuid：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install uuid</span><br></pre></td></tr></table></figure>
</li>
<li><p>在程式中使用：<br>每次調用 <code>uuidv4()</code> 都會生成一個新的、唯一的 ID。</p>
 <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="attr">v4</span>: uuidv4 &#125; = <span class="built_in">require</span>(<span class="string">&#x27;uuid&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">uuidv4</span>()); <span class="comment">// 輸出類似：&#x27;1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed&#x27;</span></span><br></pre></td></tr></table></figure>
<p> <img src="https://ithelp.ithome.com.tw/upload/images/20240921/201596864o9K0EGdZB.png" alt="https://ithelp.ithome.com.tw/upload/images/20240921/201596864o9K0EGdZB.png"></p>
</li>
</ol>
<h2 id="今日範例程式碼-app-js"><a href="#今日範例程式碼-app-js" class="headerlink" title="今日範例程式碼 app.js"></a>今日範例程式碼 <code>app.js</code></h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> createError = <span class="built_in">require</span>(<span class="string">&#x27;http-errors&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> cookieParser = <span class="built_in">require</span>(<span class="string">&#x27;cookie-parser&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> logger = <span class="built_in">require</span>(<span class="string">&#x27;morgan&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cors = <span class="built_in">require</span>(<span class="string">&quot;cors&quot;</span>); <span class="comment">// 引入允許跨網域套件 cors</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 將 .env 檔案中的變數載入到 process.env 中</span></span><br><span class="line"><span class="keyword">const</span> dotenv = <span class="built_in">require</span>(<span class="string">&quot;dotenv&quot;</span>);</span><br><span class="line">dotenv.<span class="title function_">config</span>(&#123; <span class="attr">path</span>: <span class="string">&quot;./config.env&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(process.<span class="property">env</span>.<span class="property">DB_HOST</span>); <span class="comment">// 從 process.env 中讀取並打印 DB_HOST 變數的值 // 這邊會得到 localhost</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">v4</span>: uuidv4 &#125; = <span class="built_in">require</span>(<span class="string">&#x27;uuid&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">uuidv4</span>()); <span class="comment">// 輸出類似：&#x27;1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> indexRouter = <span class="built_in">require</span>(<span class="string">&#x27;./routes/index&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> usersRouter = <span class="built_in">require</span>(<span class="string">&#x27;./routes/users&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cors</span>()); <span class="comment">// 全部放行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// view engine setup</span></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;views&#x27;</span>, path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;views&#x27;</span>));</span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;ejs&#x27;</span>);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">logger</span>(<span class="string">&#x27;dev&#x27;</span>));</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>());</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cookieParser</span>());</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;public&#x27;</span>)));</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/&#x27;</span>, indexRouter);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/users&#x27;</span>, usersRouter);</span><br><span class="line"></span><br><span class="line"><span class="comment">// catch 404 and forward to error handler</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="title function_">next</span>(<span class="title function_">createError</span>(<span class="number">404</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// error handler</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">function</span>(<span class="params">err, req, res, next</span>) &#123;</span><br><span class="line">  <span class="comment">// set locals, only providing error in development</span></span><br><span class="line">  res.<span class="property">locals</span>.<span class="property">message</span> = err.<span class="property">message</span>;</span><br><span class="line">  res.<span class="property">locals</span>.<span class="property">error</span> = req.<span class="property">app</span>.<span class="title function_">get</span>(<span class="string">&#x27;env&#x27;</span>) === <span class="string">&#x27;development&#x27;</span> ? err : &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// render the error page</span></span><br><span class="line">  res.<span class="title function_">status</span>(err.<span class="property">status</span> || <span class="number">500</span>);</span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = app;</span><br></pre></td></tr></table></figure>

<p>這些套件就像是我們的超級英雄團隊，各自有著獨特的本領，幫助我們構建更安全、更有效率的後端應用。透過正確使用它們，我們可以專注於開發應用的核心功能，而不必過多擔心底層的實現細節。<br>下次我們將深入探討如何使用這些工具構建更複雜的後端功能！記住，學習編程就像是一場冒險，每一步都充滿了新的發現。保持好奇心，勇於嘗試，你一定會成為出色的開發者！加油！💪✨<br>大家有沒有想要更詳細補充的部分呢？歡迎在下方留言分享喔！我們一起學習、一起成長。明天見啦，掰掰～</p>
<br />
<hr />
<br />

<blockquote>
<p>希望這篇文章有幫助到你，謝謝你的觀看，若有想看的系列也歡迎告訴我 😉</p>
</blockquote>
]]></content>
      <tags>
        <tag>2024IT鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>[ 2024 IT 鐵人賽 DAY11 ] Express 基礎：輕鬆進入後端世界</title>
    <url>/2024/09/20/2024it/d11/</url>
    <content><![CDATA[<p>嗨大家好！我是2魚，一個主攻前端的工程師。說實話，我也是今年初才在六角學院開始接觸後端的新手呢 🥹<br>還記得剛看到 Node.js 和 Express 時，真的是一頭霧水。不過現在，我已經能搭建簡單的後端應用了。今天想和大家分享一下我的學習心得，一起來探索後端開發的世界吧！<br>別被「後端」這個詞嚇到，我會用簡單的方式一步步解釋。畢竟，我也是剛從前端轉過來的，完全懂得入門時的各種困惑。準備好了嗎？我們開始吧！</p>
<span id="more"></span>

<div class="cus-intro-box">
    <h2>房東不給養鸚鵡 - 那就用 Nuxt + Express + MongoDB 30 天寫一個全端鸚鵡專案。</h2>
    <p>挑戰人生第一次鐵人賽，就來個佛心分享 side project，從專案發想、規劃、設計、資料庫、開發到部署，技術使用 Nuxt 3、Tailwind CSS、Pinia、Axios、Express、MongoDB，製作一個前後端分離的鸚鵡專案，功能主要介紹食物計算機和聯絡我們，希望可以讓更多人瞭解專案的完整流程 ✨</p>
    <a href="https://ithelp.ithome.com.tw/users/20159686/ironman/7564" target="_blank">IT 全文章連結</a>
</div>

<h2 id="準備冒險裝備：設置電腦環境"><a href="#準備冒險裝備：設置電腦環境" class="headerlink" title="準備冒險裝備：設置電腦環境"></a>準備冒險裝備：設置電腦環境</h2><p>首先，我們需要準備一些必備的工具：</p>
<ul>
<li>Node.js：這是我們的主角。去 <a href="https://nodejs.org/">Node.js 官網</a> 下載安裝吧！選擇 LTS 版本就好，它比較穩定。</li>
<li>編輯器：強烈推薦 VS Code。它不只是個編輯器，還能提示錯誤和自動補全，超級好用。</li>
<li>終端機：Windows 用命令提示字元或 PowerShell，Mac 用 Terminal。不要被嚇到，它就是個可以輸入指令的小視窗啦！<br>安裝完這些後，打開終端機輸入 <code>node -v</code> 和 <code>npm -v</code>，如果都看到版本號，就代表安裝成功了！<br><img src="https://ithelp.ithome.com.tw/upload/images/20240920/20159686NuLPZM0giJ.png" alt="https://ithelp.ithome.com.tw/upload/images/20240920/20159686NuLPZM0giJ.png"></li>
</ul>
<h2 id="認識我們的冒險夥伴：Express-框架"><a href="#認識我們的冒險夥伴：Express-框架" class="headerlink" title="認識我們的冒險夥伴：Express 框架"></a>認識我們的冒險夥伴：Express 框架</h2><p>Express 就像是 Node.js 的好幫手，讓我們寫後端變得更簡單。它主要幫我們處理：</p>
<ul>
<li>路由：管理不同的網址該做什麼事。</li>
<li>中間件：像是流水線上的工人，可以對請求做各種處理。</li>
<li>模板引擎：讓你更容易生成 HTML 頁面。<br>用 Express 可以快速搭建網站、做 API，真的是後端開發的好朋友！</li>
</ul>
<h2 id="探索網路世界的地圖：網址規則介紹"><a href="#探索網路世界的地圖：網址規則介紹" class="headerlink" title="探索網路世界的地圖：網址規則介紹"></a>探索網路世界的地圖：網址規則介紹</h2><p>說到網址，像 <code>http://www.example.com/users?id=123</code> 這種，其實是有規則的：</p>
<ul>
<li><code>http://</code> 是協議，告訴瀏覽器如何獲取資源。</li>
<li><code>www.example.com</code> 是域名，相當於網站的門牌號碼。</li>
<li><code>/users</code> 是路徑，指向網站的特定部分。</li>
<li><code>?id=123</code> 是查詢參數，提供額外的信息。<br>在 Express 中，我們會根據不同的路徑（如 <code>/users</code>）來決定要執行什麼功能，這就是所謂的「路由」。來看看這個例子：<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/users&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;這裡是用戶列表&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
讓我來解釋一下這段代碼：</li>
</ul>
<ol>
<li><code>app.get</code>: 這是在告訴 Express，「嘿，當有人用 GET 方法訪問我們的網站時，請注意一下」。GET 是最常見的 HTTP 方法，通常用於獲取資料。</li>
<li><code>&#39;/users&#39;</code>: 這是路徑。它的意思是，我們只針對訪問 <code>/users</code> 這個地址的請求。</li>
<li><code>(req, res) =&gt; &#123; ... &#125;</code>: 這是一個函數，它決定了當有人訪問 <code>/users</code> 時我們要做什麼。<ul>
<li><code>req</code> 是 request 的縮寫，包含了請求的所有信息。</li>
<li><code>res</code> 是 response 的縮寫，用來發送響應給用戶。</li>
</ul>
</li>
<li><code>res.send(&#39;這裡是用戶列表&#39;);</code>: 這行代碼會向用戶發送一個響應，內容就是 ‘這裡是用戶列表’。<br>所以，整段代碼的意思是：當有人用瀏覽器訪問 <code>http://你的網站/users</code> 時，他們會看到一個寫著「這裡是用戶列表」的頁面。<br>這就是路由的基本概念！你可以根據不同的路徑，返回不同的內容。很酷吧？</li>
</ol>
<h2 id="分清楚主角和配角：Node-js-和-Express-的差異"><a href="#分清楚主角和配角：Node-js-和-Express-的差異" class="headerlink" title="分清楚主角和配角：Node.js 和 Express 的差異"></a>分清楚主角和配角：Node.js 和 Express 的差異</h2><p>Node.js 和 Express 的關係，可以想像成 Node.js 是引擎，Express 是用這個引擎做的跑車。</p>
<ul>
<li>Node.js：提供了在服務器端運行 JavaScript 的環境。它處理底層的事情，比如文件系統操作、網絡通信等。</li>
<li>Express：是建立在 Node.js 之上的 Web 應用框架。它簡化了很多常見的 Web 開發任務，讓我們能夠更快地構建應用。<br>兩者結合使用，讓我們的後端開發事半功倍，理論說完，開始實戰吧！</li>
</ul>
<h2 id="踏上冒險之路：使用-express-generator-建立專案"><a href="#踏上冒險之路：使用-express-generator-建立專案" class="headerlink" title="踏上冒險之路：使用 express-generator 建立專案"></a>踏上冒險之路：使用 express-generator 建立專案</h2><p>嘿，還記得我們小時候用積木搭建城堡嗎？express-generator 就像是一個神奇的積木盒，它能幫我們快速搭建一個 Express 應用的基本結構。超級方便的啦！<br>首先，我們需要安裝這個神奇工具。打開你的終端機（就是那個小黑窗），輸入：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全局安裝 express-generator</span></span><br><span class="line">npm install -g express-generator</span><br><span class="line"></span><br><span class="line"><span class="comment">// 檢查是否安裝成功</span></span><br><span class="line">npx express-generator --version</span><br></pre></td></tr></table></figure>
<p><img src="https://ithelp.ithome.com.tw/upload/images/20240920/20159686SiJU3TD5jL.png" alt="https://ithelp.ithome.com.tw/upload/images/20240920/20159686SiJU3TD5jL.png"><br>這行指令會全局安裝 express-generator，讓你在電腦的任何地方都能使用它。<br>安裝好後，我們就可以用它來創建新項目啦！</p>
<p>這邊我們要創建一個叫 “test-app” 的專案，步驟如下：</p>
<ul>
<li><p>打開 vscode，開啟你想放置專案的資料夾 (位置)</p>
</li>
<li><p>開啟終端機，輸入指令快速建立專案</p>
  <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">express -e test-app</span><br></pre></td></tr></table></figure>
<p>  這行指令會做幾件事：</p>
<ol>
<li>創建一個名為 “test-app” 的新資料夾</li>
<li>在這個資料夾裡生成一堆檔案和資料夾</li>
<li>設定 EJS 作為視圖引擎（就是用來產生 HTML 的工具）<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20240920/20159686PQhx5OM97y.png" alt="https://ithelp.ithome.com.tw/upload/images/20240920/20159686PQhx5OM97y.png"></li>
</ol>
</li>
<li><p>完成後，你會看到終端機顯示了一些指示。按照指示，我們需要：</p>
  <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 進入剛剛創建好的 test-app 資料夾 (也可以在 vscode 直接重新開啟建立好的test-app 資料夾)</span></span><br><span class="line">cd test-app</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 安裝所有需要的套件</span></span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>
<p>  <img src="https://ithelp.ithome.com.tw/upload/images/20240920/20159686LD2NYKIiMv.png" alt="https://ithelp.ithome.com.tw/upload/images/20240920/20159686LD2NYKIiMv.png"></p>
<p>  好啦，現在我們有了一個基本的 Express 應用結構！讓我們來看看這個神奇積木盒給我們準備了些什麼：</p>
<ul>
<li><code>app.js</code>: 這是我們應用的主文件，像是城堡的地基。</li>
<li><code>routes/</code>: 這個資料夾存放所有的路由文件，決定了不同的網址要做什麼事。</li>
<li><code>views/</code>: 這裡放的是 EJS 模板文件，負責產生 HTML。</li>
<li><code>public/</code>: 靜態文件（如圖片、CSS）都放在這裡。</li>
<li><code>bin/www</code>: 這是啟動我們應用的腳本。<br>  使用 express-generator 真的超省事的！它幫我們搞定了大部分的基礎設置，我們可以專注在開發真正重要的功能上。</li>
</ul>
</li>
<li><p>要運行這個應用也超簡單，只要在終端機輸入：</p>
  <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 執行</span></span><br><span class="line">npm start</span><br></pre></td></tr></table></figure>
<p>  <img src="https://ithelp.ithome.com.tw/upload/images/20240920/20159686WUodsDnamM.png" alt="https://ithelp.ithome.com.tw/upload/images/20240920/20159686WUodsDnamM.png"><br>  然後打開瀏覽器，輸入 <code>http://localhost:3000</code>，你就能看到你的新應用啦！<br>  是不是感覺像變魔術一樣？有了 express-generator，我們就能快速開始我們的 Express 之旅了！</p>
</li>
<li><p>試試修改 <code>routes/index.js</code> 文件，改變首頁顯示的內容，然後刷新頁面看看效果。<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20240920/20159686aJNizsLPZ5.png" alt="https://ithelp.ithome.com.tw/upload/images/20240920/20159686aJNizsLPZ5.png"><br>  <img src="https://ithelp.ithome.com.tw/upload/images/20240920/20159686AtShX1iuUn.png" alt="https://ithelp.ithome.com.tw/upload/images/20240920/20159686AtShX1iuUn.png"><br>  但通常前後端分離的專案並不會使用到 views，因為資料會傳遞給前端頁面去使用</p>
<blockquote>
<p>💡 補充知識：當你想要停止應用運行時，只需在終端機中按 <code>Ctrl + C</code>。這個快捷鍵就像是應用的緊急煞車，隨時可以讓它停下來。無論你在 Windows、Mac 還是 Linux 上，這個魔法按鍵都是通用的哦！</p>
</blockquote>
</li>
</ul>
<h3 id="一直手動刷新好麻煩-zzz-👉-不麻煩因為我們有-nodemon"><a href="#一直手動刷新好麻煩-zzz-👉-不麻煩因為我們有-nodemon" class="headerlink" title="一直手動刷新好麻煩 zzz 👉 不麻煩因為我們有 nodemon"></a>一直手動刷新好麻煩 zzz 👉 不麻煩因為我們有 nodemon</h3><p>使用 nodemon 可以讓你修改代碼後自動重啟服務器。</p>
<ol>
<li>在終端機輸入指令安裝nodemon  <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">npm install nodemon --save-dev</span><br></pre></td></tr></table></figure></li>
<li>修改 start 指令，用 <code>nodemon</code> 代替 <code>node</code> 來執行啟動應用。<br> <img src="https://ithelp.ithome.com.tw/upload/images/20240920/20159686IJi6SjlMDc.png" alt="https://ithelp.ithome.com.tw/upload/images/20240920/20159686IJi6SjlMDc.png"> </li>
<li>在終端機輸入指令 <code>npm start</code>  啟動應用，會發現變成使用我們修改的新指令了 <code>nodemon ./bin/www</code><br> <img src="https://ithelp.ithome.com.tw/upload/images/20240920/20159686wqKj2YOcyB.png" alt="https://ithelp.ithome.com.tw/upload/images/20240920/20159686wqKj2YOcyB.png"></li>
</ol>
<h3 id="揪兜嘛爹-為什麼專案會啟動在-http-localhost-3000-呢"><a href="#揪兜嘛爹-為什麼專案會啟動在-http-localhost-3000-呢" class="headerlink" title="揪兜嘛爹!  為什麼專案會啟動在 http://localhost:3000/ 呢"></a>揪兜嘛爹!  為什麼專案會啟動在 <a href="http://localhost:3000/">http://localhost:3000/</a> 呢</h3><p><img src="https://ithelp.ithome.com.tw/upload/images/20240920/20159686O8ElFGGBdk.png" alt="https://ithelp.ithome.com.tw/upload/images/20240920/20159686O8ElFGGBdk.png"><br>首先，當執行 <code>npm start</code> 時，實際上是在運行 <code>./bin/www</code> 文件。這個文件包含了一些關鍵的程式碼：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> port = <span class="title function_">normalizePort</span>(process.<span class="property">env</span>.<span class="property">PORT</span> || <span class="string">&#x27;3000&#x27;</span>); <span class="comment">// 如果把 3000 調整成 3666 那運行時就變成要打開 http://localhost:3666/ 做查看囉</span></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;port&#x27;</span>, port);</span><br></pre></td></tr></table></figure>
<p>這段程式碼設定了應用的端口。如果沒有指定環境變數 PORT，它就會使用 3000。這解釋了為什麼我們的應用預設在 3000 端口啟動。<br>接著，這兩行程式碼創建並啟動了 HTTP 伺服器：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> server = http.<span class="title function_">createServer</span>(app);</span><br><span class="line">server.<span class="title function_">listen</span>(port);</span><br></pre></td></tr></table></figure>
<p>其他還有一些錯誤處理的函數，比如 <code>onError</code>，用來處理啟動時可能遇到的問題。<code>onListening</code> 函數則在伺服器成功啟動時被調用。<br>總之，這個文件負責了伺服器的啟動過程。它設定端口，創建伺服器，然後開始監聽請求。<br>當運行 <code>npm start</code> 時，這個文件被執行，在 3000 端口（除非另有指定）啟動應用。這就是為什麼我們可以通過 <a href="http://localhost:3000/">http://localhost:3000/</a> 訪問應用。<br>理解這些背後的機制很有意思。雖然這些程式碼不是我寫的，但通過閱讀和理解它們，我對後端開發有了更深入的認識。<br>大家有沒有想要更詳細補充的部分呢？歡迎在下方留言分享喔！我們一起學習、一起成長。明天見啦，掰掰～</p>
<br />
<hr />
<br />

<blockquote>
<p>希望這篇文章有幫助到你，謝謝你的觀看，若有想看的系列也歡迎告訴我 😉</p>
</blockquote>
]]></content>
      <tags>
        <tag>2024IT鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>[ 2024 IT 鐵人賽 DAY13 ] GitHub 新手村：版本控制的第一步</title>
    <url>/2024/09/22/2024it/d13/</url>
    <content><![CDATA[<p>今天，我們要來聊聊一個超級重要但常被新手忽視的話題：版本控制。別擔心，它沒有聽起來那麼可怕，反而超級有趣！</p>
<span id="more"></span>

<div class="cus-intro-box">
    <h2>房東不給養鸚鵡 - 那就用 Nuxt + Express + MongoDB 30 天寫一個全端鸚鵡專案。</h2>
    <p>挑戰人生第一次鐵人賽，就來個佛心分享 side project，從專案發想、規劃、設計、資料庫、開發到部署，技術使用 Nuxt 3、Tailwind CSS、Pinia、Axios、Express、MongoDB，製作一個前後端分離的鸚鵡專案，功能主要介紹食物計算機和聯絡我們，希望可以讓更多人瞭解專案的完整流程 ✨</p>
    <a href="https://ithelp.ithome.com.tw/users/20159686/ironman/7564" target="_blank">IT 全文章連結</a>
</div>

<h2 id="為什麼我們需要版本控制？"><a href="#為什麼我們需要版本控制？" class="headerlink" title="為什麼我們需要版本控制？"></a>為什麼我們需要版本控制？</h2><p>想像一下，你正在寫一篇重要的論文。你修改了好幾次，每次都另存新檔：「論文_最終版.docx」、「論文_最終版_真的最終.docx」、「論文_這次真的是最終版了啦.docx」… 聽起來熟悉嗎？</p>
<p>版本控制就是為了解決這個問題而生的。在程式開發中，它就像是一個超強大的時光機，讓你可以：</p>
<ol>
<li>追蹤每一次的修改</li>
<li>輕鬆回到之前的版本</li>
<li>和其他人協作而不怕檔案搞混</li>
</ol>
<p>而 GitHub 就是目前最流行的版本控制平台之一。它不只是一個存放程式碼的地方，更是一個龐大的開發者社群。</p>
<p>今天，我們就來學習如何使用 GitHub 進行專案版本控制吧！</p>
<h3 id="1-註冊-GitHub-帳號"><a href="#1-註冊-GitHub-帳號" class="headerlink" title="1. 註冊 GitHub 帳號"></a>1. 註冊 GitHub 帳號</h3><p><a href="https://github.com/">github 官網</a></p>
<h3 id="2-在-Repositories-新增儲存庫"><a href="#2-在-Repositories-新增儲存庫" class="headerlink" title="2. 在 Repositories 新增儲存庫"></a>2. 在 Repositories 新增儲存庫</h3><p><img src="https://ithelp.ithome.com.tw/upload/images/20240922/20159686Q1Akv15O8t.png" alt="https://ithelp.ithome.com.tw/upload/images/20240922/20159686Q1Akv15O8t.png"><img src="https://ithelp.ithome.com.tw/upload/images/20240922/20159686YzW21h9Rbf.png" alt="https://ithelp.ithome.com.tw/upload/images/20240922/20159686YzW21h9Rbf.png"></p>
<h3 id="3-在-vscode-打開專案-test-app，確認昨天的-gitignore-檔是否有建立"><a href="#3-在-vscode-打開專案-test-app，確認昨天的-gitignore-檔是否有建立" class="headerlink" title="3. 在 vscode 打開專案 test-app，確認昨天的 .gitignore 檔是否有建立"></a>3. 在 vscode 打開專案 test-app，確認昨天的 .gitignore 檔是否有建立</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 不要上傳套件包</span></span><br><span class="line">node_modules/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不要上傳 config.env</span></span><br><span class="line">config.env</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不要上傳所有 .env</span></span><br><span class="line">*.<span class="built_in">env</span></span><br></pre></td></tr></table></figure>
<p><img src="https://ithelp.ithome.com.tw/upload/images/20240922/20159686r9XeEzbtp8.png" alt="https://ithelp.ithome.com.tw/upload/images/20240922/20159686r9XeEzbtp8.png"></p>
<h3 id="4-打開終端機輸入指令將，專案推送到-github-儲存庫"><a href="#4-打開終端機輸入指令將，專案推送到-github-儲存庫" class="headerlink" title="4. 打開終端機輸入指令將，專案推送到 github 儲存庫"></a>4. 打開終端機輸入指令將，專案推送到 github 儲存庫</h3><p>照順序輸入指令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化一個新的 Git 儲存庫。這將在當前目錄中建立一個 .git 資料夾，用於追蹤版本控制。</span></span><br><span class="line">git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 將當前目錄中的所有檔案和資料夾（包括變更、新增、刪除的檔案）添加到暫存區（staging area），準備進行提交。</span></span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看目前的儲存庫狀態。這會顯示哪些檔案已被修改、哪些已經暫存，以及還有哪些檔案未被追蹤。</span></span><br><span class="line">git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 將暫存區中的變更提交到本地儲存庫，並附上提交訊息 update。這次提交會將所有被暫存的檔案變更記錄到 Git 的歷史紀錄中。</span></span><br><span class="line">git commit -m <span class="string">&#x27;update&#x27;</span></span><br></pre></td></tr></table></figure>
<p>回到 github 剛剛建立的儲存庫查看連接指令 (如圖圈取處)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加一個遠端儲存庫，並將其命名為 origin。這個遠端儲存庫的 URL 是 git@github.com:sunny96087/2024it-test-app.git，通常是你在 GitHub 或其他 Git 託管平台上建立的儲存庫。</span></span><br><span class="line">git remote add origin git@github.com:sunny96087/2024it-test-app.git</span><br><span class="line"><span class="comment"># 將當前分支重命名為 master。-M 表示無論當前分支是什麼名稱，都會強制將它重命名為 master。</span></span><br><span class="line">git branch -M master</span><br><span class="line"><span class="comment"># 將本地的 master 分支推送到名為 origin 的遠端儲存庫，並設定 origin/master 為本地 master 分支的默認上游分支。-u 參數讓後續的 git push 或 git pull 命令在不指定遠端和分支名稱的情況下，也能知道要與哪個遠端分支同步。</span></span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>
<p><img src="https://ithelp.ithome.com.tw/upload/images/20240922/201596860W1qR0uNEc.png" alt="https://ithelp.ithome.com.tw/upload/images/20240922/201596860W1qR0uNEc.png"><img src="https://ithelp.ithome.com.tw/upload/images/20240922/20159686BIt0nd068v.png" alt="https://ithelp.ithome.com.tw/upload/images/20240922/20159686BIt0nd068v.png"></p>
<h3 id="回到-github-儲存庫頁面，重整後就會看到上傳成功的檔案囉"><a href="#回到-github-儲存庫頁面，重整後就會看到上傳成功的檔案囉" class="headerlink" title="回到 github 儲存庫頁面，重整後就會看到上傳成功的檔案囉"></a>回到 github 儲存庫頁面，重整後就會看到上傳成功的檔案囉</h3><p><a href="https://github.com/sunny96087/2024it-test-app">今日範例 github 連結</a><br><img src="https://ithelp.ithome.com.tw/upload/images/20240922/20159686z2lffGyrmt.png" alt="https://ithelp.ithome.com.tw/upload/images/20240922/20159686z2lffGyrmt.png"></p>
<blockquote>
<p>💡 補充說明：<br>    - <code>git init</code>：這就像是在你的專案裡埋下一顆神奇的種子，讓它開始被 Git 追蹤。<br>    - <code>git add .</code>：想像你正在打包行李，這個指令就是把所有東西都塞進行李箱。<br>    - <code>git commit -m &#39;Initial commit&#39;</code>：這就像是在你的行李箱上貼上一個標籤，寫著這些東西是什麼。<br>    - <code>git push</code>：終於要出發啦！這個指令就是把你的行李箱（程式碼）送到機場（GitHub）。</p>
</blockquote>
<h2 id="進階技巧：分支管理"><a href="#進階技巧：分支管理" class="headerlink" title="進階技巧：分支管理"></a>進階技巧：分支管理</h2><p>在 Git 中，分支就像是平行宇宙。你可以在不同的分支上同時進行不同的實驗，而不會影響到主要的程式碼。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 創建新分支</span></span><br><span class="line">git branch new-feature</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切換到新分支</span></span><br><span class="line">git checkout new-feature</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者，一步到位</span></span><br><span class="line">git checkout -b new-featur</span><br></pre></td></tr></table></figure>
<p>當你完成實驗，想要將變更合併回主分支時：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切換回主分支</span></span><br><span class="line">git checkout main</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合併變更</span></span><br><span class="line">git merge new-feature</span><br></pre></td></tr></table></figure>

<h3 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h3><p>恭喜你完成了版本控制的入門學習！今天我們學習了以下重要內容：</p>
<ol>
<li>在 GitHub 上創建儲存庫</li>
<li>使用 .gitignore 管理不需上傳的檔案</li>
<li>運用基本的 Git 指令上傳專案</li>
<li>簡單介紹了分支管理的概念<br>版本控制不僅僅是一個工具，它更是一種開發思維。它讓我們能夠安心地嘗試新想法，因為我們可以隨時回到之前的版本。同時，它也大大提升了團隊協作的效率，讓每個成員都能清楚看到專案的發展歷程。<br>當你在深夜 coding 時靈光乍現，想要對專案做大幅度修改，有了 Git 和 GitHub，你就可以放心大膽地實驗。即使遇到問題，也可以輕鬆回溯到先前的穩定版本。<br>養成定期 commit 變更的好習慣，為你的程式碼發展過程做好紀錄。隨著時間推移，你會發現 GitHub 上的 contribution graph 逐漸豐富，這不僅是一種成就感的展現，更是你技術成長的見證。<br>今天的 Git 學習就到這裡。可以找朋友一起多練習，熟能生巧。<br>大家有沒有想要更詳細補充的部分呢？歡迎在下方留言分享喔！我們一起學習、一起成長。明天見啦，掰掰～</li>
</ol>
<br />
<hr />
<br />

<blockquote>
<p>希望這篇文章有幫助到你，謝謝你的觀看，若有想看的系列也歡迎告訴我 😉</p>
</blockquote>
]]></content>
      <tags>
        <tag>2024IT鐵人賽</tag>
        <tag>GitHub</tag>
        <tag>版本控管</tag>
      </tags>
  </entry>
  <entry>
    <title>[ 2024 IT 鐵人賽 DAY14 ] 串接專案與雲端資料庫：MongoDB Atlas 連接與 Git 複習</title>
    <url>/2024/09/23/2024it/d14/</url>
    <content><![CDATA[<p>嗨大家好！我是2魚。今天我們要進行一個重要的任務：將前幾天建立的雲端資料庫 MongoDB Atlas 與我們的專案連接起來。這個步驟在實際開發中非常常見，讓我們一起來學習吧！</p>
<span id="more"></span>

<div class="cus-intro-box">
    <h2>房東不給養鸚鵡 - 那就用 Nuxt + Express + MongoDB 30 天寫一個全端鸚鵡專案。</h2>
    <p>挑戰人生第一次鐵人賽，就來個佛心分享 side project，從專案發想、規劃、設計、資料庫、開發到部署，技術使用 Nuxt 3、Tailwind CSS、Pinia、Axios、Express、MongoDB，製作一個前後端分離的鸚鵡專案，功能主要介紹食物計算機和聯絡我們，希望可以讓更多人瞭解專案的完整流程 ✨</p>
    <a href="https://ithelp.ithome.com.tw/users/20159686/ironman/7564" target="_blank">IT 全文章連結</a>
</div>

<blockquote>
<p>知識點：MongoDB Atlas 是一個雲端託管的 MongoDB 服務。它提供了高可用性、自動備份等功能，讓我們不用煩惱伺服器維護的問題。</p>
</blockquote>
<h2 id="首先，讓我們打開-MongoDB-Atlas-的網頁儀表板："><a href="#首先，讓我們打開-MongoDB-Atlas-的網頁儀表板：" class="headerlink" title="首先，讓我們打開 MongoDB Atlas 的網頁儀表板："></a>首先，讓我們打開 <a href="https://www.mongodb.com/zh-cn/lp/cloud/atlas/try4?utm_source=bing&utm_campaign=search_bs_pl_evergreen_atlas_core_prosp-brand_gic-null_apac-tw_ps-all_desktop_eng_lead&utm_term=mongodb%20atlas&utm_medium=cpc_paid_search&utm_ad=e&utm_ad_campaign_id=415204532&adgroup=1223756911396751&msclkid=794cc8d6b4cb1f79d943ae172f01fce1?utm_source=bing&utm_campaign=search_bs_pl_evergreen_atlas_core_prosp-brand_gic-null_apac-tw_ps-all_desktop_eng_lead&utm_term=mongodb%20atlas&utm_medium=cpc_paid_search&utm_ad=e&utm_ad_campaign_id=415204532&adgroup=1223756911396751&msclkid=794cc8d6b4cb1f79d943ae172f01fce1">MongoDB Atlas</a> 的網頁儀表板：</h2><ul>
<li><p>點擊 “Connect” 連接按鈕<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20240923/20159686zYJQ84e5fa.png" alt="https://ithelp.ithome.com.tw/upload/images/20240923/20159686zYJQ84e5fa.png"></p>
</li>
<li><p>選擇 “Drivers” 連接方式<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20240923/20159686CbQEiw0iPm.png" alt="https://ithelp.ithome.com.tw/upload/images/20240923/20159686CbQEiw0iPm.png"></p>
</li>
<li><p>會開啟一個彈窗，先不要關閉，等等會用到<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20240923/20159686LOQYyar9zv.png" alt="https://ithelp.ithome.com.tw/upload/images/20240923/20159686LOQYyar9zv.png"></p>
</li>
</ul>
<h2 id="接下來，我們要在專案中設置環境變數："><a href="#接下來，我們要在專案中設置環境變數：" class="headerlink" title="接下來，我們要在專案中設置環境變數："></a>接下來，我們要在專案中設置環境變數：</h2><ul>
<li><p>打開 VS Code，找到 <code>config.env</code> 文件</p>
</li>
<li><p>輸入以下兩個環境變數（之前示範的可以刪除）：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">DATABASE=mongodb+srv://test123456:&lt;password&gt;@cluster0.5dkg9.mongodb.net/?retryWrites=<span class="literal">true</span>&amp;w=majority&amp;appName=Cluster0</span><br><span class="line">DATABASE_PASSWORD=test123456</span><br></pre></td></tr></table></figure>
<p>  <code>DATABASE</code> 貼上複製的代碼，<br>  <code>DATABASE_PASSWORD</code> 則是輸入之前建立資料庫時，創建用戶的密碼<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20240923/20159686h8XTeyfjs9.png" alt="https://ithelp.ithome.com.tw/upload/images/20240923/20159686h8XTeyfjs9.png"></p>
<blockquote>
<p>知識點：環境變數是一種在應用程式外部設置配置的方法。這樣做可以提高安全性（不直接在代碼中暴露敏感信息）和靈活性（可以根據不同環境更改配置）。</p>
</blockquote>
</li>
<li><p>關閉頁面彈窗，到集合頁面查看上次建立的 <code>Database</code> 名稱（我的範例是 <code>test</code>）<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20240923/20159686V4g6NccabE.png" alt="https://ithelp.ithome.com.tw/upload/images/20240923/20159686V4g6NccabE.png"></p>
</li>
<li><p>回到 vscode <code>config.env</code> 填入剛剛確認好的資料庫名稱，我這邊填入 <code>test</code><br>  <img src="https://ithelp.ithome.com.tw/upload/images/20240923/20159686rEUHoO7JDc.png" alt="https://ithelp.ithome.com.tw/upload/images/20240923/20159686rEUHoO7JDc.png"></p>
</li>
</ul>
<h2 id="現在，讓我們使用-Mongoose-來建立連接"><a href="#現在，讓我們使用-Mongoose-來建立連接" class="headerlink" title="現在，讓我們使用 Mongoose 來建立連接"></a>現在，讓我們使用 Mongoose 來建立連接</h2><ul>
<li>開啟 app.js 檔案，添加範例程式碼，進行資料庫連接  <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 導入 mongoose 套件使用</span></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&quot;mongoose&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 將 .env 檔案中的變數載入到 process.env 中</span></span><br><span class="line"><span class="keyword">const</span> dotenv = <span class="built_in">require</span>(<span class="string">&quot;dotenv&quot;</span>);</span><br><span class="line">dotenv.<span class="title function_">config</span>(&#123; <span class="attr">path</span>: <span class="string">&quot;./config.env&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 宣告 DB 常數，將 &lt;password&gt; 字串替換為 .env 檔案內的 DATABASE_PASSWORD (就是我們的資料庫用戶密碼)</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">DB</span> = process.<span class="property">env</span>.<span class="property">DATABASE</span>.<span class="title function_">replace</span>(</span><br><span class="line">  <span class="string">&quot;&lt;password&gt;&quot;</span>,</span><br><span class="line">  process.<span class="property">env</span>.<span class="property">DATABASE_PASSWORD</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 連接資料庫</span></span><br><span class="line">mongoose</span><br><span class="line">  .<span class="title function_">connect</span>(<span class="variable constant_">DB</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;資料庫連接成功&quot;</span>)) <span class="comment">// 連接成功會看到 log(&quot;資料庫連接成功&quot;)</span></span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;MongoDB 連接失敗:&quot;</span>, err); <span class="comment">// 反之，捕捉錯誤並 log 顯示錯誤原因</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
  <img src="https://ithelp.ithome.com.tw/upload/images/20240923/20159686DltMH5Qmfk.png" alt="https://ithelp.ithome.com.tw/upload/images/20240923/20159686DltMH5Qmfk.png"></li>
</ul>
<h2 id="補充：將-Mongo-改成任何人都可以連接-沒有改的話之後可能會連不上資料庫"><a href="#補充：將-Mongo-改成任何人都可以連接-沒有改的話之後可能會連不上資料庫" class="headerlink" title="補充：將 Mongo 改成任何人都可以連接 (沒有改的話之後可能會連不上資料庫)"></a>補充：將 Mongo 改成任何人都可以連接 (沒有改的話之後可能會連不上資料庫)</h2><ul>
<li>打開 Mongo 網頁，進到 <code>Network Access</code><br>  <img src="https://ithelp.ithome.com.tw/upload/images/20240923/20159686f0WXgzZGZL.png" alt="https://ithelp.ithome.com.tw/upload/images/20240923/20159686f0WXgzZGZL.png"></li>
<li>點擊 <code>Edit</code>，點擊 <code>Allow Access From Anywhere</code>，看到 <code>Access List Entry</code> 變成 <code>0.0.0.0/0</code> 後就可以點擊 <code>Confirm</code> 儲存了<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20240923/20159686bPEm4a0psK.png" alt="https://ithelp.ithome.com.tw/upload/images/20240923/20159686bPEm4a0psK.png"></li>
</ul>
<h2 id="最後，讓我們複習一下-Git-的使用，將今天的變更推送到儲存庫："><a href="#最後，讓我們複習一下-Git-的使用，將今天的變更推送到儲存庫：" class="headerlink" title="最後，讓我們複習一下 Git 的使用，將今天的變更推送到儲存庫："></a>最後，讓我們複習一下 Git 的使用，將今天的變更推送到儲存庫：</h2><ol>
<li><p>關閉正在運行的服務（在終端機中按 Ctrl + C）<br> <img src="https://ithelp.ithome.com.tw/upload/images/20240923/20159686tqcRpXvUKq.png" alt="https://ithelp.ithome.com.tw/upload/images/20240923/20159686tqcRpXvUKq.png"></p>
</li>
<li><p>輸入以下 Git 指令：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 將當前目錄中的所有檔案和資料夾（包括變更、新增、刪除的檔案）添加到暫存區（staging area），準備進行提交。</span></span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># (非必要) 用來查看目前的儲存庫狀態。這會顯示哪些檔案已被修改、哪些已經暫存，以及還有哪些檔案未被追蹤。</span></span><br><span class="line">git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 將暫存區中的變更提交到本地儲存庫，並附上提交訊息 Connect mongoDB。這次提交會將所有被暫存的檔案變更記錄到 Git 的歷史紀錄中。</span></span><br><span class="line">git commit -m <span class="string">&#x27;Connect mongoDB&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 將本地變更推送到遠程儲存庫。</span></span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure>
<p><img src="https://ithelp.ithome.com.tw/upload/images/20240923/20159686iWZJIhHU4X.png" alt="https://ithelp.ithome.com.tw/upload/images/20240923/20159686iWZJIhHU4X.png"></p>
</li>
</ol>
<p>還沒完呢！讓我們再介紹一個超實用的小工具，它能讓我們更直觀地理解 Git 的運作。</p>
<h2 id="Git-Graph：Git-的視覺化助手"><a href="#Git-Graph：Git-的視覺化助手" class="headerlink" title="Git Graph：Git 的視覺化助手"></a>Git Graph：Git 的視覺化助手</h2><p>在開發過程中，有時候我們可能會搞不清楚 Git 分支的狀態。這時候，Git Graph 這個 VS Code 擴充套件就派上用場了。它能幫我們將 Git 的歷史記錄轉換成易懂的圖形界面。<br>使用步驟：</p>
<ol>
<li>在 VS Code 左側選單中點擊擴充套件圖標。</li>
<li>在搜尋欄輸入 “Git Graph”。</li>
<li>找到 Git Graph 套件並點擊。</li>
<li>點擊 “安裝” 按鈕。<br> <img src="https://ithelp.ithome.com.tw/upload/images/20240923/2015968616WAMOqX8N.png" alt="https://ithelp.ithome.com.tw/upload/images/20240923/2015968616WAMOqX8N.png"></li>
<li>安裝完成後，你會在 VS Code 左下角看到 Git Graph 的圖標。點擊它就可以查看視覺化的 Git 歷史記錄了。<br> <img src="https://ithelp.ithome.com.tw/upload/images/20240923/2015968666kXevDrb7.png" alt="https://ithelp.ithome.com.tw/upload/images/20240923/2015968666kXevDrb7.png"><br>有了 Git Graph，你就能輕鬆掌握專案的版本歷史，分支的創建和合併一目了然。這對於理解複雜的開發流程特別有幫助。</li>
</ol>
<h3 id="今日範例程式碼-app-js"><a href="#今日範例程式碼-app-js" class="headerlink" title="今日範例程式碼 app.js"></a>今日範例程式碼 <code>app.js</code></h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> createError = <span class="built_in">require</span>(<span class="string">&quot;http-errors&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> cookieParser = <span class="built_in">require</span>(<span class="string">&quot;cookie-parser&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> logger = <span class="built_in">require</span>(<span class="string">&quot;morgan&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cors = <span class="built_in">require</span>(<span class="string">&quot;cors&quot;</span>); <span class="comment">// 引入允許跨網域套件 cors</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(process.env.DB_HOST); // 從 process.env 中讀取並打印 DB_HOST 變數的值 // 這邊會得到 localhost</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">v4</span>: uuidv4 &#125; = <span class="built_in">require</span>(<span class="string">&quot;uuid&quot;</span>);</span><br><span class="line"><span class="comment">// console.log(uuidv4()); // 輸出類似：&#x27;1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> indexRouter = <span class="built_in">require</span>(<span class="string">&quot;./routes/index&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> usersRouter = <span class="built_in">require</span>(<span class="string">&quot;./routes/users&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&quot;mongoose&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 將 .env 檔案中的變數載入到 process.env 中</span></span><br><span class="line"><span class="keyword">const</span> dotenv = <span class="built_in">require</span>(<span class="string">&quot;dotenv&quot;</span>);</span><br><span class="line">dotenv.<span class="title function_">config</span>(&#123; <span class="attr">path</span>: <span class="string">&quot;./config.env&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// ? 連接資料庫</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">DB</span> = process.<span class="property">env</span>.<span class="property">DATABASE</span>.<span class="title function_">replace</span>(</span><br><span class="line">  <span class="string">&quot;&lt;password&gt;&quot;</span>,</span><br><span class="line">  process.<span class="property">env</span>.<span class="property">DATABASE_PASSWORD</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">mongoose</span><br><span class="line">  .<span class="title function_">connect</span>(<span class="variable constant_">DB</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;資料庫連接成功&quot;</span>))</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;MongoDB 連接失敗:&quot;</span>, err);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cors</span>()); <span class="comment">// 全部放行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// view engine setup</span></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&quot;views&quot;</span>, path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;views&quot;</span>));</span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&quot;view engine&quot;</span>, <span class="string">&quot;ejs&quot;</span>);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">logger</span>(<span class="string">&quot;dev&quot;</span>));</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>());</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cookieParser</span>());</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;public&quot;</span>)));</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&quot;/&quot;</span>, indexRouter);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&quot;/users&quot;</span>, usersRouter);</span><br><span class="line"></span><br><span class="line"><span class="comment">// catch 404 and forward to error handler</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="title function_">next</span>(<span class="title function_">createError</span>(<span class="number">404</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// error handler</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">err, req, res, next</span>) &#123;</span><br><span class="line">  <span class="comment">// set locals, only providing error in development</span></span><br><span class="line">  res.<span class="property">locals</span>.<span class="property">message</span> = err.<span class="property">message</span>;</span><br><span class="line">  res.<span class="property">locals</span>.<span class="property">error</span> = req.<span class="property">app</span>.<span class="title function_">get</span>(<span class="string">&quot;env&quot;</span>) === <span class="string">&quot;development&quot;</span> ? err : &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// render the error page</span></span><br><span class="line">  res.<span class="title function_">status</span>(err.<span class="property">status</span> || <span class="number">500</span>);</span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = app;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>config.env 不提供，請使用自己的資料庫 😂</p>
</blockquote>
<h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>今天我們完成了幾項重要的任務：</p>
<ol>
<li>將我們的專案與 MongoDB Atlas 雲端資料庫連接。</li>
<li>學習了如何使用環境變數來保護敏感資訊。</li>
<li>使用 Mongoose 建立了資料庫連接。</li>
<li>複習了 Git 的基本操作，將變更推送到 GitHub。</li>
<li>認識了 Git Graph 這個強大的視覺化工具。<br>這些步驟雖然看起來不少，但每一步都是開發流程中不可或缺的一環。通過今天的學習，我們為接下來的開發工作打下了堅實的基礎。<br>明天我們會更進一步，探索 Mongoose 模型的定義，學習如何撰寫 API 來與資料庫互動，還會使用 Postman 進行測試。這些都是實際開發中經常用到的技能，相信大家會覺得很有趣！<br>希望今天的內容對大家有幫助。記住，學習編程就像爬樓梯，一步一個腳印，慢慢來但別停下腳步。<br>大家有沒有想要更詳細補充的部分呢？歡迎在下方留言分享喔！我們一起學習、一起成長。明天見啦，掰掰～</li>
</ol>
<br />
<hr />
<br />

<blockquote>
<p>希望這篇文章有幫助到你，謝謝你的觀看，若有想看的系列也歡迎告訴我 😉</p>
</blockquote>
]]></content>
      <tags>
        <tag>2024IT鐵人賽</tag>
        <tag>GitHub</tag>
        <tag>版本控管</tag>
        <tag>MongoDB</tag>
        <tag>Mongoose</tag>
        <tag>雲端資料庫</tag>
      </tags>
  </entry>
  <entry>
    <title>[ 2024 IT 鐵人賽 DAY15 ] 打造自己的 API：CRUD 基本功</title>
    <url>/2024/09/24/2024it/d15/</url>
    <content><![CDATA[<p>大家好！我是2魚，今天我們要深入探討後端開發中兩個核心概念：API（應用程式介面）和CRUD（創建、讀取、更新、刪除）操作。這兩個概念是構建現代Web應用的基石。我們將從MongoDB資料庫設置開始，逐步實現一個完整的API，涵蓋所有CRUD操作。無論你是後端新手還是想複習基礎的開發者，這篇文章都會給你實用的洞見和hands-on經驗。讓我們開始這段精彩的後端之旅吧！</p>
<span id="more"></span>

<div class="cus-intro-box">
    <h2>房東不給養鸚鵡 - 那就用 Nuxt + Express + MongoDB 30 天寫一個全端鸚鵡專案。</h2>
    <p>挑戰人生第一次鐵人賽，就來個佛心分享 side project，從專案發想、規劃、設計、資料庫、開發到部署，技術使用 Nuxt 3、Tailwind CSS、Pinia、Axios、Express、MongoDB，製作一個前後端分離的鸚鵡專案，功能主要介紹食物計算機和聯絡我們，希望可以讓更多人瞭解專案的完整流程 ✨</p>
    <a href="https://ithelp.ithome.com.tw/users/20159686/ironman/7564" target="_blank">IT 全文章連結</a>
</div>

<h2 id="1-MongoDB-Atlas-環境準備"><a href="#1-MongoDB-Atlas-環境準備" class="headerlink" title="1. MongoDB Atlas 環境準備"></a>1. MongoDB Atlas 環境準備</h2><p>首先，我們需要確保MongoDB Atlas中的測試環境是乾淨的。這個步驟很重要，因為它可以幫助我們避免舊數據干擾新的開發過程。</p>
<ol>
<li><p>登入MongoDB Compass</p>
</li>
<li><p>找到你的test資料庫<br> <img src="https://ithelp.ithome.com.tw/upload/images/20240924/20159686Ef1NSznZiX.png" alt="https://ithelp.ithome.com.tw/upload/images/20240924/20159686Ef1NSznZiX.png"></p>
</li>
<li><p>刪除所有現有的集合<br> <img src="https://ithelp.ithome.com.tw/upload/images/20240924/20159686nstyYoDZ87.png" alt="https://ithelp.ithome.com.tw/upload/images/20240924/20159686nstyYoDZ87.png"><br>這樣做可以讓我們從一個乾淨的狀態開始開發，避免之前的測試數據影響我們的新功能開發。</p>
</li>
</ol>
<h2 id="2-定義Mongoose模型"><a href="#2-定義Mongoose模型" class="headerlink" title="2. 定義Mongoose模型"></a>2. 定義Mongoose模型</h2><h3 id="1-打開-VsCode，在專案根目錄下創建models資料夾"><a href="#1-打開-VsCode，在專案根目錄下創建models資料夾" class="headerlink" title="1. 打開 VsCode，在專案根目錄下創建models資料夾"></a>1. 打開 VsCode，在專案根目錄下創建<code>models</code>資料夾</h3><p><img src="https://ithelp.ithome.com.tw/upload/images/20240924/20159686LIjyxmdmfD.png" alt="https://ithelp.ithome.com.tw/upload/images/20240924/20159686LIjyxmdmfD.png"></p>
<h3 id="2-參考我們在第七天規劃的資料表-Excel"><a href="#2-參考我們在第七天規劃的資料表-Excel" class="headerlink" title="2. 參考我們在第七天規劃的資料表 Excel"></a>2. 參考我們在第七天規劃的資料表 Excel</h3><p><img src="https://ithelp.ithome.com.tw/upload/images/20240924/201596864i1252skD9.png" alt="https://ithelp.ithome.com.tw/upload/images/20240924/201596864i1252skD9.png"></p>
<table>
<thead>
<tr>
<th>KEY</th>
<th>英文欄位名稱</th>
<th>中文欄位名稱</th>
<th>型態</th>
<th>必填</th>
<th>預設值</th>
<th>備註</th>
</tr>
</thead>
<tbody><tr>
<td>PK</td>
<td>_id</td>
<td>ID</td>
<td>ObjectID</td>
<td>v</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>contactPerson</td>
<td>名稱</td>
<td>String</td>
<td>v</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>phone</td>
<td>電話</td>
<td>String</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>email</td>
<td>信箱</td>
<td>String</td>
<td>v</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>content</td>
<td>內容</td>
<td>String</td>
<td>v</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>source</td>
<td>從哪裡得知本網站</td>
<td>Number</td>
<td></td>
<td></td>
<td>1:網路搜尋 2:親友推薦 3:社群媒體 4:其他</td>
</tr>
<tr>
<td></td>
<td>createTime</td>
<td>創建時間</td>
<td>Date</td>
<td></td>
<td>now</td>
<td></td>
</tr>
</tbody></table>
<h3 id="3-在-models-資料夾內新增feedback-js文件"><a href="#3-在-models-資料夾內新增feedback-js文件" class="headerlink" title="3. 在 models 資料夾內新增feedback.js文件"></a>3. 在 models 資料夾內新增<code>feedback.js</code>文件</h3><p><img src="https://ithelp.ithome.com.tw/upload/images/20240924/201596861WiijIyO7A.png" alt="https://ithelp.ithome.com.tw/upload/images/20240924/201596861WiijIyO7A.png"></p>
<ol>
<li><strong>引入 Mongoose 套件</strong> <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&quot;mongoose&quot;</span>);</span><br></pre></td></tr></table></figure>
 這行程式碼的作用是引入 <code>mongoose</code> 這個工具，它能幫助我們與 MongoDB 資料庫進行溝通，並且管理資料。</li>
<li><strong>定義聯絡我們模型</strong> <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> feedbackSchema = <span class="keyword">new</span> mongoose.<span class="title class_">Schema</span>(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 名稱</span></span><br><span class="line">    <span class="attr">contactPerson</span>: &#123; <span class="attr">type</span>: <span class="title class_">String</span>, <span class="attr">required</span>: [<span class="literal">true</span>, <span class="string">&quot;姓名未填寫&quot;</span>] &#125;,</span><br><span class="line">    <span class="comment">// 電話</span></span><br><span class="line">    <span class="attr">phone</span>: &#123; <span class="attr">type</span>: <span class="title class_">String</span> &#125;,</span><br><span class="line">    <span class="comment">// 信箱</span></span><br><span class="line">    <span class="attr">email</span>: &#123; <span class="attr">type</span>: <span class="title class_">String</span>, <span class="attr">required</span>: [<span class="literal">true</span>, <span class="string">&quot;信箱未填寫&quot;</span>] &#125;,</span><br><span class="line">    <span class="comment">// 內容</span></span><br><span class="line">    <span class="attr">feedback</span>: &#123; <span class="attr">type</span>: <span class="title class_">String</span>, <span class="attr">required</span>: [<span class="literal">true</span>, <span class="string">&quot;內容未填寫&quot;</span>] &#125;,</span><br><span class="line">    <span class="comment">// 從哪裡得知此網站</span></span><br><span class="line">    <span class="attr">source</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">      <span class="attr">enum</span>: [<span class="string">&quot;網路搜尋&quot;</span>, <span class="string">&quot;社群媒體&quot;</span>, <span class="string">&quot;親友介紹&quot;</span>, <span class="string">&quot;其他&quot;</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">versionKey</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">timestamps</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
 這段程式碼的目的是創建一個「模型」，用來描述我們想在資料庫裡儲存的「聯絡我們」資料的結構，簡而言之，就是這些資料的「樣板」。<blockquote>
<p>每個欄位的說明：<br>     - **<code>contactPerson</code> (名稱)**：用於儲存用戶的名字。<code>type: String</code> 表示它是文字格式，而且必須填寫（<code>required: true</code>），如果沒填寫就會顯示「姓名未填寫」的錯誤訊息。<br>     - **<code>phone</code> (電話)**：用於儲存用戶的電話號碼。它是文字格式，但這個欄位可以不填（沒有 <code>required</code>）。<br>     - **<code>email</code> (信箱)**：用於儲存用戶的電子郵件地址。它也是文字格式，而且必須填寫，否則會顯示「信箱未填寫」的錯誤訊息。<br>     - **<code>feedback</code> (內容)**：用於儲存用戶給你的反饋內容。這也是必填項，沒填寫的話會顯示「內容未填寫」。<br>     - **<code>source</code> (從哪裡得知此網站)**：用於記錄用戶是從哪裡知道你這個網站的。它只能是幾個選項之一（例如「網路搜尋」、「社群媒體」等）。</p>
</blockquote>
<blockquote>
<p>其他設定：<br>     - **<code>versionKey: false</code>**：這個設定讓 Mongoose 不會自動生成一個叫 <code>__v</code> 的版本號欄位。<br>     - **<code>timestamps: true</code>**：這個設定會自動幫你添加兩個欄位，分別記錄資料創建和最後更新的時間。</p>
</blockquote>
</li>
<li><strong>創建並導出模型</strong> <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Feedback</span> = mongoose.<span class="title function_">model</span>(<span class="string">&quot;Feedback&quot;</span>, feedbackSchema);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">Feedback</span>;</span><br></pre></td></tr></table></figure>
 最後，我們使用 <code>mongoose.model</code> 創建了一個名為 <code>Feedback</code> 的模型，這個模型就像是我們剛剛定義的資料「樣板」的具體實現。<br> 接著，我們用 <code>module.exports</code> 將這個模型導出，這樣在其他地方的程式碼中也可以使用它。</li>
</ol>
<h3 id="4-掛載到-app-js-進行測試"><a href="#4-掛載到-app-js-進行測試" class="headerlink" title="4. 掛載到 app.js 進行測試"></a>4. 掛載到 <code>app.js</code> 進行測試</h3><ul>
<li>打開 <code>app.js</code> 添加以下程式碼：  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">const Feedback = require(<span class="string">&quot;./models/feedback&quot;</span>);</span><br></pre></td></tr></table></figure></li>
<li>開啟終端機，輸入 <code>npm start</code> 執行專案</li>
<li>回到 compass 可以看到 test 資料庫多出一個新的 feedbacks 集合<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20240924/201596866yv8AeBEgs.png" alt="https://ithelp.ithome.com.tw/upload/images/20240924/201596866yv8AeBEgs.png"></li>
</ul>
<blockquote>
<p>💡 <strong>補充說明：為什麼新增的是 <code>feedbacks</code> 而不是 <code>feedback</code></strong></p>
</blockquote>
<p>當你使用 Mongoose 創建模型時，Mongoose 會自動將模型名稱轉換為複數形式，用來命名 MongoDB 中的集合。這是 Mongoose 的預設行為。</p>
<h4 id="在上面的範例："><a href="#在上面的範例：" class="headerlink" title="在上面的範例："></a>在上面的範例：</h4><ul>
<li>我們定義了一個模型叫 <code>Feedback</code>。</li>
<li>Mongoose 會把 <code>Feedback</code> 變成 <code>feedbacks</code>，然後在資料庫裡建立這個集合。</li>
<li>所以，當我們把資料存進去時，它會自動進入 <code>feedbacks</code> 這個集合，而不是 <code>feedback</code>。<br>這樣的設計是因為資料庫通常會存放多筆資料，所以用複數形式來命名會更符合實際情況。</li>
</ul>
<h4 id="如果你不想要複數形式："><a href="#如果你不想要複數形式：" class="headerlink" title="如果你不想要複數形式："></a>如果你不想要複數形式：</h4><p>如果你希望集合名稱保持單數，你可以在創建模型時指定具體的集合名稱：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 這是上面範例寫法，建立出來的集合會是 feedbacks</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Feedback</span> = mongoose.<span class="title function_">model</span>(<span class="string">&quot;Feedback&quot;</span>, feedbackSchema); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 自訂集合名稱，撰寫在 () 第三個變數，建立出來會是 feedback</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Feedback</span> = mongoose.<span class="title function_">model</span>(<span class="string">&quot;Feedback&quot;</span>, feedbackSchema, <span class="string">&quot;feedback&quot;</span>); </span><br></pre></td></tr></table></figure>

<p>這樣資料就會存到名為 <code>feedback</code> 的集合裡，而不是 <code>feedbacks</code>。<br>這種自動複數化的行為是 Mongoose 幫你做的，但你也可以輕鬆地控制它。</p>
<hr>
<h2 id="開發第一個-API：Feedback-CRUD-操作"><a href="#開發第一個-API：Feedback-CRUD-操作" class="headerlink" title="開發第一個 API：Feedback CRUD 操作"></a>開發第一個 API：Feedback CRUD 操作</h2><p>接下來，我們將在 Express 專案中實現 CRUD（創建、讀取、更新、刪除）操作。<br>我們會以上面定義的 Feedback 模型為例，直接在 routes 中實現這些功能。</p>
<h3 id="Step1-再次檢視我們的-Feedback-模型："><a href="#Step1-再次檢視我們的-Feedback-模型：" class="headerlink" title="Step1. 再次檢視我們的 Feedback 模型："></a>Step1. 再次檢視我們的 Feedback 模型：</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&quot;mongoose&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> feedbackSchema = <span class="keyword">new</span> mongoose.<span class="title class_">Schema</span>(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">contactPerson</span>: &#123; <span class="attr">type</span>: <span class="title class_">String</span>, <span class="attr">required</span>: [<span class="literal">true</span>, <span class="string">&quot;姓名未填寫&quot;</span>] &#125;,</span><br><span class="line">    <span class="attr">phone</span>: &#123; <span class="attr">type</span>: <span class="title class_">String</span> &#125;,</span><br><span class="line">    <span class="attr">email</span>: &#123; <span class="attr">type</span>: <span class="title class_">String</span>, <span class="attr">required</span>: [<span class="literal">true</span>, <span class="string">&quot;信箱未填寫&quot;</span>] &#125;,</span><br><span class="line">    <span class="attr">feedback</span>: &#123; <span class="attr">type</span>: <span class="title class_">String</span>, <span class="attr">required</span>: [<span class="literal">true</span>, <span class="string">&quot;內容未填寫&quot;</span>] &#125;,</span><br><span class="line">    <span class="attr">source</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">      <span class="attr">enum</span>: [<span class="string">&quot;網路搜尋&quot;</span>, <span class="string">&quot;社群媒體&quot;</span>, <span class="string">&quot;親友介紹&quot;</span>, <span class="string">&quot;其他&quot;</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">versionKey</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">timestamps</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Feedback</span> = mongoose.<span class="title function_">model</span>(<span class="string">&quot;Feedback&quot;</span>, feedbackSchema);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">Feedback</span>;</span><br></pre></td></tr></table></figure>

<h3 id="Step-2-在-routes-資料夾中創建-feedback-js-檔案，並實現-CRUD-操作："><a href="#Step-2-在-routes-資料夾中創建-feedback-js-檔案，並實現-CRUD-操作：" class="headerlink" title="Step 2. 在 routes 資料夾中創建 feedback.js 檔案，並實現 CRUD 操作："></a>Step 2. 在 <code>routes</code> 資料夾中創建 <code>feedback.js</code> 檔案，並實現 CRUD 操作：</h3><p>首先，我們需要設置基本的路由結構：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Feedback</span> = <span class="built_in">require</span>(<span class="string">&quot;../models/feedback&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 這裡我們將添加我們的 CRUD 操作</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure>
<p>現在，讓我們逐一實現 CRUD 操作：</p>
<ol>
<li><p>新增 feedback</p>
 <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 新增 feedback</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&quot;/&quot;</span>, <span class="title function_">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 從請求的 body 中提取出用戶提交的資料（姓名、電話、信箱、反饋內容）</span></span><br><span class="line">    <span class="keyword">const</span> &#123; contactPerson, phone, email, feedback &#125; = req.<span class="property">body</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 驗證必填欄位，檢查是否提供了姓名、信箱和反饋內容</span></span><br><span class="line">    <span class="keyword">if</span> (!contactPerson || !email || !feedback) &#123;</span><br><span class="line">      <span class="comment">// 如果缺少必填欄位，回應 400 錯誤狀態和錯誤信息</span></span><br><span class="line">      <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">        <span class="attr">status</span>: <span class="string">&quot;fail&quot;</span>,</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&quot;姓名、信箱、內容為必填欄位&quot;</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果必填欄位都有，使用 Feedback 模型創建一條新的反饋記錄</span></span><br><span class="line">    <span class="keyword">const</span> newFeedback = <span class="keyword">await</span> <span class="title class_">Feedback</span>.<span class="title function_">create</span>(&#123;</span><br><span class="line">      <span class="attr">contactPerson</span>: contactPerson,  <span class="comment">// 設置聯絡人姓名</span></span><br><span class="line">      <span class="attr">phone</span>: phone,  <span class="comment">// 設置聯絡人電話（可選）</span></span><br><span class="line">      <span class="attr">email</span>: email,  <span class="comment">// 設置聯絡人信箱</span></span><br><span class="line">      <span class="attr">feedback</span>: feedback,  <span class="comment">// 設置反饋內容</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 成功創建後，回應 201 狀態（已創建）和成功信息，包含新創建的反饋數據</span></span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">201</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">      <span class="attr">status</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line">      <span class="attr">data</span>: newFeedback,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="comment">// 如果在創建過程中發生錯誤，回應 400 錯誤狀態和錯誤信息</span></span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">      <span class="attr">status</span>: <span class="string">&quot;fail&quot;</span>,</span><br><span class="line">      <span class="attr">message</span>: error.<span class="property">message</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="詳細解釋："><a href="#詳細解釋：" class="headerlink" title="詳細解釋："></a>詳細解釋：</h4><ol>
<li><strong>路由設置</strong>：<code>router.post(&quot;/&quot;...)</code> 表示這是一個處理POST請求的路由，路徑為根路徑”&#x2F;“。</li>
<li><strong>非同步處理</strong>：使用<code>async/await</code>來處理非同步操作，確保資料庫操作完成後再回應。</li>
<li><strong>解構請求體</strong>：<code>const &#123; contactPerson, phone, email, feedback &#125; = req.body;</code> 從請求體中提取所需資料。</li>
<li><strong>必填欄位驗證</strong>：檢查必填欄位是否存在，如果缺少則返回400錯誤。</li>
<li><strong>創建新記錄</strong>：使用<code>Feedback.create()</code>方法創建新的feedback記錄。</li>
<li><strong>成功回應</strong>：如果創建成功，返回201狀態碼和新創建的資料。</li>
<li><strong>錯誤處理</strong>：如果過程中出現錯誤，捕獲錯誤並返回400錯誤狀態。</li>
</ol>
</li>
<li><p>獲取所有 Feedback</p>
 <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 取得所有 feedback</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="title function_">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 使用 find() 方法從資料庫中取得所有 feedbacks</span></span><br><span class="line">    <span class="keyword">const</span> feedbacks = <span class="keyword">await</span> <span class="title class_">Feedback</span>.<span class="title function_">find</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 成功取得資料後，回應 200 狀態碼和回傳的資料</span></span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">      <span class="attr">status</span>: <span class="string">&quot;success&quot;</span>, <span class="comment">// 狀態為成功</span></span><br><span class="line">      <span class="attr">results</span>: feedbacks.<span class="property">length</span>, <span class="comment">// 回傳的 feedbacks 數量</span></span><br><span class="line">      <span class="attr">data</span>: feedbacks, <span class="comment">// 回傳所有 feedbacks 的資料</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="comment">// 如果發生錯誤（如資料庫連接問題），回應 404 錯誤狀態和錯誤訊息</span></span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">      <span class="attr">status</span>: <span class="string">&quot;fail&quot;</span>, <span class="comment">// 狀態為失敗</span></span><br><span class="line">      <span class="attr">message</span>: error.<span class="property">message</span>, <span class="comment">// 返回錯誤訊息</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="詳細解釋：-1"><a href="#詳細解釋：-1" class="headerlink" title="詳細解釋："></a>詳細解釋：</h4><ol>
<li><strong>GET請求處理</strong>：這個路由處理GET請求，用於獲取所有feedback。</li>
<li><strong>查詢所有記錄</strong>：<code>Feedback.find()</code>方法不帶參數，會返回所有feedback記錄。</li>
<li><strong>回應結構</strong>：回應包含狀態、結果數量和實際數據，為前端提供更多信息。</li>
<li><strong>錯誤處理</strong>：如果查詢過程出錯，返回404錯誤。</li>
</ol>
</li>
<li><p>獲取指定 ID 的 Feedback</p>
 <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 取得指定 id feedback</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/:id&quot;</span>, <span class="title function_">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 使用 findById 方法從資料庫中取得指定 id 的 feedback</span></span><br><span class="line">    <span class="keyword">const</span> feedback = <span class="keyword">await</span> <span class="title class_">Feedback</span>.<span class="title function_">findById</span>(req.<span class="property">params</span>.<span class="property">id</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果找不到該 id 對應的資料，回應 404 錯誤狀態和錯誤訊息</span></span><br><span class="line">    <span class="keyword">if</span> (!feedback) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">        <span class="attr">status</span>: <span class="string">&quot;fail&quot;</span>, <span class="comment">// 狀態為失敗</span></span><br><span class="line">        <span class="attr">message</span>: <span class="string">&quot;找不到該 feedback&quot;</span>, <span class="comment">// 返回錯誤訊息</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 成功取得資料後，回應 200 狀態碼和回傳的資料</span></span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">      <span class="attr">status</span>: <span class="string">&quot;success&quot;</span>, <span class="comment">// 狀態為成功</span></span><br><span class="line">      <span class="attr">data</span>: feedback, <span class="comment">// 回傳指定 id 的 feedback 資料</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="comment">// 如果發生錯誤（如無效的 id），回應 404 錯誤狀態和錯誤訊息</span></span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">      <span class="attr">status</span>: <span class="string">&quot;fail&quot;</span>, <span class="comment">// 狀態為失敗</span></span><br><span class="line">      <span class="attr">message</span>: error.<span class="property">message</span>, <span class="comment">// 返回錯誤訊息</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="詳細解釋：-2"><a href="#詳細解釋：-2" class="headerlink" title="詳細解釋："></a>詳細解釋：</h4><ol>
<li><strong>路徑參數</strong>：<code>:id</code>是一個路徑參數，可以通過<code>req.params.id</code>獲取。</li>
<li><strong>查找特定記錄</strong>：使用<code>Feedback.findById()</code>方法查找特定ID的feedback。</li>
<li><strong>記錄不存在處理</strong>：如果找不到對應記錄，返回404錯誤。</li>
<li><strong>成功回應</strong>：找到記錄後，返回200狀態碼和記錄數據。</li>
</ol>
</li>
<li><p>更新指定 ID 的 Feedback</p>
 <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 更新指定 id feedback</span></span><br><span class="line">router.<span class="title function_">patch</span>(<span class="string">&quot;/:id&quot;</span>, <span class="title function_">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 檢查必填欄位是否存在</span></span><br><span class="line">    <span class="keyword">const</span> &#123; contactPerson, email, feedback &#125; = req.<span class="property">body</span>;</span><br><span class="line">    <span class="keyword">if</span> (!contactPerson || !email || !feedback) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">        <span class="attr">status</span>: <span class="string">&quot;fail&quot;</span>,</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&quot;姓名、信箱、內容為必填欄位&quot;</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 findByIdAndUpdate 更新資料</span></span><br><span class="line">    <span class="keyword">const</span> updatedFeedback = <span class="keyword">await</span> <span class="title class_">Feedback</span>.<span class="title function_">findByIdAndUpdate</span>(</span><br><span class="line">      req.<span class="property">params</span>.<span class="property">id</span>, <span class="comment">// 從 URL 參數中獲取要更新的資料 ID</span></span><br><span class="line">      req.<span class="property">body</span>, <span class="comment">// 使用請求 body 中的資料進行更新</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">new</span>: <span class="literal">true</span>, <span class="comment">// 返回更新後的資料</span></span><br><span class="line">        <span class="attr">runValidators</span>: <span class="literal">true</span>, <span class="comment">// 在更新時執行驗證</span></span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果找不到該資料，回應 404 錯誤</span></span><br><span class="line">    <span class="keyword">if</span> (!updatedFeedback) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">        <span class="attr">status</span>: <span class="string">&quot;fail&quot;</span>,</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&quot;找不到該 feedback&quot;</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 成功更新後回應 200 狀態和更新後的資料</span></span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">      <span class="attr">status</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line">      <span class="attr">data</span>: updatedFeedback,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="comment">// 捕獲錯誤並返回 400 錯誤狀態和錯誤信息</span></span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">      <span class="attr">status</span>: <span class="string">&quot;fail&quot;</span>,</span><br><span class="line">      <span class="attr">message</span>: error.<span class="property">message</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="詳細解釋：-3"><a href="#詳細解釋：-3" class="headerlink" title="詳細解釋："></a>詳細解釋：</h4><ol>
<li><strong>PATCH請求</strong>：使用PATCH方法允許部分更新資源。</li>
<li><strong>必填欄位驗證</strong>：再次檢查必填欄位，確保更新操作的完整性。</li>
<li><strong>更新操作</strong>：<code>findByIdAndUpdate</code>方法同時查找和更新文檔。<ul>
<li><code>new: true</code>選項返回更新後的文檔。</li>
<li><code>runValidators: true</code>確保更新時執行模型的驗證規則。</li>
</ul>
</li>
<li><strong>更新失敗處理</strong>：如果找不到要更新的文檔，返回404錯誤。</li>
<li><strong>成功回應</strong>：更新成功後，返回更新後的文檔。</li>
</ol>
</li>
<li><p>刪除指定 ID 的 Feedback</p>
 <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 刪除指定 id feedback</span></span><br><span class="line">router.<span class="title function_">delete</span>(<span class="string">&quot;/:id&quot;</span>, <span class="title function_">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 使用 findByIdAndDelete 根據 URL 中的 id 參數查找並刪除對應的 feedback</span></span><br><span class="line">    <span class="keyword">const</span> feedback = <span class="keyword">await</span> <span class="title class_">Feedback</span>.<span class="title function_">findByIdAndDelete</span>(req.<span class="property">params</span>.<span class="property">id</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果找不到對應的 feedback（即該 id 不存在），回應 404 錯誤</span></span><br><span class="line">    <span class="keyword">if</span> (!feedback) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">        <span class="attr">status</span>: <span class="string">&quot;fail&quot;</span>, <span class="comment">// 狀態為失敗</span></span><br><span class="line">        <span class="attr">message</span>: <span class="string">&quot;找不到該 feedback&quot;</span>, <span class="comment">// 返回錯誤訊息</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果成功刪除，回應 200 狀態碼，表示成功操作</span></span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">      <span class="attr">status</span>: <span class="string">&quot;success&quot;</span>, <span class="comment">// 狀態為成功</span></span><br><span class="line">      <span class="attr">message</span>: <span class="string">&quot;刪除成功&quot;</span>, <span class="comment">// 返回成功訊息</span></span><br><span class="line">      <span class="attr">data</span>: <span class="literal">null</span>, <span class="comment">// 雖然此處用 200，但不返回具體的資料，data 設為 null</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="comment">// 如果發生錯誤（例如無效的 id），回應 400 錯誤狀態</span></span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">      <span class="attr">status</span>: <span class="string">&quot;fail&quot;</span>, <span class="comment">// 狀態為失敗</span></span><br><span class="line">      <span class="attr">message</span>: error.<span class="property">message</span>, <span class="comment">// 返回錯誤訊息，通常是錯誤的詳細信息</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="詳細解釋：-4"><a href="#詳細解釋：-4" class="headerlink" title="詳細解釋："></a>詳細解釋：</h4><ol>
<li><strong>刪除操作</strong>：使用<code>findByIdAndDelete</code>方法查找並刪除指定ID的文檔。</li>
<li><strong>刪除失敗處理</strong>：如果找不到要刪除的文檔，返回404錯誤。</li>
<li><strong>成功回應</strong>：刪除成功後，返回200狀態碼。注意這裡返回<code>data: null</code>，因為資源已被刪除。</li>
<li><strong>錯誤處理</strong>：捕獲可能的錯誤（如無效ID）並返回400錯誤。</li>
</ol>
</li>
<li><p>最後，別忘了在 <code>app.js</code> 中引入這個新的路由：</p>
 <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> feedbackRoute = <span class="built_in">require</span>(<span class="string">&quot;./routes/feedback&quot;</span>);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&quot;/feedbacks&quot;</span>, feedbackRoute);</span><br></pre></td></tr></table></figure>
<p> <img src="https://ithelp.ithome.com.tw/upload/images/20240924/20159686idBwmleeX9.png" alt="https://ithelp.ithome.com.tw/upload/images/20240924/20159686idBwmleeX9.png"></p>
</li>
</ol>
<p>這樣，我們就完成了 Feedback 的 CRUD 操作！每個操作都有其特定的 HTTP 方法和路徑，使用了適當的 Mongoose 方法來操作數據庫。</p>
<hr>
<h2 id="API常用HTTP狀態碼"><a href="#API常用HTTP狀態碼" class="headerlink" title="API常用HTTP狀態碼"></a>API常用HTTP狀態碼</h2><p>在開發API時，正確使用HTTP狀態碼對於前後端溝通至關重要。以下是一些常用的狀態碼及其含義：</p>
<ol>
<li><strong>200 OK</strong>：請求成功。通常用於GET和PUT&#x2F;PATCH請求。</li>
<li><strong>201 Created</strong>：請求成功並創建了新資源。常用於POST請求。</li>
<li><strong>204 No Content</strong>：請求成功，但無返回內容。常用於DELETE請求。</li>
<li><strong>400 Bad Request</strong>：客戶端請求有誤，例如請求體缺少必要參數。</li>
<li><strong>401 Unauthorized</strong>：未經授權的請求，通常是因為缺少或無效的認證。</li>
<li><strong>403 Forbidden</strong>：伺服器理解請求但拒絕執行，通常是權限問題。</li>
<li><strong>404 Not Found</strong>：請求的資源不存在。</li>
<li><strong>500 Internal Server Error</strong>：伺服器遇到未知錯誤，無法完成請求。<br>正確使用這些狀態碼可以幫助客戶端更好地理解請求的結果，提高API的可用性和可維護性。</li>
</ol>
<h2 id="HTTP狀態碼速查表"><a href="#HTTP狀態碼速查表" class="headerlink" title="HTTP狀態碼速查表"></a>HTTP狀態碼速查表</h2><table>
<thead>
<tr>
<th>狀態碼</th>
<th>說明</th>
<th>使用情境</th>
<th>餐廳情境比喻</th>
</tr>
</thead>
<tbody><tr>
<td>200 OK</td>
<td>請求成功，資料已回傳。</td>
<td>GET取得資料、PUT&#x2F;PATCH更新資料成功時。</td>
<td>服務生：「您的餐點已送達，請慢用。」</td>
</tr>
<tr>
<td>201 Created</td>
<td>請求成功，新資源已建立。</td>
<td>POST新增資料成功時。</td>
<td>櫃台：「您的訂位已成功，座位已準備好。」</td>
</tr>
<tr>
<td>204 No Content</td>
<td>請求成功，但無需回傳資料。</td>
<td>刪除成功，或不需回傳內容的操作。</td>
<td>服務生收走空盤子，點頭示意但不說話。</td>
</tr>
<tr>
<td>400 Bad Request</td>
<td>請求有誤，伺服器無法處理。</td>
<td>傳送的資料格式錯誤或缺少必要參數。</td>
<td>廚師：「這個訂單資訊不完整，請確認後再下單。」</td>
</tr>
<tr>
<td>401 Unauthorized</td>
<td>需要驗證身份。</td>
<td>未登入或登入已過期。</td>
<td>櫃台：「對不起，這是會員專屬餐廳，請出示會員卡。」</td>
</tr>
<tr>
<td>403 Forbidden</td>
<td>已驗證身份，但權限不足。</td>
<td>嘗試存取無權限的資源。</td>
<td>經理：「很抱歉，員工專用廚房區域不對外開放。」</td>
</tr>
<tr>
<td>404 Not Found</td>
<td>請求的資源不存在。</td>
<td>訪問不存在的網址或資源。</td>
<td>服務生：「對不起，我們的菜單上沒有這道菜。」</td>
</tr>
<tr>
<td>500 Internal Server Error</td>
<td>伺服器內部錯誤。</td>
<td>伺服器端程式錯誤或未預期的異常。</td>
<td>主廚：「非常抱歉，廚房設備突然故障，暫時無法處理訂單。」</td>
</tr>
</tbody></table>
<h3 id="為什麼正確使用狀態碼很重要？"><a href="#為什麼正確使用狀態碼很重要？" class="headerlink" title="為什麼正確使用狀態碼很重要？"></a>為什麼正確使用狀態碼很重要？</h3><p>正確使用 HTTP 狀態碼能大幅提升 API 的可用性和可維護性。它不只幫助開發者快速理解請求的結果，也有助於前端更有效地處理不同情況。選擇適當的狀態碼，就像在 API 和使用者之間建立了一個清晰的溝通橋樑。<br>記住，優秀的 API 設計不僅僅是實現功能，更重要的是提供清晰的溝通。適當使用狀態碼，就像為您的 API 安裝了一個高效的訊息系統，讓每次的請求和回應都能一目了然，大大提升了開發效率和用戶體驗。</p>
<h2 id="💡-輕鬆搞懂：HTTP狀態碼-200-OK-和-204-No-Content-的差別"><a href="#💡-輕鬆搞懂：HTTP狀態碼-200-OK-和-204-No-Content-的差別" class="headerlink" title="💡 輕鬆搞懂：HTTP狀態碼 200 OK 和 204 No Content 的差別"></a>💡 輕鬆搞懂：HTTP狀態碼 200 OK 和 204 No Content 的差別</h2><p>在處理API刪除操作時常見的兩種狀態碼：200 OK 和 204 No Content。它們到底有啥不一樣？來，讓我給你講個簡單的例子：</p>
<h3 id="200-OK：「欸，搞定了啦！來，我跟你說說細節」"><a href="#200-OK：「欸，搞定了啦！來，我跟你說說細節」" class="headerlink" title="200 OK：「欸，搞定了啦！來，我跟你說說細節」"></a>200 OK：「欸，搞定了啦！來，我跟你說說細節」</h3><p>想像你請你的好麻吉幫忙刪掉一張尷尬的路邊攤醉倒照片。你麻吉不只幫你刪掉，還很熱心地跟你說：「搞定囉！那張照片是上個月吃宵夜時拍的，檔案有5MB大欸！」<br>在API裡面，用200 OK就是這種感覺，不只說刪掉了，還會給你一堆有的沒的：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">  <span class="attr">message</span>: <span class="string">&quot;刪掉囉，放心啦&quot;</span>,</span><br><span class="line">  <span class="attr">deletedItem</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;醉倒路邊攤.jpg&quot;</span>,</span><br><span class="line">    <span class="attr">date</span>: <span class="string">&quot;2023-05-01&quot;</span>,</span><br><span class="line">    <span class="attr">size</span>: <span class="string">&quot;5MB&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="204-No-Content：「搞定了啦，就這樣」"><a href="#204-No-Content：「搞定了啦，就這樣」" class="headerlink" title="204 No Content：「搞定了啦，就這樣」"></a>204 No Content：「搞定了啦，就這樣」</h3><p>現在想像你的麻吉只是簡單回你：「OK啦」，什麼都沒多說。<br>在API裡，用204 No Content就是醬子的：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">res.<span class="title function_">status</span>(<span class="number">204</span>).<span class="title function_">send</span>();</span><br></pre></td></tr></table></figure>
<p>這基本上就是跟客戶端說：「刪掉了啦，沒事了，掰掰」。</p>
<h3 id="什麼時候用哪個咧？"><a href="#什麼時候用哪個咧？" class="headerlink" title="什麼時候用哪個咧？"></a>什麼時候用哪個咧？</h3><ol>
<li><strong>用 200 OK 的時機：</strong><br> - 你想跟前端多嘴幾句，講講刪掉什麼東西<br> - 前端需要這些資訊來更新畫面</li>
<li><strong>用 204 No Content 的時機：</strong><br> - 你只想說「刪掉了啦」，不想多講<br> - 你想省點網路流量（因為204的回應通常是空的）</li>
</ol>
<h3 id="實際一點的例子"><a href="#實際一點的例子" class="headerlink" title="實際一點的例子"></a>實際一點的例子</h3><ul>
<li>PTT刪除推文（用204）</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">delete</span>(<span class="string">&#x27;/posts/:id/comments/:commentId&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 刪除推文的程式碼</span></span><br><span class="line">  res.<span class="title function_">status</span>(<span class="number">204</span>).<span class="title function_">send</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>這裡啊，我們只要知道推文刪掉了就好，不用知道更多有的沒的。</p>
<ul>
<li>刪除雲端硬碟的檔案（用200）</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">delete</span>(<span class="string">&#x27;/files/:id&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 刪除檔案的程式碼</span></span><br><span class="line">  res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&quot;檔案刪掉囉&quot;</span>,</span><br><span class="line">    <span class="attr">deletedFile</span>: &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;期末報告.docx&quot;</span>,</span><br><span class="line">      <span class="attr">size</span>: <span class="string">&quot;2.5MB&quot;</span>,</span><br><span class="line">      <span class="attr">lastEdited</span>: <span class="string">&quot;2023-06-15&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>這個例子中，回傳被刪掉的檔案資訊可能對使用者有幫助，萬一誤刪還可以知道刪掉什麼。</p>
<h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><ul>
<li>200 OK：「搞定了啦，而且我還知道這個那個」</li>
<li>204 No Content：「搞定了啦，沒什麼好講的」<br>選哪個主要看你的API到底要不要在刪除後多嘴幾句。記住喔，保持一致很重要 - 你的API決定要用哪種方式就要貫徹始終，不要三心二意喔！</li>
</ul>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>好啦！我們的 API 小冒險暫時告一段落。從資料庫設置到 CRUD 操作，我們跑了一圈後端開發的小obstacle course。現在的你，就像剛學會騎腳踏車的小孩，已經可以自己平穩前進了！<br>記住，一個好的 API 就像一個好朋友：容易相處（易用性）、守信用（可靠性），而且總是能給出清楚的回應（狀態碼和錯誤訊息）。你現在已經認識了這位新朋友，接下來就是多多練習，讓你們的友誼更加深厚。<br>下一站，我們要認識一位新朋友：Postman。它就像是你的 API 健身教練，幫你檢查每個動作是否到位。準備好要再次揮灑汗水了嗎？<br>繼續保持熱情，開發的世界總有新奇等著你。現在，是時候歇口氣，喝杯咖啡，然後準備迎接下一個挑戰了！<br>大家有沒有想要更詳細補充的部分呢？歡迎在下方留言分享喔！我們一起學習、一起成長。明天見啦，掰掰～</p>
<br />
<hr />
<br />

<blockquote>
<p>希望這篇文章有幫助到你，謝謝你的觀看，若有想看的系列也歡迎告訴我 😉</p>
</blockquote>
]]></content>
      <tags>
        <tag>2024IT鐵人賽</tag>
        <tag>Express</tag>
        <tag>API</tag>
      </tags>
  </entry>
  <entry>
    <title>[ 2024 IT 鐵人賽 DAY16 ] Postman 初體驗：API 測試小白入門指南</title>
    <url>/2024/09/25/2024it/d16/</url>
    <content><![CDATA[<p>嗨大家好！我是2魚，今天要和大家分享如何使用 Postman 來測試 API。還記得我們辛辛苦苦寫好的 API 嗎？接下來就讓我們來驗證成果吧！</p>
<span id="more"></span>

<div class="cus-intro-box">
    <h2>房東不給養鸚鵡 - 那就用 Nuxt + Express + MongoDB 30 天寫一個全端鸚鵡專案。</h2>
    <p>挑戰人生第一次鐵人賽，就來個佛心分享 side project，從專案發想、規劃、設計、資料庫、開發到部署，技術使用 Nuxt 3、Tailwind CSS、Pinia、Axios、Express、MongoDB，製作一個前後端分離的鸚鵡專案，功能主要介紹食物計算機和聯絡我們，希望可以讓更多人瞭解專案的完整流程 ✨</p>
    <a href="https://ithelp.ithome.com.tw/users/20159686/ironman/7564" target="_blank">IT 全文章連結</a>
</div>

<h2 id="開發-API-後的小抱怨時間"><a href="#開發-API-後的小抱怨時間" class="headerlink" title="開發 API 後的小抱怨時間"></a>開發 API 後的小抱怨時間</h2><p>寫完 API 後，你是不是也和我一樣有種「蝦？我到底在寫啥」的感覺？一堆程式碼看得眼花撩亂，卻不知道到底有沒有用？別擔心，這很正常！這就是為什麼我們需要 Postman 這個超級好用的工具來幫忙。</p>
<h2 id="Postman：工程師的神隊友"><a href="#Postman：工程師的神隊友" class="headerlink" title="Postman：工程師的神隊友"></a>Postman：工程師的神隊友</h2><p>Postman 可以模擬各種 HTTP 請求，幫我們測試 API 的功能。簡單說，它就是一個可以幫我們「假裝是使用者」的工具，讓我們不用真的寫前端就能測試後端。太方便了，對吧？</p>
<h3 id="step1-下載和註冊-Postman"><a href="#step1-下載和註冊-Postman" class="headerlink" title="step1. 下載和註冊 Postman"></a>step1. 下載和註冊 Postman</h3><p>首先，讓我們從 <a href="https://www.postman.com/downloads/">Postman官網</a> 下載並安裝Postman。</p>
<blockquote>
<p>💡 小提示：Postman支持多種操作系統，包括Windows、macOS和Linux。選擇適合你系統的版本進行下載。</p>
</blockquote>
<h3 id="step2-打開應用程式並登入"><a href="#step2-打開應用程式並登入" class="headerlink" title="step2. 打開應用程式並登入"></a>step2. 打開應用程式並登入</h3><p>安裝完成後，打開Postman並創建一個帳號或使用現有帳號登入。登入後，你將看到Postman的主界面。</p>
<h3 id="step3-建立工作區"><a href="#step3-建立工作區" class="headerlink" title="step3. 建立工作區"></a>step3. 建立工作區</h3><p>工作區（Workspace）是Postman中組織和管理API請求的重要概念。它就像是一個虛擬的辦公室，你可以在這裡整理所有與特定項目相關的API請求。</p>
<blockquote>
<p>老實說，我一開始也不知道工作區這麼好用，害我把首頁用的超級亂的 😅</p>
</blockquote>
<ul>
<li>在左上角找到「Workspaces」，點擊「Create Workspace」<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20240925/20159686kR84yDoczw.png" alt="https://ithelp.ithome.com.tw/upload/images/20240925/20159686kR84yDoczw.png"></li>
<li>選擇「Blank Workspace」來創建一個空白的工作區<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20240925/20159686dIi0nvkwhN.png" alt="https://ithelp.ithome.com.tw/upload/images/20240925/20159686dIi0nvkwhN.png"></li>
<li>你的工作區命名。選擇一個有意義的名稱，例如「test-app api」<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20240925/20159686W4prt8XuzY.png" alt="https://ithelp.ithome.com.tw/upload/images/20240925/20159686W4prt8XuzY.png"><blockquote>
<p>💡 小技巧：取個好記的名字很重要喔！我通常會用專案名稱或 API 的主要功能來命名。</p>
</blockquote>
</li>
</ul>
<h3 id="step4-在工作區中創建集合"><a href="#step4-在工作區中創建集合" class="headerlink" title="step4. 在工作區中創建集合"></a>step4. 在工作區中創建集合</h3><p>集合（Collection）是Postman中用來組織相關API請求的容器。想像它就像是一個文件夾，裡面存放著同一個API或同一個項目的所有相關請求。</p>
<ul>
<li><p>點擊「+」按鈕，然後選擇「Blank collection」<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20240925/20159686vl685iRXd7.png" alt="https://ithelp.ithome.com.tw/upload/images/20240925/20159686vl685iRXd7.png"></p>
</li>
<li><p>為集合命名。在這個例子中，我們將其命名為「local - feedback」，因為我們要在本地測試feedback API<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20240925/20159686h4GGTKVU8X.png" alt="https://ithelp.ithome.com.tw/upload/images/20240925/20159686h4GGTKVU8X.png"></p>
<blockquote>
<p>💡 小提醒：集合名稱最好能反映裡面 API 的功能喔！像是測試會員註冊的 API，你可以叫它「User Registration API」之類的。</p>
</blockquote>
</li>
</ul>
<h3 id="step5-創建並測試第一個API請求"><a href="#step5-創建並測試第一個API請求" class="headerlink" title="step5. 創建並測試第一個API請求"></a>step5. 創建並測試第一個API請求</h3><p>現在，讓我們創建一個請求來測試「新增feedback」的功能。</p>
<ul>
<li><p>在剛剛創建的集合中，點擊「Add request」<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20240925/201596865ZzTTyomZr.png" alt="https://ithelp.ithome.com.tw/upload/images/20240925/201596865ZzTTyomZr.png"></p>
</li>
<li><p>幫這個請求取名，就叫「新增 feedback」吧<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20240925/20159686dbOkmvQqCS.png" alt="https://ithelp.ithome.com.tw/upload/images/20240925/20159686dbOkmvQqCS.png"></p>
</li>
<li><p>設置請求方法為 <code>POST</code>（記得嗎？這是我們在 <code>routes/feedback.js</code> 裡定義的）<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20240925/20159686nBKpwlttuK.png" alt="https://ithelp.ithome.com.tw/upload/images/20240925/20159686nBKpwlttuK.png"></p>
</li>
<li><p>輸入請求URL：<code>http://127.0.0.1:3000/feedbacks/</code></p>
<ul>
<li><code>http://127.0.0.1:3000</code> 是本地服務器地址（當你運行 <code>npm start</code> 時使用的地址）</li>
<li><code>/feedbacks</code> 是在 <code>app.js</code> 中定義的路由前綴<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20240925/20159686VWfyoyZDWM.png" alt="https://ithelp.ithome.com.tw/upload/images/20240925/20159686VWfyoyZDWM.png">   </li>
<li>最後的 <code>/</code> 對應 <code>routes/feedback.js</code> 中定義的根路由<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20240925/2015968668Fd2O76RZ.png" alt="https://ithelp.ithome.com.tw/upload/images/20240925/2015968668Fd2O76RZ.png"></li>
</ul>
</li>
</ul>
<blockquote>
<p>💡 小知識：<code>127.0.0.1</code> 就是俗稱的 localhost，代表你的電腦自己。在開發時我們常用這個地址來測試。</p>
</blockquote>
<ul>
<li><p>在「Body」標籤頁中，選擇「raw」並將格式設為「JSON」，然後輸入以下測試資料：</p>
  <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;contactPerson&quot;</span><span class="punctuation">:</span> <span class="string">&quot;測試人員&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test@gmail.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;feedback&quot;</span><span class="punctuation">:</span> <span class="string">&quot;測試回饋&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>💡 小補充：JSON（JavaScript Object Notation）是一種輕量級的資料交換格式，在 API 溝通中超常用。它不只容易讓人讀懂，電腦也很容易處理喔！</p>
</blockquote>
</li>
<li><p>按下「Send」按鈕發送請求。如果一切順利，你應該會看到類似這樣的回應：<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20240925/201596861fBZOPgAyO.png" alt="https://ithelp.ithome.com.tw/upload/images/20240925/201596861fBZOPgAyO.png"></p>
<p>  這個回應對應了我們在 <code>routes/feedback.js</code> 中第 24 行的程式碼：<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20240925/20159686toovyysloI.png" alt="https://ithelp.ithome.com.tw/upload/images/20240925/20159686toovyysloI.png"></p>
</li>
<li><p>要確認資料是不是真的存到資料庫了，我們可以打開 MongoDB Compass 看看：<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20240925/20159686OjXM1ViyEP.png" alt="https://ithelp.ithome.com.tw/upload/images/20240925/20159686OjXM1ViyEP.png"></p>
</li>
</ul>
<h3 id="step6-測試錯誤情況-試打失敗請求"><a href="#step6-測試錯誤情況-試打失敗請求" class="headerlink" title="step6. 測試錯誤情況 (試打失敗請求)"></a>step6. 測試錯誤情況 (試打失敗請求)</h3><p>測試 API 時，我們不只要確保正確的輸入能正常運作，還要確認 API 能適當處理錯誤的輸入。這就像是在檢查一個自動販賣機，不只要確定它能正確給出商品，還要確保當投幣不足或選擇的商品賣完時，它能給出適當的提示。</p>
<ul>
<li><p>先回顧一下我們的錯誤處理邏輯：<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20240925/201596861nVzJeedPz.png" alt="https://ithelp.ithome.com.tw/upload/images/20240925/201596861nVzJeedPz.png"></p>
</li>
<li><p>現在，我們來修改 Postman 中的請求內容，故意少寫一個必填欄位：</p>
  <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;contactPerson&quot;</span><span class="punctuation">:</span> <span class="string">&quot;測試人員&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test@gmail.com&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>發送請求後，你應該會看到一個錯誤回應：<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20240925/20159686X1YcYw9WaV.png" alt="https://ithelp.ithome.com.tw/upload/images/20240925/20159686X1YcYw9WaV.png"><br>  這個回應對應了程式碼中第 11 行的錯誤處理邏輯。</p>
</li>
</ul>
<blockquote>
<p>💡 小撇步：要做好 API 測試，最好能想到各種可能的輸入情況，包括正確的、錯誤的，甚至是一些奇奇怪怪的邊界情況。這樣才能確保你的 API 在各種情況下都能正確運作喔！</p>
</blockquote>
<hr>
<h2 id="其他-API-操作的-Postman-測試"><a href="#其他-API-操作的-Postman-測試" class="headerlink" title="其他 API 操作的 Postman 測試"></a>其他 API 操作的 Postman 測試</h2><h3 id="獲取所有feedback"><a href="#獲取所有feedback" class="headerlink" title="獲取所有feedback"></a>獲取所有feedback</h3><ul>
<li>方法：GET（就像是在自動販賣機上按「顯示所有商品」的按鈕）</li>
<li>URL：<a href="http://127.0.0.1:3000/feedbacks/">http://127.0.0.1:3000/feedbacks/</a></li>
<li>結果示例：<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20240925/20159686f7Fls8tIq7.png" alt="https://ithelp.ithome.com.tw/upload/images/20240925/20159686f7Fls8tIq7.png"></li>
</ul>
<h3 id="獲取指定-ID-的-feedback"><a href="#獲取指定-ID-的-feedback" class="headerlink" title="獲取指定 ID 的 feedback"></a>獲取指定 ID 的 feedback</h3><ul>
<li><p>方法：GET（這次是按「顯示特定商品詳情」的按鈕）</p>
</li>
<li><p>URL：<a href="http://127.0.0.1:3000/feedbacks/:id%EF%BC%88%E8%A8%98%E5%BE%97%E6%8A%8A">http://127.0.0.1:3000/feedbacks/:id（記得把</a> :id 換成實際的 ID 喔）</p>
</li>
<li><p>如何獲取 ID：可以從 MongoDB Compass 中複製物件的 ID<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20240925/20159686QyfRkCHxrD.png" alt="https://ithelp.ithome.com.tw/upload/images/20240925/20159686QyfRkCHxrD.png"></p>
</li>
<li><p>結果示例：<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20240925/20159686iWJZabxfOh.png" alt="https://ithelp.ithome.com.tw/upload/images/20240925/20159686iWJZabxfOh.png"></p>
</li>
</ul>
<h3 id="更新指定-ID-的-feedback"><a href="#更新指定-ID-的-feedback" class="headerlink" title="更新指定 ID 的 feedback"></a>更新指定 ID 的 feedback</h3><ul>
<li><p>方法：PATCH（就像是在自動販賣機上更改你的訂單）</p>
</li>
<li><p>URL：<a href="http://127.0.0.1:3000/feedbacks/:id">http://127.0.0.1:3000/feedbacks/:id</a> （別忘了把 :id 換成你要更新的 feedback 的實際 ID 喔）</p>
</li>
<li><p>Body示例：</p>
  <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;contactPerson&quot;</span><span class="punctuation">:</span> <span class="string">&quot;測試人員&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test@gmail.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;feedback&quot;</span><span class="punctuation">:</span> <span class="string">&quot;測試更新&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>結果示例：<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20240925/20159686HpLXp2h1nl.png" alt="https://ithelp.ithome.com.tw/upload/images/20240925/20159686HpLXp2h1nl.png"></p>
</li>
</ul>
<h3 id="刪除指定-ID-的-feedback"><a href="#刪除指定-ID-的-feedback" class="headerlink" title="刪除指定 ID 的 feedback"></a>刪除指定 ID 的 feedback</h3><ul>
<li>方法：DELETE（想像成按下自動販賣機上的「取消訂單」按鈕）</li>
<li>URL：<a href="http://127.0.0.1:3000/feedbacks/:id">http://127.0.0.1:3000/feedbacks/:id</a> （記得替換 :id 喔）</li>
<li>結果示例：<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20240925/20159686OPNfEtYy01.png" alt="https://ithelp.ithome.com.tw/upload/images/20240925/20159686OPNfEtYy01.png"><blockquote>
<p>小提醒：刪除操作要小心使用，因為它通常是不可逆的。在實際應用中，我們可能會考慮使用「軟刪除」（將資料標記為已刪除而不是真的刪掉）來避免意外情況。</p>
</blockquote>
</li>
</ul>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>哇！我們終於完成了所有 CRUD（創建、讀取、更新、刪除）操作的測試。是不是感覺對 API 更有掌控感了呢？使用 Postman 真的讓 API 測試變得超級方便，就像是有了一個強大的翻譯器，幫我們和後端溝通。</p>
<p>記住，好的 API 測試不只是確保功能正常，還要考慮各種可能的情況：</p>
<ol>
<li>正確的輸入：確保 API 在正常情況下工作正常。</li>
<li>錯誤的輸入：測試 API 如何處理異常情況，例如缺少必要欄位或格式錯誤。</li>
<li>邊界情況：測試一些極端情況，例如很長的字串或特殊字符。</li>
<li>權限測試：如果你的 API 有權限控制，要確保未授權的請求被正確拒絕。<br>透過這些測試，我們可以大大提高 API 的穩定性和可靠性。這就像是在發布前給自動販賣機做全面檢查，確保它能夠應對各種情況，不會在用戶使用時出現意外。</li>
</ol>
<h2 id="下一步"><a href="#下一步" class="headerlink" title="下一步"></a>下一步</h2><p>學會使用 Postman 只是開始哦！接下來，你可以自行探索更多 Postman 的進階功能，例如：</p>
<ol>
<li>環境變數：用於管理不同環境（如開發、測試、生產）的設定。</li>
<li>自動化測試：編寫測試腳本，自動驗證 API 響應。</li>
<li>監控：設置定期運行的測試，確保 API 持續可用。</li>
<li>文檔生成：基於你的 API 請求自動生成文檔。<br>記住，API 開發和測試是一個持續學習的過程。每次你遇到新的挑戰，解決新的問題，都是在提升自己的技能。保持好奇心，不斷嘗試新東西，你會發現 API 的世界其實超有趣的！</li>
</ol>
<p>最後，希望這篇教學對你有幫助。如果你有任何問題或想分享你的 API 測試經驗，歡迎留言討論哦！我們一起在程式設計的海洋中航行，一起成長進步！加油！🚀✨</p>
<br />
<hr />
<br />

<blockquote>
<p>希望這篇文章有幫助到你，謝謝你的觀看，若有想看的系列也歡迎告訴我 😉</p>
</blockquote>
]]></content>
      <tags>
        <tag>2024IT鐵人賽</tag>
        <tag>API</tag>
        <tag>Postman</tag>
      </tags>
  </entry>
  <entry>
    <title>[ 2024 IT 鐵人賽 DAY17 ] 後端開發的關鍵：可重用函式設計與全面錯誤管理</title>
    <url>/2024/09/26/2024it/d17/</url>
    <content><![CDATA[<p>嘿！你有沒有發現，在撰寫程式的時候，總是會有一些程式碼不斷地重複出現？它們就像是影分身術一樣，在不同的地方出現，做著類似的事情。這些重複的程式碼不僅讓我們的程式變得冗長，也讓修改和維護變得更加困難。</p>
<span id="more"></span>

<p>但是，身為一個聰明的開發者，我們怎麼能讓這些重複的程式碼繼續存在呢？就像孫悟空掌握了七十二變一樣，我們也要學會如何把這些重複的程式碼”變”出去，讓我們的程式碼變得更加簡潔和優雅。<br>除了重複的程式碼，錯誤處理也是我們經常要面對的問題。就像在玩遊戲時遇到 boss 一樣，錯誤總是在關鍵時刻出現，讓我們的程式陷入困境。但是，如果我們提前準備好對策，就可以輕鬆地應對這些錯誤，讓我們的程式穩定運行。<br>所以，讓我們一起來看看如何通過抽取重複的程式碼和實現全面的錯誤處理，讓我們的程式變得更加強大和可靠吧！相信學會這些技巧，你也能成為一名出色的開發者！</p>
<div class="cus-intro-box">
    <h2>房東不給養鸚鵡 - 那就用 Nuxt + Express + MongoDB 30 天寫一個全端鸚鵡專案。</h2>
    <p>挑戰人生第一次鐵人賽，就來個佛心分享 side project，從專案發想、規劃、設計、資料庫、開發到部署，技術使用 Nuxt 3、Tailwind CSS、Pinia、Axios、Express、MongoDB，製作一個前後端分離的鸚鵡專案，功能主要介紹食物計算機和聯絡我們，希望可以讓更多人瞭解專案的完整流程 ✨</p>
    <a href="https://ithelp.ithome.com.tw/users/20159686/ironman/7564" target="_blank">IT 全文章連結</a>
</div>

<h2 id="製作可重用的函式"><a href="#製作可重用的函式" class="headerlink" title="製作可重用的函式"></a>製作可重用的函式</h2><p>首先，我們在專案的根目錄下新增一個名為 <code>utils</code> 的資料夾，用於存放我們抽取出來的工具函式。<br>在 <code>utils</code> 資料夾中，我們新增一個名為 <code>handleSuccess.js</code> 的檔案，並添加以下程式碼：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// utils/handleSuccess.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleSuccess</span>(<span class="params">res, data, message, statusCode</span>) &#123;</span><br><span class="line">  res.<span class="title function_">status</span>(statusCode).<span class="title function_">json</span>(&#123;</span><br><span class="line">    <span class="attr">statusCode</span>: statusCode || <span class="number">200</span>,</span><br><span class="line">    <span class="attr">status</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line">    message,</span><br><span class="line">    data,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = handleSuccess;</span><br></pre></td></tr></table></figure>

<p>這個 <code>handleSuccess</code> 函式用於處理成功回應。它接收四個參數：</p>
<ul>
<li><code>res</code>: Express 的回應物件</li>
<li><code>data</code>: 要在回應中返回的資料</li>
<li><code>message</code>: 成功訊息</li>
<li><code>statusCode</code>: HTTP 狀態碼,預設為 200<br>函式內部使用 <code>res.status()</code> 方法設置 HTTP 狀態碼，然後使用 <code>res.json()</code> 方法返回一個包含狀態碼、狀態、訊息和資料的 JSON 物件。</li>
</ul>
<p>接下來，我們在 <code>utils</code> 資料夾中新增一個名為 <code>appError.js</code> 的檔案，並添加以下程式碼：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// utils/appError.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">appError</span> = (<span class="params">httpStatus, errMessage, next</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> error = <span class="keyword">new</span> <span class="title class_">Error</span>(errMessage);</span><br><span class="line">  error.<span class="property">message</span> = errMessage;</span><br><span class="line">  error.<span class="property">statusCode</span> = httpStatus;</span><br><span class="line">  error.<span class="property">isOperational</span> = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">return</span> error;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = appError;</span><br></pre></td></tr></table></figure>

<p>這個 <code>appError</code> 函式用於創建自定義的錯誤物件。它接收三個參數：</p>
<ul>
<li><code>httpStatus</code>：HTTP 狀態碼</li>
<li><code>errMessage</code>：錯誤訊息</li>
<li><code>next</code>：Express 的 <code>next</code> 函式<br>函式內部創建一個新的 <code>Error</code> 物件，並設置錯誤的屬性，包括錯誤訊息、HTTP 狀態碼和一個表示錯誤是否為操作錯誤的標誌 <code>isOperational</code>。最後，函式返回這個錯誤物件。<br>這個錯誤物件會被傳遞到 Express 的錯誤處理中間件中，我們稍後會在 <code>app.js</code> 中進行處理。<br>最後，我們在 <code>utils</code> 資料夾中新增一個名為 <code>handleErrorAsync.js</code> 的檔案，並添加以下程式碼：</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// utils/handleErrorAsync.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handleErrorAsync = <span class="keyword">function</span> <span class="title function_">handleErrorAsync</span>(<span class="params">func</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">    <span class="title function_">func</span>(req, res, next).<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">next</span>(error);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = handleErrorAsync;</span><br></pre></td></tr></table></figure>

<p>這個 <code>handleErrorAsync</code> 函式是一個高階函式，用於處理異步函式的錯誤。它接收一個異步函式 <code>func</code> 作為參數，並返回一個新的函式。<br>這個新的函式會執行原始的異步函式 <code>func</code>，並使用 <code>catch</code> 方法捕獲可能發生的錯誤。如果發生錯誤，就將錯誤傳遞給 Express 的 <code>next</code> 函式，交給錯誤處理中間件進行處理。<br>使用 <code>handleErrorAsync</code> 函式可以簡化異步函式的錯誤處理，避免了繁瑣的 <code>try...catch</code> 語句。</p>
<h2 id="全面的錯誤處理"><a href="#全面的錯誤處理" class="headerlink" title="全面的錯誤處理"></a>全面的錯誤處理</h2><p>有了上面的工具函式，我們就可以在 Express 應用程式中實現更全面的錯誤處理了。<br>我們回到 <code>app.js</code> 檔案：<br>添加一個全域的未捕獲異常處理程式：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 程式出現重大錯誤時</span></span><br><span class="line">process.<span class="title function_">on</span>(<span class="string">&quot;uncaughtException&quot;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 記錄錯誤下來,等到服務都處理完後,停掉該 process</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Uncaughted Exception！&quot;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">  process.<span class="title function_">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>這個處理程式會在程式出現未捕獲的異常時觸發。它會記錄錯誤訊息，並在服務處理完所有請求後，停止該 process。</p>
<p>接下來，我們添加一個 404 錯誤處理中間件：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 404 錯誤</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">    <span class="attr">status</span>: <span class="string">&quot;error&quot;</span>,</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&quot;無此路由資訊&quot;</span>,</span><br><span class="line">    <span class="attr">path</span>: req.<span class="property">originalUrl</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>這個中間件會在沒有匹配到任何路由時觸發，返回一個 404 錯誤訊息。</p>
<p>然後，我們添加一個開發環境的錯誤處理函式：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">resError</span> = (<span class="params">err, res</span>) =&gt; &#123;</span><br><span class="line">  res.<span class="title function_">status</span>(err.<span class="property">statusCode</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">    <span class="attr">message</span>: err.<span class="property">message</span>,</span><br><span class="line">    <span class="attr">statusCode</span>: err.<span class="property">statusCode</span>,</span><br><span class="line">    <span class="attr">isOperational</span>: err.<span class="property">isOperational</span>,</span><br><span class="line">    <span class="attr">stack</span>: err.<span class="property">stack</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>這個函式用於處理開發環境下的錯誤，返回詳細的錯誤訊息，包括錯誤堆疊。</p>
<p>接下來，我們添加一個全域的錯誤處理中間件：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">err, req, res, next</span>) &#123;</span><br><span class="line">  err.<span class="property">statusCode</span> = err.<span class="property">statusCode</span> || <span class="number">500</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (err.<span class="property">name</span> === <span class="string">&quot;ValidationError&quot;</span>) &#123;</span><br><span class="line">    err.<span class="property">message</span> = <span class="string">&quot;資料欄位未填寫正確,請重新輸入！&quot;</span>;</span><br><span class="line">    err.<span class="property">isOperational</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">resError</span>(err, res);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">resError</span>(err, res);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>這個中間件會捕獲所有的錯誤，並進行處理。如果是資料驗證錯誤，就設置相應的錯誤訊息和 <code>isOperational</code> 標誌，然後呼叫 <code>resError</code> 函式處理錯誤。如果是其他類型的錯誤，就直接呼叫 <code>resError</code> 函式處理。</p>
<p>最後，我們添加一個未捕獲的 Promise 錯誤處理程式：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 未捕獲到的 catch</span></span><br><span class="line">process.<span class="title function_">on</span>(<span class="string">&quot;unhandledRejection&quot;</span>, <span class="function">(<span class="params">err, promise</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;未捕獲到的 rejection：&quot;</span>, promise, <span class="string">&quot;原因：&quot;</span>, err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = app;</span><br></pre></td></tr></table></figure>

<p>這個處理程式會在有未捕獲的 Promise 錯誤時觸發，記錄錯誤訊息。</p>
<h2 id="在路由中使用工具函式"><a href="#在路由中使用工具函式" class="headerlink" title="在路由中使用工具函式"></a>在路由中使用工具函式</h2><p>現在，我們可以在 Express 的路由中使用之前定義的工具函式了。<br>我們回到 <code>routes/feedback.js</code> 檔案，並在檔案的頂部引入工具函式：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> handleSuccess = <span class="built_in">require</span>(<span class="string">&quot;../utils/handleSuccess&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> handleErrorAsync = <span class="built_in">require</span>(<span class="string">&quot;../utils/handleErrorAsync&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> appError = <span class="built_in">require</span>(<span class="string">&quot;../utils/appError&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>然後，在新增 feedback 的路由中，我們可以使用 <code>handleErrorAsync</code> 函式來處理異步函式的錯誤：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">router.<span class="title function_">post</span>(</span><br><span class="line">  <span class="string">&quot;/&quot;</span>,</span><br><span class="line">  <span class="title function_">handleErrorAsync</span>(<span class="title function_">async</span> (req, res, next) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; contactPerson, phone, email, feedback &#125; = req.<span class="property">body</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 必填欄位驗證</span></span><br><span class="line">    <span class="keyword">if</span> (!contactPerson || !email || !feedback) &#123;</span><br><span class="line">      <span class="comment">// 使用 appError 函式創建錯誤物件</span></span><br><span class="line">      <span class="comment">// 狀態碼為 400，錯誤訊息為 &quot;姓名、信箱、內容為必填欄位&quot;</span></span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">next</span>(<span class="title function_">appError</span>(<span class="number">400</span>, <span class="string">&quot;姓名、信箱、內容為必填欄位&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> newFeedback = <span class="keyword">await</span> <span class="title class_">Feedback</span>.<span class="title function_">create</span>(&#123;</span><br><span class="line">      contactPerson,</span><br><span class="line">      phone,</span><br><span class="line">      email,</span><br><span class="line">      feedback,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 handleSuccess 函式處理成功回應</span></span><br><span class="line">    <span class="comment">// 狀態碼為 201，回應中包含新創建的 feedback 資料和成功訊息</span></span><br><span class="line">    <span class="title function_">handleSuccess</span>(res, newFeedback, <span class="string">&quot;新增成功&quot;</span>, <span class="number">201</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>讓我們詳細解釋一下新增的錯誤和成功處理部分：</p>
<ol>
<li>錯誤處理：<ul>
<li>在進行必填欄位驗證後，如果驗證失敗（即有欄位為空或未定義），我們使用 <code>appError</code> 函式創建一個自定義的錯誤物件。</li>
<li><code>appError</code> 函式接收兩個參數：HTTP 狀態碼和錯誤訊息。在這裡，我們將狀態碼設為 400（Bad Request），表示客戶端提交的請求有問題。錯誤訊息設為 “姓名、信箱、內容為必填欄位”，明確指出哪些欄位是必填的。</li>
<li>創建完錯誤物件後，我們使用 <code>return next(appError(...))</code>，將錯誤物件傳遞給 Express 的 <code>next</code> 函式。這會將錯誤交給 Express 的錯誤處理中間件進行處理。</li>
<li>Express 的錯誤處理中間件會根據錯誤物件的屬性（如狀態碼和訊息）來生成適當的錯誤回應，並將其返回給客戶端。</li>
</ul>
</li>
<li>成功處理：<ul>
<li>當新增 feedback 成功時，我們使用 <code>handleSuccess</code> 函式來處理成功回應。</li>
<li><code>handleSuccess</code> 函式接收四個參數：<ul>
<li><code>res</code>：Express 的回應物件，用於發送回應給客戶端。</li>
<li><code>newFeedback</code>：新創建的 feedback 資料，作為回應的一部分返回給客戶端。</li>
<li>“新增成功”：成功訊息，告知客戶端新增 feedback 成功。</li>
<li>201：HTTP 狀態碼，表示資源已成功創建。</li>
</ul>
</li>
<li>在 <code>handleSuccess</code> 函式內部，它會設置適當的 HTTP 狀態碼（如果沒有提供，預設為 200），並將包含狀態、訊息和資料的 JSON 回應返回給客戶端。</li>
<li>這樣，客戶端就能收到一個結構化的成功回應，其中包含了新創建的 feedback 資料和成功訊息。</li>
</ul>
</li>
</ol>
<p>通過使用 <code>appError</code> 和 <code>handleSuccess</code> 函式，我們將錯誤處理和成功回應的邏輯抽象到了單獨的函式中。這樣做的好處是：</p>
<ul>
<li>程式碼更加簡潔和可讀，不需要在路由處理函式中手動設置 HTTP 狀態碼和回應格式。</li>
<li>錯誤處理和成功回應的邏輯被集中管理，提高了程式碼的一致性和可維護性。</li>
<li>可以在多個路由處理函式中重複使用這些函式，減少了重複的程式碼。</li>
</ul>
<h3 id="app-js-完整程式碼"><a href="#app-js-完整程式碼" class="headerlink" title="app.js 完整程式碼"></a>app.js 完整程式碼</h3><details>
<summary>點擊這裡查看完整範例程式碼</summary>
    <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> createError = <span class="built_in">require</span>(<span class="string">&quot;http-errors&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> cookieParser = <span class="built_in">require</span>(<span class="string">&quot;cookie-parser&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> logger = <span class="built_in">require</span>(<span class="string">&quot;morgan&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cors = <span class="built_in">require</span>(<span class="string">&quot;cors&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> indexRouter = <span class="built_in">require</span>(<span class="string">&quot;./routes/index&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> usersRouter = <span class="built_in">require</span>(<span class="string">&quot;./routes/users&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> feedbackRoute = <span class="built_in">require</span>(<span class="string">&quot;./routes/feedback&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&quot;mongoose&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dotenv = <span class="built_in">require</span>(<span class="string">&quot;dotenv&quot;</span>);</span><br><span class="line">dotenv.<span class="title function_">config</span>(&#123; <span class="attr">path</span>: <span class="string">&quot;./config.env&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Feedback</span> = <span class="built_in">require</span>(<span class="string">&quot;./models/feedback&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 程式出現重大錯誤時</span></span><br><span class="line">process.<span class="title function_">on</span>(<span class="string">&quot;uncaughtException&quot;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 記錄錯誤下來，等到服務都處理完後，停掉該 process</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Uncaughted Exception！&quot;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">  process.<span class="title function_">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">DB</span> = process.<span class="property">env</span>.<span class="property">DATABASE</span>.<span class="title function_">replace</span>(</span><br><span class="line">  <span class="string">&quot;&lt;password&gt;&quot;</span>,</span><br><span class="line">  process.<span class="property">env</span>.<span class="property">DATABASE_PASSWORD</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">mongoose</span><br><span class="line">  .<span class="title function_">connect</span>(<span class="variable constant_">DB</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;資料庫連接成功&quot;</span>))</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;MongoDB 連接失敗:&quot;</span>, err);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cors</span>());</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&quot;views&quot;</span>, path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;views&quot;</span>));</span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&quot;view engine&quot;</span>, <span class="string">&quot;ejs&quot;</span>);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">logger</span>(<span class="string">&quot;dev&quot;</span>));</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>());</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cookieParser</span>());</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;public&quot;</span>)));</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&quot;/&quot;</span>, indexRouter);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&quot;/users&quot;</span>, usersRouter);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&quot;/feedbacks&quot;</span>, feedbackRoute);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 404 錯誤</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="comment">// 回應一個包含錯誤訊息的 JSON 對象</span></span><br><span class="line">  res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">    <span class="attr">status</span>: <span class="string">&quot;error&quot;</span>,</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&quot;無此路由資訊&quot;</span>,</span><br><span class="line">    <span class="attr">path</span>: req.<span class="property">originalUrl</span>, <span class="comment">// 提供更多的上下文信息</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// * 開發環境 錯誤處理</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">resError</span> = (<span class="params">err, res</span>) =&gt; &#123;</span><br><span class="line">  res.<span class="title function_">status</span>(err.<span class="property">statusCode</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">    <span class="attr">message</span>: err.<span class="property">message</span>,</span><br><span class="line">    <span class="attr">statusCode</span>: err.<span class="property">statusCode</span>,</span><br><span class="line">    <span class="attr">isOperational</span>: err.<span class="property">isOperational</span>,</span><br><span class="line">    <span class="attr">stack</span>: err.<span class="property">stack</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">err, req, res, next</span>) &#123;</span><br><span class="line">  err.<span class="property">statusCode</span> = err.<span class="property">statusCode</span> || <span class="number">500</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (err.<span class="property">name</span> === <span class="string">&quot;ValidationError&quot;</span>) &#123;</span><br><span class="line">    err.<span class="property">message</span> = <span class="string">&quot;資料欄位未填寫正確，請重新輸入！&quot;</span>;</span><br><span class="line">    err.<span class="property">isOperational</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">resError</span>(err, res);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">resError</span>(err, res);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 未捕捉到的 catch</span></span><br><span class="line">process.<span class="title function_">on</span>(<span class="string">&quot;unhandledRejection&quot;</span>, <span class="function">(<span class="params">err, promise</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;未捕捉到的 rejection：&quot;</span>, promise, <span class="string">&quot;原因：&quot;</span>, err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 導出給 ./bin/www 使用</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = app;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</details>

<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>在本文中，我們學習了如何將重複的程式碼抽取到單獨的函式或模組中，提高程式碼的可讀性和可維護性。我們創建了 <code>handleSuccess</code>、<code>appError</code> 和 <code>handleErrorAsync</code> 三個工具函式，分別用於處理成功回應、創建自定義錯誤物件和處理異步函式的錯誤。<br>然後，我們在 Express 應用程式中實現了更全面的錯誤處理，包括全域的未捕獲異常處理、404 錯誤處理、開發環境錯誤處理、全域錯誤處理中間件以及未捕獲的 Promise 錯誤處理。<br>最後，我們在 Express 的路由中使用了這些工具函式，簡化了路由的錯誤處理邏輯，提高了程式碼的可讀性。<br>希望通過本文的學習，你能夠更好地理解如何抽取重複的程式碼，並實現更全面的錯誤處理。如果你有任何問題或建議，歡迎在評論區留言討論。</p>
<br />
<hr />
<br />

<blockquote>
<p>希望這篇文章有幫助到你，謝謝你的觀看，若有想看的系列也歡迎告訴我 😉</p>
</blockquote>
]]></content>
      <tags>
        <tag>2024IT鐵人賽</tag>
        <tag>Express</tag>
        <tag>API</tag>
      </tags>
  </entry>
  <entry>
    <title>[ 2024 IT 鐵人賽 DAY18 ] 手寫 API 文件？不用啦！Swagger 幫你搞定</title>
    <url>/2024/09/27/2024it/d18/</url>
    <content><![CDATA[<p>大家好，今天想和大家分享一個在 API 開發中非常有幫助的工具 —— Swagger。</p>
<span id="more"></span>

<p>首先，讓我們談談 API 文件。對於剛接觸後端開發的朋友來說，API 文件可能是個新概念。簡單來說，API 文件就像是使用說明書，它告訴其他開發者（尤其是前端工程師）如何使用你開發的功能。<br>然而，撰寫和維護 API 文件往往是一項挑戰。在開發過程中，API 可能會經常變動，這意味著文件也需要不斷更新。如果文件更新不及時或不完整，可能會導致團隊合作時的誤解和效率低下。<br>這就是 Swagger 派上用場的地方。Swagger 是一個能夠幫助我們自動生成 API 文件的工具。它的工作原理是這樣的：我們在寫程式碼的時候，只需要加入一些特定的註解，Swagger 就能根據這些註解自動生成詳細的 API 文件。<br>Swagger 不僅能生成文件，還提供了一個互動式的介面，讓其他開發者可以直接在上面測試 API。這大大提高了溝通效率，減少了可能的誤解。</p>
<p>我們就來看看如何在 Express 專案中使用 Swagger，讓 API 文件的撰寫變得更加輕鬆和有效率吧。</p>
<div class="cus-intro-box">
    <h2>房東不給養鸚鵡 - 那就用 Nuxt + Express + MongoDB 30 天寫一個全端鸚鵡專案。</h2>
    <p>挑戰人生第一次鐵人賽，就來個佛心分享 side project，從專案發想、規劃、設計、資料庫、開發到部署，技術使用 Nuxt 3、Tailwind CSS、Pinia、Axios、Express、MongoDB，製作一個前後端分離的鸚鵡專案，功能主要介紹食物計算機和聯絡我們，希望可以讓更多人瞭解專案的完整流程 ✨</p>
    <a href="https://ithelp.ithome.com.tw/users/20159686/ironman/7564" target="_blank">IT 全文章連結</a>
</div>

<h2 id="step1-安裝所需套件"><a href="#step1-安裝所需套件" class="headerlink" title="step1. 安裝所需套件"></a>step1. 安裝所需套件</h2><p>首先，我們要先安裝兩個超級重要的套件：</p>
<ul>
<li><code>swagger-autogen</code>：這個就是我們的文件小精靈，負責自動生成 Swagger 文件。</li>
<li><code>swagger-ui-express</code>：這個則是負責在我們的 Express 應用程式中提供一個漂亮的 Swagger UI 介面。<br>來，跟著我一起打開 VSCode 專案，再打開終端機，然後輸入以下指令：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install swagger-autogen swagger-ui-express</span><br></pre></td></tr></table></figure>

<h2 id="step2-建立-Swagger-配置文件"><a href="#step2-建立-Swagger-配置文件" class="headerlink" title="step2. 建立 Swagger 配置文件"></a>step2. 建立 Swagger 配置文件</h2><p>接下來，我們要在專案的根目錄下建立一個名叫 <code>swagger.js</code> 的文件。這個文件就像是 Swagger 的設定檔，告訴它要怎麼生成我們的 API 文件。<br>新增 <code>swagger.js</code> 檔案，然後把下面這些內容貼進去：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> swaggerAutogen = <span class="built_in">require</span>(<span class="string">&quot;swagger-autogen&quot;</span>)();</span><br><span class="line"><span class="keyword">const</span> dotenv = <span class="built_in">require</span>(<span class="string">&quot;dotenv&quot;</span>);</span><br><span class="line">dotenv.<span class="title function_">config</span>(&#123; <span class="attr">path</span>: <span class="string">&quot;./config.env&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> doc = &#123;</span><br><span class="line">  <span class="attr">info</span>: &#123;</span><br><span class="line">    <span class="attr">version</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&quot;parrot api&quot;</span>,</span><br><span class="line">    <span class="attr">description</span>: <span class="string">&quot;鸚鸚食堂 api&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// * 開發</span></span><br><span class="line">  <span class="attr">host</span>: <span class="string">&quot;localhost:3000&quot;</span>,</span><br><span class="line">  <span class="attr">schemes</span>: [<span class="string">&quot;http&quot;</span>, <span class="string">&quot;https&quot;</span>],</span><br><span class="line">  <span class="comment">// * 部署</span></span><br><span class="line">  <span class="comment">// host: &quot;parrot-api.2fishs.com&quot;,</span></span><br><span class="line">  <span class="comment">// schemes: [&quot;https&quot;],</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">basePath</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">  <span class="attr">tags</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;Parrot&quot;</span>,</span><br><span class="line">      <span class="attr">description</span>: <span class="string">&quot;鸚鸚&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;Info&quot;</span>,</span><br><span class="line">      <span class="attr">description</span>: <span class="string">&quot;資訊&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;Food&quot;</span>,</span><br><span class="line">      <span class="attr">description</span>: <span class="string">&quot;食物&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;Parrot&quot;</span>,</span><br><span class="line">      <span class="attr">description</span>: <span class="string">&quot;鸚鸚&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;Feedback&quot;</span>,</span><br><span class="line">      <span class="attr">description</span>: <span class="string">&quot;回饋&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> outputFile = <span class="string">&quot;./swagger_output.json&quot;</span>; <span class="comment">// 輸出的文件名稱</span></span><br><span class="line"><span class="keyword">const</span> endpointsFiles = [<span class="string">&quot;./app.js&quot;</span>]; <span class="comment">// 要指向的 API，通常使用 Express 直接指向到 app.js 就可以</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">swaggerAutogen</span>(outputFile, endpointsFiles, doc); <span class="comment">// swaggerAutogen 的方法</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>這個檔案看起來有點複雜，但別怕，讓我來解釋一下：</p>
<ul>
<li><code>info</code> 部分：這就是你的 API 的基本資料，像是版本號、標題和描述。</li>
<li><code>host</code> 和 <code>schemes</code>：這是告訴 Swagger 你的 API 住在哪裡，用什麼協議（http 或 https）。</li>
<li><code>basePath</code>：如果你的所有 API 都有共同的前綴，就可以寫在這裡。</li>
<li><code>tags</code>：這個超好用！你可以用它來幫你的 API 分類，讓文件看起來更有條理。</li>
</ul>
<blockquote>
<p>小技巧：如果你的專案有開發環境和正式環境，記得要切換 host 和 schemes 喔！我在這裡用註解的方式標記出來了，你可以根據需要自己調整。</p>
</blockquote>
<h2 id="step3-在-Express-應用程式中使用-Swagger"><a href="#step3-在-Express-應用程式中使用-Swagger" class="headerlink" title="step3. 在 Express 應用程式中使用 Swagger"></a>step3. 在 Express 應用程式中使用 Swagger</h2><p>現在，我們要讓 Express 知道我們要用 Swagger 了。打開你的 <code>app.js</code> 檔案，然後加入以下程式碼：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> swaggerUi = <span class="built_in">require</span>(<span class="string">&quot;swagger-ui-express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> swaggerFile = <span class="built_in">require</span>(<span class="string">&quot;./swagger_output.json&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ... (其他的 Express 設定)</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&quot;/api-docs&quot;</span>, swaggerUi.<span class="property">serve</span>, swaggerUi.<span class="title function_">setup</span>(swaggerFile));</span><br></pre></td></tr></table></figure>

<p>這幾行程式碼的意思是：我們要把 Swagger UI 掛在 <code>/api-docs</code> 這個路徑上。等一下當你的 Express 伺服器跑起來後，只要在瀏覽器輸入 <code>http://localhost:3000/api-docs</code>，就可以看到超酷的 API 文件了！</p>
<h2 id="step4-為-API-端點添加-Swagger-註解"><a href="#step4-為-API-端點添加-Swagger-註解" class="headerlink" title="step4. 為 API 端點添加 Swagger 註解"></a>step4. 為 API 端點添加 Swagger 註解</h2><p>接下來是最重要的一步！我們要教 Swagger 怎麼認識我們的 API。這就需要我們在每個 API 端點上加一些特殊的註解。<br>舉個例子，我們來看看 <code>routes/feedback.js</code> 裡面的新增回饋功能。我們可以這樣加註解：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 新增 feedback</span></span><br><span class="line">router.<span class="title function_">post</span>(</span><br><span class="line">  <span class="string">&quot;/&quot;</span>,</span><br><span class="line">  <span class="title function_">handleErrorAsync</span>(<span class="title function_">async</span> (req, res, next) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; contactPerson, phone, email, feedback &#125; = req.<span class="property">body</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 必填欄位驗證</span></span><br><span class="line">    <span class="keyword">if</span> (!contactPerson || !email || !feedback) &#123;</span><br><span class="line">      <span class="comment">// 使用 appError 函式創建錯誤物件</span></span><br><span class="line">      <span class="comment">// 狀態碼為 400，錯誤訊息為 &quot;姓名、信箱、內容為必填欄位&quot;</span></span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">next</span>(<span class="title function_">appError</span>(<span class="number">400</span>, <span class="string">&quot;姓名、信箱、內容為必填欄位&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> newFeedback = <span class="keyword">await</span> <span class="title class_">Feedback</span>.<span class="title function_">create</span>(&#123;</span><br><span class="line">      contactPerson,</span><br><span class="line">      phone,</span><br><span class="line">      email,</span><br><span class="line">      feedback,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 handleSuccess 函式處理成功回應</span></span><br><span class="line">    <span class="comment">// 狀態碼為 201，回應中包含新創建的 feedback 資料和成功訊息</span></span><br><span class="line">    <span class="title function_">handleSuccess</span>(res, newFeedback, <span class="string">&quot;新增成功&quot;</span>, <span class="number">201</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">/*  #swagger.tags = [&#x27;Feedback&#x27;]</span></span><br><span class="line"><span class="comment">	    #swagger.summary = &#x27;新增回饋&#x27;</span></span><br><span class="line"><span class="comment">	    #swagger.description = &#x27;新增回饋&#x27;</span></span><br><span class="line"><span class="comment">	    #swagger.parameters[&#x27;body&#x27;] = &#123;</span></span><br><span class="line"><span class="comment">	        in: &#x27;body&#x27;,</span></span><br><span class="line"><span class="comment">	        required: true,</span></span><br><span class="line"><span class="comment">	        schema:&#123;</span></span><br><span class="line"><span class="comment">	            $contactPerson:&#x27;姓名&#x27;,</span></span><br><span class="line"><span class="comment">	            $phone:&#x27;電話&#x27;,</span></span><br><span class="line"><span class="comment">	            $email: &#x27;信箱&#x27;,</span></span><br><span class="line"><span class="comment">	            $feedback: &#x27;內容&#x27;,</span></span><br><span class="line"><span class="comment">	            $source: &#x27;從哪裡得知此網站&#x27;,</span></span><br><span class="line"><span class="comment">	        &#125;</span></span><br><span class="line"><span class="comment">	    &#125;</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>這些註解看起來有點像魔法咒語，但其實很容易理解：</p>
<ul>
<li><code>tags</code>：告訴 Swagger 這個 API 屬於哪個分類。</li>
<li><code>summary</code> 和 <code>description</code>：簡單描述一下這個 API 是做什麼的。</li>
<li><code>parameters</code>：這裡列出了這個 API 需要的所有參數，包括它們的名稱、類型、是否必填等資訊。</li>
</ul>
<blockquote>
<p>小提醒：這些註解可以放在函式內的任何地方，只要確保它們被正確解析就可以了。多試幾次，你就會找到最適合的位置！</p>
</blockquote>
<h2 id="step5-生成-Swagger-文件"><a href="#step5-生成-Swagger-文件" class="headerlink" title="step5. 生成 Swagger 文件"></a>step5. 生成 Swagger 文件</h2><p>好了，現在我們已經準備好所有東西了，是時候讓 Swagger 發揮魔力了！打開終端機，輸入以下指令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node ./swagger.js</span><br></pre></td></tr></table></figure>

<p>噹噹！這個指令會執行我們剛剛寫的 <code>swagger.js</code>，然後根據我們的設定和 API 註解，生成一個叫 <code>swagger_output.json</code> 的檔案。<br><img src="https://ithelp.ithome.com.tw/upload/images/20240927/201596862h2WNkC14k.png" alt="https://ithelp.ithome.com.tw/upload/images/20240927/201596862h2WNkC14k.png"></p>
<blockquote>
<p>💡 小技巧：如果你覺得每次都要輸入 <code>node ./swagger.js</code> 很麻煩，我有一個好主意！我們可以在 <code>package.json</code> 裡加一個自訂指令：</p>
</blockquote>
<ul>
<li><p>打開 package.json，添加以下程式碼</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;swagger&quot;: &quot;node ./swagger.js&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>這樣以後你只要輸入 <code>npm run swagger</code> 就可以了，超方便的！<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20240927/20159686ItkVvOEZ3v.png" alt="https://ithelp.ithome.com.tw/upload/images/20240927/20159686ItkVvOEZ3v.png"></p>
</li>
</ul>
<h2 id="step6-訪問-Swagger-UI"><a href="#step6-訪問-Swagger-UI" class="headerlink" title="step6. 訪問 Swagger UI"></a>step6. 訪問 Swagger UI</h2><p>最後一步啦！啟動你的 Express 應用程式，然後在瀏覽器中輸入 <code>http://localhost:3000/api-docs</code>。哇！是不是看到一個超級炫炮的頁面了？沒錯，這就是 Swagger UI，你的 API 文件已經誕生了！<br><img src="https://ithelp.ithome.com.tw/upload/images/20240927/20159686Q2Va73ZJR8.png" alt="https://ithelp.ithome.com.tw/upload/images/20240927/20159686Q2Va73ZJR8.png"><img src="https://ithelp.ithome.com.tw/upload/images/20240927/201596864V0DucflvX.png" alt="https://ithelp.ithome.com.tw/upload/images/20240927/201596864V0DucflvX.png"></p>
<p>在這個頁面上，你可以瀏覽所有的 API 資訊，甚至可以直接在上面測試 API！超酷的吧？</p>
<h3 id="來試試看用-Swagger-測試-API"><a href="#來試試看用-Swagger-測試-API" class="headerlink" title="來試試看用 Swagger 測試 API"></a>來試試看用 Swagger 測試 API</h3><ul>
<li><p>點擊 “Try it out” 按鈕：<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20240927/20159686vnvgENDEDU.png" alt="https://ithelp.ithome.com.tw/upload/images/20240927/20159686vnvgENDEDU.png"></p>
</li>
<li><p>調整要測試的 body 內容，然後點擊 “Execute” 送出測試請求：<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20240927/20159686h2KElU0Wmk.png" alt="https://ithelp.ithome.com.tw/upload/images/20240927/20159686h2KElU0Wmk.png"></p>
</li>
<li><p>查看回應內容：<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20240927/20159686lBZOHQHsDA.png" alt="https://ithelp.ithome.com.tw/upload/images/20240927/20159686lBZOHQHsDA.png"></p>
</li>
</ul>
<blockquote>
<p>是不是超級方便？有了這個工具，前端工程師們再也不用跑來問你 API 怎麼用了！</p>
</blockquote>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>哇，我們終於完成了！回顧一下我們做了什麼：</p>
<ol>
<li>安裝了 Swagger 相關套件</li>
<li>設定了 Swagger 的配置檔</li>
<li>在 Express 中加入了 Swagger</li>
<li>為 API 加上了 Swagger 註解</li>
<li>生成了 API 文件</li>
<li>用 Swagger UI 測試了我們的 API<br>使用 Swagger 自動生成 API 文件真的超級方便！它不只省下了我們寫文件的時間，還提供了一個統一的格式，讓文件更容易維護。最棒的是，它還有互動式的介面，讓測試 API 變得超級容易！<br>希望這篇文章對你有幫助！如果你有任何問題，或是想分享你使用 Swagger 的心得，歡迎留言討論喔！讓我們一起讓 API 開發變得更簡單、更有趣吧！<br>記住，工程師不只會寫程式，還要會善用工具來提高效率。Swagger 就是這樣一個讓你事半功倍的好幫手！<br>讓我們一起成為會寫 API 文件的一極棒小菜鳥後端，讓前端夥伴不要每天都畫圈圈詛咒我們 🥹<br>大家有沒有想要更詳細補充的部分呢？歡迎在下方留言分享喔！我們一起學習、一起成長。明天見啦，掰掰～</li>
</ol>
<br />
<hr />
<br />

<blockquote>
<p>希望這篇文章有幫助到你，謝謝你的觀看，若有想看的系列也歡迎告訴我 😉</p>
</blockquote>
]]></content>
      <tags>
        <tag>2024IT鐵人賽</tag>
        <tag>Express</tag>
        <tag>API</tag>
        <tag>Swagger</tag>
      </tags>
  </entry>
  <entry>
    <title>[ 2024 IT 鐵人賽 DAY19 ] 後端專案實戰：鮮食 API 的資料模型、路由與測試</title>
    <url>/2024/09/28/2024it/d19/</url>
    <content><![CDATA[<p>大家好～<br>關於鸚鸚食堂會有一些超酷的功能，像是計算鸚鵡每日應攝取的鮮食量，以及一個聯絡表單，讓使用者可以跟我們互動。</p>
<span id="more"></span>

<p>除了之前我們已經完成的 POST Feedback API 之外，我們還需要完成以下幾個部分：</p>
<ul>
<li>定義鮮食 Model：就是我們要在 MongoDB 中儲存的鮮食資料的結構。</li>
<li>取得鮮食 API：讓前端可以從後端取得鮮食的資料。</li>
<li>計算應攝取量 API：根據使用者輸入的鸚鵡體重，計算出每日應攝取的鮮食量。</li>
<li>使用 Postman 測試 API：確保我們寫的 API 可以正常運作。<br>聽起來很刺激吧！讓我們打開 VSCode，一起開始這個精彩的旅程吧！</li>
</ul>
<div class="cus-intro-box">
    <h2>房東不給養鸚鵡 - 那就用 Nuxt + Express + MongoDB 30 天寫一個全端鸚鵡專案。</h2>
    <p>挑戰人生第一次鐵人賽，就來個佛心分享 side project，從專案發想、規劃、設計、資料庫、開發到部署，技術使用 Nuxt 3、Tailwind CSS、Pinia、Axios、Express、MongoDB，製作一個前後端分離的鸚鵡專案，功能主要介紹食物計算機和聯絡我們，希望可以讓更多人瞭解專案的完整流程 ✨</p>
    <a href="https://ithelp.ithome.com.tw/users/20159686/ironman/7564" target="_blank">IT 全文章連結</a>
</div>

<h2 id="定義鮮食-Model"><a href="#定義鮮食-Model" class="headerlink" title="定義鮮食 Model"></a>定義鮮食 Model</h2><p>首先，我們要定義鮮食的 Model。<br>Model 就是我們要在 MongoDB 中儲存的資料的結構。我們可以把它想像成一個物件，裡面有各種屬性，每個屬性都有自己的型別和預設值。</p>
<ol>
<li><p>在 <code>models</code> 資料夾中，建立一個新的檔案 <code>freshFood.js</code>。</p>
</li>
<li><p>在 <code>freshFood.js</code> 中，我們要定義我們的鮮食 Model。每一種鮮食都有以下這些屬性：</p>
<ul>
<li><code>name</code>：鮮食的名稱，型別是字串，必填。</li>
<li><code>calories</code>：每 100 克鮮食所含的卡路里，型別是數字，必填。</li>
<li><code>protein</code>：每 100 克鮮食所含的蛋白質，型別是數字，必填。</li>
<li><code>fat</code>：每 100 克鮮食所含的脂肪，型別是數字，必填。</li>
<li><code>carbs</code>：每 100 克鮮食所含的碳水化合物，型別是數字，必填。</li>
<li><code>maxIntake</code>：鸚鵡每日最大攝取量，型別是數字，必填。</li>
<li><code>note</code>：食用時的注意事項，型別是字串，必填。</li>
<li><code>nutrition</code>：鮮食的營養價值，型別是字串，必填。</li>
</ul>
<p> 我們可以用以下的程式碼來定義我們的鮮食 Model：</p>
 <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> freshFoodSchema = <span class="keyword">new</span> mongoose.<span class="title class_">Schema</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="comment">// 食物名稱</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">calories</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">Number</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="comment">// 每100克食物的熱量（卡路里）</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">protein</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">Number</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="comment">// 每100克食物中的蛋白質（克）</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">fat</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">Number</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="comment">// 每100克食物中的脂肪（克）</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">carbs</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">Number</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="comment">// 每100克食物中的碳水化合物（克）</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">maxIntake</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">Number</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="comment">// 每日最大攝取量（克）</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">note</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="comment">// 食用備註</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">nutrition</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="comment">// 營養價值</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;, &#123; <span class="attr">timestamps</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">FreshFood</span> = mongoose.<span class="title function_">model</span>(<span class="string">&#x27;FreshFood&#x27;</span>, freshFoodSchema);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">FreshFood</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>首先，我們引入了 <code>mongoose</code>，這是一個 Node.js 的 ODM 庫，可以讓我們方便地操作 MongoDB。</li>
<li>接著，我們建立了一個新的 Schema，也就是我們的鮮食 Model 的結構。Schema 中定義了各個欄位的名稱、型別、是否必填等屬性。</li>
<li>我們還在 Schema 的第二個參數中傳入了 <code>&#123; timestamps: true &#125;</code>，這樣 Mongoose 就會自動為我們加上 <code>createdAt</code> 和 <code>updatedAt</code> 這兩個時間戳欄位。</li>
<li>最後，我們用 <code>mongoose.model()</code> 方法，把 Schema 轉換成一個 Model，並將其命名為 <code>FreshFood</code>。這樣，我們就可以在其他地方使用這個 Model 了。<br> 相信大家對 Model 已經有了一個基本的了解了。接下來，讓我們看看如何取得鮮食的資料吧！</li>
</ul>
</li>
</ol>
<h2 id="取得鮮食-API"><a href="#取得鮮食-API" class="headerlink" title="取得鮮食 API"></a>取得鮮食 API</h2><p>現在，我們要建立一個 API，讓前端可以從後端取得鮮食的資料。</p>
<ol>
<li><p>在 <code>routes</code> 資料夾中，建立一個新的檔案 <code>freshFood.js</code>。</p>
</li>
<li><p>在 <code>freshFood.js</code> 中，我們要定義我們的 API。我們先從取得所有鮮食的 API 開始：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const express = require(&quot;express&quot;);</span><br><span class="line">const router = express.Router();</span><br><span class="line">const FreshFood = require(&quot;../models/freshFood&quot;);</span><br><span class="line">const handleSuccess = require(&quot;../utils/handleSuccess&quot;);</span><br><span class="line">const handleErrorAsync = require(&quot;../utils/handleErrorAsync&quot;);</span><br><span class="line">const appError = require(&quot;../utils/appError&quot;);</span><br><span class="line"></span><br><span class="line">// 取得所有 freshFood</span><br><span class="line">router.get(</span><br><span class="line">  &quot;/&quot;,</span><br><span class="line">  handleErrorAsync(async (req, res, next) =&gt; &#123;</span><br><span class="line">    // 使用 find() 方法從資料庫中取得所有 freshFoods</span><br><span class="line">    const freshFoods = await FreshFood.find();</span><br><span class="line"></span><br><span class="line">    handleSuccess(res, freshFoods, &quot;取得所有 freshFoods 成功&quot;, 200);</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure>
<p> 這段程式碼的意思是：</p>
<ul>
<li>我們引入了 <code>express</code>、<code>router</code>、<code>FreshFood</code> 等模組和工具函數。</li>
<li>我們定義了一個 GET 請求的路由，路徑是 <code>/</code>，表示這個 API 的路徑是 <code>/freshFoods</code>。</li>
<li>在路由處理函數中，我們用 <code>FreshFood.find()</code> 方法，從資料庫中取得所有的鮮食資料。</li>
<li>最後，我們用 <code>handleSuccess()</code> 方法，回傳一個成功的 response，包含了取得的鮮食資料、成功訊息和狀態碼。</li>
</ul>
</li>
<li><p>接下來，我們要在 <code>app.js</code> 中掛載這個路由。打開 <code>app.js</code>，加入以下程式碼：</p>
 <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> freshFoodRoute = <span class="built_in">require</span>(<span class="string">&quot;./routes/freshFood&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&quot;/freshfoods&quot;</span>, freshfoodRoute);</span><br></pre></td></tr></table></figure>
<p> 這樣，我們就完成了取得鮮食 API 的定義和掛載。</p>
</li>
<li><p>現在，讓我們啟動伺服器，測試一下我們的 API 吧！在終端機中，輸入 <code>npm start</code>，啟動伺服器。</p>
</li>
</ol>
<h2 id="測試取得鮮食-API"><a href="#測試取得鮮食-API" class="headerlink" title="測試取得鮮食 API"></a>測試取得鮮食 API</h2><ol>
<li><p>打開 Postman，新建一個 GET 請求，URL 設為 <code>http://127.0.0.1:3000/freshfoods/</code>。</p>
</li>
<li><p>點選「Send」按鈕，發送請求。你會看到類似下面這樣的回應：<br> 咦，怎麼 <code>data</code> 是空的呢？這是因為我們的資料庫中還沒有任何鮮食資料啊！<br> <img src="https://ithelp.ithome.com.tw/upload/images/20240928/20159686HTBmuKNBMm.png" alt="https://ithelp.ithome.com.tw/upload/images/20240928/20159686HTBmuKNBMm.png"></p>
</li>
<li><p>別擔心，我這裡有一些預先準備好的鮮食資料，我們可以把它們匯入到資料庫中。這裡有六種鮮食的資料：</p>
</li>
<li><p>如果你想要更多的資料，也可以自己搜集和整理。</p>
 <details>
 <summary>範例資料 (可以自己存成 JSON 檔案，前幾天有教過)</summary>
     <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;向日葵籽&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;calories&quot;</span><span class="punctuation">:</span> <span class="number">584</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;protein&quot;</span><span class="punctuation">:</span> <span class="number">20.78</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;fat&quot;</span><span class="punctuation">:</span> <span class="number">51.46</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;carbs&quot;</span><span class="punctuation">:</span> <span class="number">20</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;maxIntake&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;note&quot;</span><span class="punctuation">:</span> <span class="string">&quot;生食&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;nutrition&quot;</span><span class="punctuation">:</span> <span class="string">&quot;向日葵籽富含健康脂肪、蛋白質及纖維，有助於心血管健康和提供長時間的能量。&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;南瓜籽&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;calories&quot;</span><span class="punctuation">:</span> <span class="number">559</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;protein&quot;</span><span class="punctuation">:</span> <span class="number">30.23</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;fat&quot;</span><span class="punctuation">:</span> <span class="number">49.05</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;carbs&quot;</span><span class="punctuation">:</span> <span class="number">10.71</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;maxIntake&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;note&quot;</span><span class="punctuation">:</span> <span class="string">&quot;生食&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;nutrition&quot;</span><span class="punctuation">:</span> <span class="string">&quot;南瓜籽含有豐富的鋅、鐵和抗氧化劑，有助於增強免疫系統和促進骨骼健康。&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;蘋果&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;calories&quot;</span><span class="punctuation">:</span> <span class="number">52</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;protein&quot;</span><span class="punctuation">:</span> <span class="number">0.26</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;fat&quot;</span><span class="punctuation">:</span> <span class="number">0.17</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;carbs&quot;</span><span class="punctuation">:</span> <span class="number">13.81</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;maxIntake&quot;</span><span class="punctuation">:</span> <span class="number">20</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;note&quot;</span><span class="punctuation">:</span> <span class="string">&quot;生食，去核&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;nutrition&quot;</span><span class="punctuation">:</span> <span class="string">&quot;蘋果含有豐富的維他命C、纖維和抗氧化劑，有助於提高免疫力和促進消化健康。&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;胡蘿蔔&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;calories&quot;</span><span class="punctuation">:</span> <span class="number">41</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;protein&quot;</span><span class="punctuation">:</span> <span class="number">0.93</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;fat&quot;</span><span class="punctuation">:</span> <span class="number">0.24</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;carbs&quot;</span><span class="punctuation">:</span> <span class="number">9.58</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;maxIntake&quot;</span><span class="punctuation">:</span> <span class="number">15</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;note&quot;</span><span class="punctuation">:</span> <span class="string">&quot;生食或煮熟食用&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;nutrition&quot;</span><span class="punctuation">:</span> <span class="string">&quot;胡蘿蔔富含β-胡蘿蔔素和維他命A，有助於改善視力和促進皮膚健康。&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;杏仁&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;calories&quot;</span><span class="punctuation">:</span> <span class="number">579</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;protein&quot;</span><span class="punctuation">:</span> <span class="number">21.15</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;fat&quot;</span><span class="punctuation">:</span> <span class="number">49.93</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;carbs&quot;</span><span class="punctuation">:</span> <span class="number">21.55</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;maxIntake&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;note&quot;</span><span class="punctuation">:</span> <span class="string">&quot;生食或輕微烘烤後食用&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;nutrition&quot;</span><span class="punctuation">:</span> <span class="string">&quot;杏仁富含維他命E、健康脂肪和蛋白質，有助於降低膽固醇和增強大腦功能。&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;花生&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;calories&quot;</span><span class="punctuation">:</span> <span class="number">567</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;protein&quot;</span><span class="punctuation">:</span> <span class="number">25.8</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;fat&quot;</span><span class="punctuation">:</span> <span class="number">49.24</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;carbs&quot;</span><span class="punctuation">:</span> <span class="number">16.13</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;maxIntake&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;note&quot;</span><span class="punctuation">:</span> <span class="string">&quot;生食或輕微烘烤後食用&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;nutrition&quot;</span><span class="punctuation">:</span> <span class="string">&quot;花生含有豐富的蛋白質、健康脂肪和纖維，有助於促進心臟健康和提供持久能量。&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
 </details></li>
</ol>
<h2 id="匯入鮮食資料"><a href="#匯入鮮食資料" class="headerlink" title="匯入鮮食資料"></a>匯入鮮食資料</h2><ol>
<li><p>打開 MongoDB Compass，選擇要匯入資料的資料庫和 Collection。</p>
</li>
<li><p>點選「Add Data」按鈕，選擇「Import File」，然後選擇剛剛的 JSON 檔案匯入。<br> <img src="https://ithelp.ithome.com.tw/upload/images/20240928/20159686Rrzp345s2E.png" alt="https://ithelp.ithome.com.tw/upload/images/20240928/20159686Rrzp345s2E.png"><br> <img src="https://ithelp.ithome.com.tw/upload/images/20240928/20159686CXQQwXfNTm.png" alt="https://ithelp.ithome.com.tw/upload/images/20240928/20159686CXQQwXfNTm.png"></p>
</li>
<li><p>回到 Postman，再次發送 GET 請求到 <code>http://127.0.0.1:3000/freshfoods/</code>。<br> 這次，你應該能看到剛剛匯入的鮮食資料了：<br> <img src="https://ithelp.ithome.com.tw/upload/images/20240928/20159686vTgpRUjuNe.png" alt="https://ithelp.ithome.com.tw/upload/images/20240928/20159686vTgpRUjuNe.png"></p>
<blockquote>
<p>看到了嗎？我們的 API 已經可以正常工作了！</p>
</blockquote>
</li>
</ol>
<h3 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h3><p>哇，我們今天完成了好多事情啊！我們定義了鮮食 Model，建立了取得鮮食的 API，還學會了如何匯入資料到 MongoDB，以及如何用 Postman 測試 API。<br>我相信，通過今天的學習，大家對如何在 Express 專案中建立 API，以及如何與 MongoDB 互動，已經有了一個基本的了解。這些都是作為一個後端工程師必備的技能哦！<br>當然，我們今天只是完成了一小部分。在下一篇文章中，我們會繼續探索如何建立計算每日應攝取量的 API，以及如何讓前端和後端協同工作。<br>大家有沒有想要更詳細補充的部分呢？歡迎在下方留言分享喔！我們一起學習、一起成長。明天見啦，掰掰～</p>
<br />
<hr />
<br />

<blockquote>
<p>希望這篇文章有幫助到你，謝謝你的觀看，若有想看的系列也歡迎告訴我 😉</p>
</blockquote>
]]></content>
      <tags>
        <tag>2024IT鐵人賽</tag>
        <tag>MongoDB</tag>
        <tag>Express</tag>
        <tag>API</tag>
        <tag>Postman</tag>
      </tags>
  </entry>
  <entry>
    <title>[ 2024 IT 鐵人賽 DAY2 ] 前後端分離攻略！30天專案技術配備大解密</title>
    <url>/2024/09/11/2024it/d2/</url>
    <content><![CDATA[<p>哈囉大家好！我是 2魚，正在參加 2024 年的 iT 邦幫忙鐵人賽！這是我的第二篇文章喔～如果還沒看過第一篇的朋友，可以先回去看看我參賽的緣起，以及接下來 30 天會寫些什麼內容唷！<br>今天要來跟各位分享的是我這次專案的技術選擇。身為一個剛出社會沒多久的菜鳥工程師，選對趁手的工具真的超重要的啦！畢竟要用這些工具奮戰 30 天，不順手怎麼行？來看看我挑了哪些神兵利器吧！</p>
<span id="more"></span>

<div class="cus-intro-box">
    <h2>房東不給養鸚鵡 - 那就用 Nuxt + Express + MongoDB 30 天寫一個全端鸚鵡專案。</h2>
    <p>挑戰人生第一次鐵人賽，就來個佛心分享 side project，從專案發想、規劃、設計、資料庫、開發到部署，技術使用 Nuxt 3、Tailwind CSS、Pinia、Axios、Express、MongoDB，製作一個前後端分離的鸚鵡專案，功能主要介紹食物計算機和聯絡我們，希望可以讓更多人瞭解專案的完整流程 ✨</p>
    <a href="https://ithelp.ithome.com.tw/users/20159686/ironman/7564" target="_blank">IT 全文章連結</a>
</div>

<h2 id="專案技術選擇總覽"><a href="#專案技術選擇總覽" class="headerlink" title="專案技術選擇總覽"></a>專案技術選擇總覽</h2><p>在這個專案中，我主要選用自己比較熟悉的技術來實作。這樣做有兩個好處：</p>
<ol>
<li>可以更加精進自己的技術能力（工程師不進則退，不斷練習是必須的呀！）</li>
<li>能確保專案順利完成（總不能 deadline 還沒到就先倒下了吧，對吧？）<br>接下來就來一一介紹我選的這些工具囉！</li>
</ol>
<h2 id="前端："><a href="#前端：" class="headerlink" title="前端："></a>前端：</h2><h3 id="Nuxt3-基於-Vue-js-的-SSR-框架，強化-SEO-效能"><a href="#Nuxt3-基於-Vue-js-的-SSR-框架，強化-SEO-效能" class="headerlink" title="Nuxt3 - 基於 Vue.js 的 SSR 框架，強化 SEO 效能"></a>Nuxt3 - 基於 Vue.js 的 SSR 框架，強化 SEO 效能</h3><ul>
<li>這可是前端框架的大紅人！它不只能讓我們輕鬆打造 SPA（單頁應用程式），還自帶 SSR（伺服器端渲染）功能，讓我們的網站在 SEO 上更有優勢。對於想要讓自己的作品被更多人看到的我們來說，這簡直是必備良藥啊！</li>
</ul>
<h3 id="TypeScript-靜態型別檢查，提升程式碼可靠度"><a href="#TypeScript-靜態型別檢查，提升程式碼可靠度" class="headerlink" title="TypeScript - 靜態型別檢查，提升程式碼可靠度"></a>TypeScript - 靜態型別檢查，提升程式碼可靠度</h3><ul>
<li>如果說 JavaScript 是調皮的小孩，那 TypeScript 就是帶著眼鏡、一本正經的大哥哥。它幫我們在寫程式時就能抓出一堆潛在問題，不用等到執行才發現錯誤，簡直是除錯神器！</li>
</ul>
<h3 id="Pinia-Vue-3-的狀態管理函式庫，用於全域狀態管理"><a href="#Pinia-Vue-3-的狀態管理函式庫，用於全域狀態管理" class="headerlink" title="Pinia - Vue 3 的狀態管理函式庫，用於全域狀態管理"></a>Pinia - Vue 3 的狀態管理函式庫，用於全域狀態管理</h3><ul>
<li>這傢伙是 Vuex 的新世代接班人。它讓管理全域狀態變得超級輕鬆，特別是搭配 TypeScript 使用時，簡直是如虎添翼！對於想要讓程式碼更好維護的我來說，Pinia 絕對是不二首選。</li>
</ul>
<h3 id="Axios-基於-Promise-的-HTTP-客戶端，簡化非同步請求操作"><a href="#Axios-基於-Promise-的-HTTP-客戶端，簡化非同步請求操作" class="headerlink" title="Axios - 基於 Promise 的 HTTP 客戶端，簡化非同步請求操作"></a>Axios - 基於 Promise 的 HTTP 客戶端，簡化非同步請求操作</h3><ul>
<li>在前端打 API 幾乎是家常便飯，而 Axios 就是讓這件事變得超級簡單的好幫手。它的語法直覺、功能強大，用起來就是舒服！</li>
</ul>
<h3 id="Tailwind-CSS-實用優先的-CSS-框架，加速-UI-開發"><a href="#Tailwind-CSS-實用優先的-CSS-框架，加速-UI-開發" class="headerlink" title="Tailwind CSS - 實用優先的 CSS 框架，加速 UI 開發"></a>Tailwind CSS - 實用優先的 CSS 框架，加速 UI 開發</h3><ul>
<li>老實說，我以前對 CSS 可說是苦手中的苦手。但自從遇見 Tailwind CSS，我彷彿打開了新世界的大門！它讓我能用 class 的方式快速堆疊出漂亮的介面，開發效率直接起飛！</li>
</ul>
<h3 id="Vercel-零配置的前端部署與託管平台"><a href="#Vercel-零配置的前端部署與託管平台" class="headerlink" title="Vercel - 零配置的前端部署與託管平台"></a>Vercel - 零配置的前端部署與託管平台</h3><ul>
<li>身為一個懶惰的工程師（咳咳，我是說效率至上的工程師），Vercel 絕對是我的最愛。只要一個 git push，網站就自動部署完成，根本是偷懶神器啊！</li>
</ul>
<h2 id="後端："><a href="#後端：" class="headerlink" title="後端："></a>後端：</h2><h3 id="Express-js-輕量級-Node-js-Web-應用程式框架"><a href="#Express-js-輕量級-Node-js-Web-應用程式框架" class="headerlink" title="Express.js - 輕量級 Node.js Web 應用程式框架"></a>Express.js - 輕量級 Node.js Web 應用程式框架</h3><ul>
<li>輕巧靈活又強大，Express.js 絕對是後端開發的好夥伴。它讓我能快速搭建出穩定的 API 服務，為前後端分離的架構打下堅實基礎。</li>
</ul>
<h3 id="Mongoose-MongoDB-物件模型工具，簡化資料操作"><a href="#Mongoose-MongoDB-物件模型工具，簡化資料操作" class="headerlink" title="Mongoose - MongoDB 物件模型工具，簡化資料操作"></a>Mongoose - MongoDB 物件模型工具，簡化資料操作</h3><ul>
<li>在 MongoDB 的海洋中航行，Mongoose 就是我的指南針。它讓我能用更直覺的方式操作資料庫，大大減少了出錯的機會。</li>
</ul>
<h3 id="Render-全託管的雲端平台，用於後端服務部署"><a href="#Render-全託管的雲端平台，用於後端服務部署" class="headerlink" title="Render - 全託管的雲端平台，用於後端服務部署"></a>Render - 全託管的雲端平台，用於後端服務部署</h3><ul>
<li>話說回來，後端部署其實一直是我的痛點。直到遇見 Render，一切都變得如此簡單。它幫我處理了大部分的底層細節，讓我能專注在開發上，簡直是後端部署的及時雨啊！</li>
</ul>
<h2 id="資料庫："><a href="#資料庫：" class="headerlink" title="資料庫："></a>資料庫：</h2><h3 id="MongoDB-文件導向的-NoSQL-資料庫"><a href="#MongoDB-文件導向的-NoSQL-資料庫" class="headerlink" title="MongoDB - 文件導向的 NoSQL 資料庫"></a>MongoDB - 文件導向的 NoSQL 資料庫</h3><ul>
<li>身為一個經常面對結構不固定資料的開發者，MongoDB 的彈性簡直是救星。它讓我能自由地儲存各種形式的資料，不被固定的表格結構所束縛。</li>
</ul>
<h3 id="Firebase-Storage-Google-提供的雲端儲存服務，用於媒體檔案管理"><a href="#Firebase-Storage-Google-提供的雲端儲存服務，用於媒體檔案管理" class="headerlink" title="Firebase Storage - Google 提供的雲端儲存服務，用於媒體檔案管理"></a>Firebase Storage - Google 提供的雲端儲存服務，用於媒體檔案管理</h3><ul>
<li>要處理大量的圖片、影片等媒體檔案，Firebase Storage 絕對是得力助手。它不只容易整合，還幫我省下了自己架設檔案伺服器的麻煩，讚啦！</li>
</ul>
<h2 id="其他："><a href="#其他：" class="headerlink" title="其他："></a>其他：</h2><h3 id="GitHub-分散式版本控制系統，用於程式碼協作和管理"><a href="#GitHub-分散式版本控制系統，用於程式碼協作和管理" class="headerlink" title="GitHub - 分散式版本控制系統，用於程式碼協作和管理"></a>GitHub - 分散式版本控制系統，用於程式碼協作和管理</h3><ul>
<li>身為一個現代工程師，GitHub 已經是必備技能了吧？它不只是放程式碼的地方，更是我展示作品、學習他人專案的重要平台。</li>
</ul>
<h3 id="Whimsical-線上繪圖工具，用於快速製作線稿"><a href="#Whimsical-線上繪圖工具，用於快速製作線稿" class="headerlink" title="Whimsical - 線上繪圖工具，用於快速製作線稿"></a>Whimsical - 線上繪圖工具，用於快速製作線稿</h3><ul>
<li>有時候腦中的想法實在太多太亂，Whimsical 就是我整理思緒的好幫手。它讓我能快速畫出流程圖或線稿，把想法具象化。</li>
</ul>
<h3 id="Figma-協作式介面設計工具"><a href="#Figma-協作式介面設計工具" class="headerlink" title="Figma - 協作式介面設計工具"></a>Figma - 協作式介面設計工具</h3><ul>
<li>雖然我主要是寫程式，但有時候也會需要動手設計一下介面。Figma 的直覺操作讓我這個程式宅也能輕鬆上手，設計出不失水準的 UI 呢！</li>
</ul>
<h3 id="Excel-電子試算表軟體，用於資料整理和分析"><a href="#Excel-電子試算表軟體，用於資料整理和分析" class="headerlink" title="Excel - 電子試算表軟體，用於資料整理和分析"></a>Excel - 電子試算表軟體，用於資料整理和分析</h3><ul>
<li>別小看這個看似普通的辦公軟體。在處理大量數據、製作簡單的資料視覺化時，Excel 依舊是我得力的好幫手。</li>
</ul>
<p>以上就是我這次專案選用的主要技術工具啦！選擇這些工具不只是因為熟悉，更重要的是它們之間能夠良好地協作，讓開發流程更順暢。接下來的文章，我會更深入地介紹如何運用這些工具，敬請期待喔！</p>
<p>對了，如果你也有自己喜歡的開發工具，歡迎在下面留言分享唷！我們一起交流、一起進步！明天見啦，掰掰～</p>
<br />
<hr />
<br />

<blockquote>
<p>希望這篇文章有幫助到你，謝謝你的觀看，若有想看的系列也歡迎告訴我 😉</p>
</blockquote>
]]></content>
      <tags>
        <tag>2024IT鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>[ 2024 IT 鐵人賽 DAY20 ] 後端專案實戰：鸚鵡飲食計算 API 開發全紀錄</title>
    <url>/2024/09/29/2024it/d20/</url>
    <content><![CDATA[<p>嗨，大家好！昨天我們學會了如何定義鮮食的 Model，以及如何建立一個 API 來取得資料庫中的鮮食資料。相信大家對於如何在 Express 專案中建立 API，以及如何與 MongoDB 互動，已經有了一個基本的了解了。<br>今天，我們要繼續探索，學習如何建立一個計算每日應攝取量的 API。這個 API 會根據使用者輸入的體重和活動量，以及選擇的鮮食，計算出每日應攝取的營養素量和熱量。這樣一來，我們就可以給使用者一個參考，讓他們知道自己的鸚鵡每天應該吃多少食物，攝取多少營養素。</p>
<span id="more"></span>

<p>在開始寫程式之前，我們先來了解一下如何計算鸚鵡的每日所需熱量和營養素吧！</p>
<div class="cus-intro-box">
    <h2>房東不給養鸚鵡 - 那就用 Nuxt + Express + MongoDB 30 天寫一個全端鸚鵡專案。</h2>
    <p>挑戰人生第一次鐵人賽，就來個佛心分享 side project，從專案發想、規劃、設計、資料庫、開發到部署，技術使用 Nuxt 3、Tailwind CSS、Pinia、Axios、Express、MongoDB，製作一個前後端分離的鸚鵡專案，功能主要介紹食物計算機和聯絡我們，希望可以讓更多人瞭解專案的完整流程 ✨</p>
    <a href="https://ithelp.ithome.com.tw/users/20159686/ironman/7564" target="_blank">IT 全文章連結</a>
</div>

<h2 id="計算鸚鵡每日所需熱量"><a href="#計算鸚鵡每日所需熱量" class="headerlink" title="計算鸚鵡每日所需熱量"></a>計算鸚鵡每日所需熱量</h2><p>要計算鸚鵡每日所需的熱量，我們需要知道以下幾個數據：</p>
<ol>
<li>鸚鵡的體重（單位：克）</li>
<li>鸚鵡的活動量（低、中、高）</li>
<li>鸚鵡的基礎代謝率（BMR）<br>其中，BMR 是指在完全休息狀態下，維持身體基本功能所需的最低熱量。我們可以使用一個專門針對鸚鵡設計的 BMR 計算公式來計算鸚鵡的 BMR：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BMR = K * (weight / 1000)^0.75</span><br></pre></td></tr></table></figure>

<p>其中，<code>K</code> 是一個常數，代表鸚鵡的代謝系數，通常取 175。<code>weight</code> 是鸚鵡的體重，單位是克。我們將體重除以 1000，轉換為公斤，然後取 0.75 次方。<br>有了 BMR 後，我們還需要根據鸚鵡的活動量來調整 BMR，得到鸚鵡每日所需的總熱量。我們可以定義三個活動量等級，每個等級對應一個調整係數：</p>
<ul>
<li>低活動量：1.2</li>
<li>中活動量：1.4</li>
<li>高活動量：1.6<br>我們將 BMR 乘以對應的調整係數，就得到了鸚鵡每日所需的總熱量。</li>
</ul>
<h2 id="計算鸚鵡每日所需營養素"><a href="#計算鸚鵡每日所需營養素" class="headerlink" title="計算鸚鵡每日所需營養素"></a>計算鸚鵡每日所需營養素</h2><p>除了熱量，我們還需要計算鸚鵡每日所需的三大營養素：蛋白質、脂肪、碳水化合物。我們可以假設這三大營養素在總熱量中所占的比例如下：</p>
<ul>
<li>蛋白質：20%</li>
<li>脂肪：20%</li>
<li>碳水化合物：60%<br>我們將每日所需總熱量乘以這些百分比，就得到了每種營養素所需的熱量。然後，我們再將這些熱量除以每克營養素的熱量（蛋白質和碳水化合物每克 4 卡，脂肪每克 9 卡），就得到了每日所需的三大營養素的克數。</li>
</ul>
<h2 id="計算鮮食可提供的營養素和熱量"><a href="#計算鮮食可提供的營養素和熱量" class="headerlink" title="計算鮮食可提供的營養素和熱量"></a>計算鮮食可提供的營養素和熱量</h2><p>現在，我們知道了如何計算鸚鵡每日所需的熱量和營養素。接下來，我們要計算選擇的鮮食可以提供多少營養素和熱量。<br>首先，我們需要從鮮食的 Model 中取出以下數據：</p>
<ul>
<li>食物的熱量（每 100 克）</li>
<li>食物的蛋白質含量（每 100 克）</li>
<li>食物的脂肪含量（每 100 克）</li>
<li>食物的碳水化合物含量（每 100 克）</li>
<li>食物的最大攝取量（單位：克）<br>然後，我們可以計算在最大攝取量下，這個食物可以提供多少熱量。同時，我們也可以計算在不超過每日所需熱量的情況下，這個食物最多可以攝取多少克。<br>有了食物的最大攝取量後，我們可以計算這個食物可以提供多少克的三大營養素。我們將最大攝取量乘以食物的營養素含量百分比，就得到了每種營養素的攝取量。</li>
</ul>
<p>接著，我們可以計算這個食物提供的總熱量。我們將每種營養素的攝取量乘以其熱量，然後相加，就得到了總熱量。</p>
<p>最後，我們可以計算這個食物提供的熱量與每日所需熱量的差異。這個差異可以讓使用者知道，如果只吃這一種食物，是否能滿足每日所需的熱量。</p>
<h2 id="開始寫程式"><a href="#開始寫程式" class="headerlink" title="開始寫程式"></a>開始寫程式</h2><p>好了，現在我們對計算鸚鵡每日所需熱量和營養素的方法有了一個大致的了解。讓我們開始寫程式吧！</p>
<h3 id="第一步：定義路由和-Swagger-註解"><a href="#第一步：定義路由和-Swagger-註解" class="headerlink" title="第一步：定義路由和 Swagger 註解"></a>第一步：定義路由和 Swagger 註解</h3><p>首先，我們要定義一個 POST 請求的路由，路徑是 <code>/calculatefood</code>。這個路由會接收一個 JSON 格式的請求體，其中包含了以下幾個欄位：</p>
<ul>
<li><code>weight</code>：鸚鵡的體重，單位是克。</li>
<li><code>activity</code>：鸚鵡的活動量，可以是 <code>&quot;low&quot;</code>、<code>&quot;medium&quot;</code> 或 <code>&quot;high&quot;</code>。</li>
<li><code>foodId</code>：要計算的鮮食的 ID。<br>我們使用 Swagger 的註解來描述這個 API 的詳細信息，包括請求體的結構。這樣，其他人在使用我們的 API 時，就可以直接在 Swagger UI 中看到這些信息，方便他們理解和使用我們的 API。</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">router.<span class="title function_">post</span>(</span><br><span class="line">  <span class="string">&quot;/calculatefood&quot;</span>,</span><br><span class="line">  <span class="title function_">handleErrorAsync</span>(<span class="title function_">async</span> (req, res, next) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 路由處理函數的內容</span></span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="第二步：取得請求參數並進行驗證"><a href="#第二步：取得請求參數並進行驗證" class="headerlink" title="第二步：取得請求參數並進行驗證"></a>第二步：取得請求參數並進行驗證</h3><p>進入路由處理函數後，我們首先從請求體中取出 <code>weight</code>、<code>activity</code> 和 <code>foodId</code> 這三個參數。然後，我們對這些參數進行驗證，確保它們都是必填的，並且 <code>foodId</code> 對應的鮮食是存在的。如果驗證失敗，我們就使用 <code>appError</code> 函數返回一個錯誤訊息。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 取得參數</span></span><br><span class="line"><span class="keyword">const</span> &#123; weight, activity, foodId &#125; = req.<span class="property">body</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 驗證必填欄位</span></span><br><span class="line"><span class="keyword">if</span> (!weight || !activity || !foodId) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">next</span>(<span class="title function_">appError</span>(<span class="number">400</span>, <span class="string">&quot;weight, activity, foodId 為必填&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 驗證食物是否存在</span></span><br><span class="line"><span class="keyword">const</span> freshFood = <span class="keyword">await</span> <span class="title class_">FreshFood</span>.<span class="title function_">findById</span>(foodId);</span><br><span class="line"><span class="keyword">if</span> (!freshFood) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">next</span>(<span class="title function_">appError</span>(<span class="number">400</span>, <span class="string">&quot;食物不存在&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="第三步：計算-BMR-和每日所需熱量"><a href="#第三步：計算-BMR-和每日所需熱量" class="headerlink" title="第三步：計算 BMR 和每日所需熱量"></a>第三步：計算 BMR 和每日所需熱量</h3><p>接下來，我們開始計算鸚鵡的基礎代謝率（BMR）。我們將鸚鵡的體重轉換為公斤，然後帶入 BMR 計算公式計算出 BMR。<br>然後，我們根據鸚鵡的活動量來調整 BMR。我們使用一個 <code>switch</code> 語句，根據 <code>activity</code> 的值來決定活動量對應的係數。然後，我們將 BMR 乘以這個係數，得到調整後的 BMR。<br>調整後的 BMR 就是鸚鵡每日所需的總熱量。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用新的 BMR 計算公式</span></span><br><span class="line"><span class="keyword">const</span> K = <span class="number">175</span>; <span class="comment">// 鸚鵡的 K 值</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">BMR</span> = K * <span class="title class_">Math</span>.<span class="title function_">pow</span>(weight / <span class="number">1000</span>, <span class="number">0.75</span>); <span class="comment">// 體重轉換為公斤並計算基礎代謝率</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 根據活動水平調整BMR</span></span><br><span class="line"><span class="keyword">let</span> activityLevel = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">switch</span> (activity) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;low&quot;</span>:</span><br><span class="line">    activityLevel = <span class="number">1.2</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;medium&quot;</span>:</span><br><span class="line">    activityLevel = <span class="number">1.4</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;high&quot;</span>:</span><br><span class="line">    activityLevel = <span class="number">1.6</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> adjustedBMR = <span class="variable constant_">BMR</span> * activityLevel; <span class="comment">// 調整後的BMR</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 計算每日所需熱量</span></span><br><span class="line"><span class="keyword">let</span> dailyCalories = adjustedBMR;</span><br></pre></td></tr></table></figure>

<h3 id="第四步：計算每日所需營養素"><a href="#第四步：計算每日所需營養素" class="headerlink" title="第四步：計算每日所需營養素"></a>第四步：計算每日所需營養素</h3><p>有了每日所需熱量後，我們可以計算鸚鵡每日所需的三大營養素（蛋白質、脂肪、碳水化合物）的量。我們假設蛋白質和脂肪各占總熱量的 20%，碳水化合物占 60%。<br>然後，我們將每日所需熱量乘以這些百分比，再除以每克營養素的熱量（蛋白質和碳水化合物每克 4 卡，脂肪每克 9 卡），就得到了每日所需的三大營養素的克數。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 營養素需求計算</span></span><br><span class="line"><span class="keyword">const</span> proteinNeed = dailyCalories * <span class="number">0.2</span>; <span class="comment">// 蛋白質需求占總熱量的20%</span></span><br><span class="line"><span class="keyword">const</span> fatNeed = dailyCalories * <span class="number">0.2</span>; <span class="comment">// 脂肪需求占總熱量的20%</span></span><br><span class="line"><span class="keyword">const</span> carbsNeed = dailyCalories * <span class="number">0.6</span>; <span class="comment">// 碳水化合物需求占總熱量的60%</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 營養素需求計算 (每日所需熱量的20%為蛋白質需求，20%為脂肪需求，60%為碳水化合物需求)</span></span><br><span class="line"><span class="keyword">const</span> dailyProteinNeed = (dailyCalories * <span class="number">0.2</span>) / <span class="number">4</span>; <span class="comment">// 蛋白質每克4卡</span></span><br><span class="line"><span class="keyword">const</span> dailyFatNeed = (dailyCalories * <span class="number">0.2</span>) / <span class="number">9</span>; <span class="comment">// 脂肪每克9卡</span></span><br><span class="line"><span class="keyword">const</span> dailyCarbsNeed = (dailyCalories * <span class="number">0.6</span>) / <span class="number">4</span>; <span class="comment">// 碳水化合物每克4卡</span></span><br></pre></td></tr></table></figure>

<h3 id="第五步：計算鮮食可提供的營養素和熱量"><a href="#第五步：計算鮮食可提供的營養素和熱量" class="headerlink" title="第五步：計算鮮食可提供的營養素和熱量"></a>第五步：計算鮮食可提供的營養素和熱量</h3><p>接下來，我們要計算選擇的鮮食可以提供多少營養素和熱量。我們從鮮食的 Model 中取出食物的熱量、蛋白質、脂肪、碳水化合物含量，以及最大攝取量。<br>然後，我們計算在最大攝取量下，這個食物可以提供多少熱量。同時，我們也計算在不超過每日所需熱量的情況下，這個食物最多可以攝取多少克。<br>有了食物的最大攝取量後，我們可以計算這個食物可以提供多少克的三大營養素。我們將最大攝取量乘以食物的營養素含量百分比，就得到了每種營養素的攝取量。<br>然後，我們計算這個食物提供的總熱量。我們將每種營養素的攝取量乘以其熱量，然後相加，就得到了總熱量。<br>接著，我們計算這個食物提供的熱量與每日所需熱量的差異。這個差異可以讓使用者知道，如果只吃這一種食物，是否能滿足每日所需的熱量。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 計算該食物可攝取量</span></span><br><span class="line"><span class="keyword">const</span> foodCalories = freshFood.<span class="property">calories</span>;</span><br><span class="line"><span class="keyword">const</span> foodProtein = freshFood.<span class="property">protein</span>;</span><br><span class="line"><span class="keyword">const</span> foodFat = freshFood.<span class="property">fat</span>;</span><br><span class="line"><span class="keyword">const</span> foodCarbs = freshFood.<span class="property">carbs</span>;</span><br><span class="line"><span class="keyword">const</span> foodMaxIntake = freshFood.<span class="property">maxIntake</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 計算該食物每日可攝取量</span></span><br><span class="line"><span class="keyword">let</span> maxCaloriesFromFood = foodCalories * (foodMaxIntake / <span class="number">100</span>); <span class="comment">// 每日最大攝取量下的熱量</span></span><br><span class="line"><span class="keyword">let</span> maxFoodIntake = <span class="title class_">Math</span>.<span class="title function_">min</span>(</span><br><span class="line">  foodMaxIntake,</span><br><span class="line">  (dailyCalories / foodCalories) * <span class="number">100</span></span><br><span class="line">); <span class="comment">// 不超過每日所需熱量的最大攝取量(g)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 計算食物提供的營養素量</span></span><br><span class="line"><span class="keyword">let</span> proteinIntake = (maxFoodIntake * (foodProtein / <span class="number">100</span>)).<span class="title function_">toFixed</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">let</span> fatIntake = (maxFoodIntake * (foodFat / <span class="number">100</span>)).<span class="title function_">toFixed</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">let</span> carbsIntake = (maxFoodIntake * (foodCarbs / <span class="number">100</span>)).<span class="title function_">toFixed</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 計算食物提供的總熱量</span></span><br><span class="line"><span class="keyword">let</span> foodProvidedCalories = (</span><br><span class="line">  proteinIntake * <span class="number">4</span> +</span><br><span class="line">  fatIntake * <span class="number">9</span> +</span><br><span class="line">  carbsIntake * <span class="number">4</span></span><br><span class="line">).<span class="title function_">toFixed</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 計算與每日所需熱量的差異</span></span><br><span class="line"><span class="keyword">let</span> caloriesDifference = (dailyCalories - foodProvidedCalories).<span class="title function_">toFixed</span>(<span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<h3 id="第六步：返回計算結果"><a href="#第六步：返回計算結果" class="headerlink" title="第六步：返回計算結果"></a>第六步：返回計算結果</h3><p>最後，我們將所有計算結果整理到一個物件中，並使用 <code>handleSuccess</code> 函數返回給客戶端。這個物件包含了使用者輸入的體重和活動量、選擇的食物、計算出的 BMR 和調整後的 BMR、每日所需熱量和三大營養素量、食物的最大攝取量和實際攝取量、食物提供的營養素量和總熱量、熱量差異，以及每種營養素提供的詳細熱量。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回結果</span></span><br><span class="line"><span class="keyword">let</span> data = &#123;</span><br><span class="line">  weight,</span><br><span class="line">  activity,</span><br><span class="line">  <span class="attr">food</span>: freshFood,</span><br><span class="line">  <span class="attr">BMR</span>: <span class="variable constant_">BMR</span>.<span class="title function_">toFixed</span>(<span class="number">2</span>), <span class="comment">// 基礎代謝率 (BMR)</span></span><br><span class="line">  <span class="attr">adjustedBMR</span>: adjustedBMR.<span class="title function_">toFixed</span>(<span class="number">2</span>), <span class="comment">// 調整後的 BMR</span></span><br><span class="line">  <span class="attr">dailyCalories</span>: dailyCalories.<span class="title function_">toFixed</span>(<span class="number">2</span>), <span class="comment">// 每日所需熱量</span></span><br><span class="line">  <span class="attr">dailyProteinNeed</span>: dailyProteinNeed.<span class="title function_">toFixed</span>(<span class="number">2</span>), <span class="comment">// 每日所需蛋白質</span></span><br><span class="line">  <span class="attr">dailyFatNeed</span>: dailyFatNeed.<span class="title function_">toFixed</span>(<span class="number">2</span>), <span class="comment">// 每日所需脂肪</span></span><br><span class="line">  <span class="attr">dailyCarbsNeed</span>: dailyCarbsNeed.<span class="title function_">toFixed</span>(<span class="number">2</span>), <span class="comment">// 每日所需碳水化合物</span></span><br><span class="line">  <span class="attr">maxIntake</span>: foodMaxIntake.<span class="title function_">toFixed</span>(<span class="number">2</span>), <span class="comment">// 最大攝取量</span></span><br><span class="line">  <span class="attr">foodIntake</span>: maxFoodIntake.<span class="title function_">toFixed</span>(<span class="number">2</span>), <span class="comment">// 實際攝取量</span></span><br><span class="line">  <span class="attr">nutrientsProvided</span>: &#123;</span><br><span class="line">    <span class="attr">protein</span>: proteinIntake, <span class="comment">// 每日食物中的蛋白質克數</span></span><br><span class="line">    <span class="attr">fat</span>: fatIntake, <span class="comment">// 每日食物中的脂肪克數</span></span><br><span class="line">    <span class="attr">carbs</span>: carbsIntake, <span class="comment">// 每日食物中的碳水化合物克數</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">foodProvidedCalories</span>: foodProvidedCalories, <span class="comment">// 食物提供的總熱量</span></span><br><span class="line">  <span class="attr">caloriesDifference</span>: caloriesDifference, <span class="comment">// 熱量差異</span></span><br><span class="line">  <span class="attr">detailedNutrientsCalories</span>: &#123;</span><br><span class="line">    <span class="attr">protein</span>: proteinCalories, <span class="comment">// 蛋白質提供的熱量</span></span><br><span class="line">    <span class="attr">fat</span>: fatCalories, <span class="comment">// 脂肪提供的熱量</span></span><br><span class="line">    <span class="attr">carbs</span>: carbsCalories, <span class="comment">// 碳水化合物提供的熱量</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">handleSuccess</span>(res, data, <span class="string">&quot;計算鮮食可攝取量成功&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>在這個物件中,我們包含了許多有用的資訊：</p>
<ul>
<li><code>weight</code>：使用者輸入的體重</li>
<li><code>activity</code>：使用者選擇的活動量</li>
<li><code>food</code>：使用者選擇的鮮食</li>
<li><code>BMR</code>：計算出的基礎代謝率</li>
<li><code>adjustedBMR</code>：根據活動量調整後的 BMR</li>
<li><code>dailyCalories</code>：每日所需總熱量</li>
<li><code>dailyProteinNeed</code>、<code>dailyFatNeed</code>、<code>dailyCarbsNeed</code>：每日所需的三大營養素量</li>
<li><code>maxIntake</code>：鮮食的最大攝取量</li>
<li><code>foodIntake</code>：在不超過每日所需熱量的情況下,鮮食的實際攝取量</li>
<li><code>nutrientsProvided</code>：鮮食提供的三大營養素克數</li>
<li><code>foodProvidedCalories</code>：鮮食提供的總熱量</li>
<li><code>caloriesDifference</code>：鮮食提供的熱量與每日所需熱量的差異</li>
<li><code>detailedNutrientsCalories</code>：每種營養素提供的詳細熱量<br>最後，我們使用 <code>handleSuccess</code> 函數將這個物件返回給客戶端，並附上一個成功的訊息：”計算鮮食可攝取量成功”。<br>這樣，我們就完成了整個 API 的實作。讓我們用 Postman 來測試一下吧！</li>
</ul>
<h2 id="Postman-測試"><a href="#Postman-測試" class="headerlink" title="Postman 測試"></a>Postman 測試</h2><blockquote>
<p>專案記得要 RUN 起來歐！</p>
</blockquote>
<ol>
<li><p>打開 Postman ，創建一個新的請求。<br> <img src="https://ithelp.ithome.com.tw/upload/images/20240929/20159686z32JCzXM0L.png" alt="https://ithelp.ithome.com.tw/upload/images/20240929/20159686z32JCzXM0L.png"></p>
</li>
<li><p>將請求方法設為 POST，請求的 URL 設為 <code>http://127.0.0.1:3000/foods/calculatefood</code>。</p>
</li>
<li><p>點擊 Body 標籤，選擇 raw 格式，然後在文本框中輸入以下 JSON：</p>
 <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;weight&quot;</span><span class="punctuation">:</span> <span class="number">500</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;activity&quot;</span><span class="punctuation">:</span> <span class="string">&quot;medium&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;foodId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;66c8c33f41748cc91ee1f348&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p> 這個 JSON 中，我們設置了一隻體重為 500 克、活動量為中等的鸚鵡，並選擇了一種鮮食（foodId 需要替換為你資料庫中存在的鮮食 ID）。</p>
</li>
<li><p>點擊 Send 按鈕，發送請求。如果一切正常，你應該會收到類似下面這樣的回應：</p>
 <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;statusCode&quot;</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="string">&quot;success&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;計算鮮食可攝取量成功&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;weight&quot;</span><span class="punctuation">:</span> <span class="string">&quot;500&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;activity&quot;</span><span class="punctuation">:</span> <span class="string">&quot;medium&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;food&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;66c8c33f41748cc91ee1f348&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;向日葵籽&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;calories&quot;</span><span class="punctuation">:</span> <span class="number">584</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;protein&quot;</span><span class="punctuation">:</span> <span class="number">20.78</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;fat&quot;</span><span class="punctuation">:</span> <span class="number">51.46</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;carbs&quot;</span><span class="punctuation">:</span> <span class="number">20</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;maxIntake&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;note&quot;</span><span class="punctuation">:</span> <span class="string">&quot;生食&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;nutrition&quot;</span><span class="punctuation">:</span> <span class="string">&quot;向日葵籽富含健康脂肪、蛋白質及纖維，有助於心血管健康和提供長時間的能量。&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;BMR&quot;</span><span class="punctuation">:</span> <span class="string">&quot;104.06&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;adjustedBMR&quot;</span><span class="punctuation">:</span> <span class="string">&quot;145.68&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;dailyCalories&quot;</span><span class="punctuation">:</span> <span class="string">&quot;145.68&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;dailyProteinNeed&quot;</span><span class="punctuation">:</span> <span class="string">&quot;7.28&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;dailyFatNeed&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3.24&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;dailyCarbsNeed&quot;</span><span class="punctuation">:</span> <span class="string">&quot;21.85&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;maxIntake&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10.00&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;foodIntake&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10.00&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;nutrientsProvided&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;protein&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.08&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;fat&quot;</span><span class="punctuation">:</span> <span class="string">&quot;5.15&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;carbs&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.00&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;foodProvidedCalories&quot;</span><span class="punctuation">:</span> <span class="string">&quot;62.67&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;caloriesDifference&quot;</span><span class="punctuation">:</span> <span class="string">&quot;83.01&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;detailedNutrientsCalories&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;protein&quot;</span><span class="punctuation">:</span> <span class="string">&quot;8.32&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;fat&quot;</span><span class="punctuation">:</span> <span class="string">&quot;46.35&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;carbs&quot;</span><span class="punctuation">:</span> <span class="string">&quot;8.00&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p> 在回應中，你可以看到我們計算出的各種數據，包括鸚鵡的 BMR、每日所需熱量和營養素、選擇的鮮食的各種資訊、鮮食可提供的營養素和熱量等。<br> 如果你收到了類似的回應，那麼恭喜你，你的 API 已經可以正常工作了！</p>
</li>
</ol>
<h2 id="完整程式碼"><a href="#完整程式碼" class="headerlink" title="完整程式碼"></a>完整程式碼</h2><details>
<summary>為了方便你查看和學習,這裡我再次提供完整的程式碼：</summary>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">FreshFood</span> = <span class="built_in">require</span>(<span class="string">&quot;../models/freshFood&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> handleSuccess = <span class="built_in">require</span>(<span class="string">&quot;../utils/handleSuccess&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> handleErrorAsync = <span class="built_in">require</span>(<span class="string">&quot;../utils/handleErrorAsync&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> appError = <span class="built_in">require</span>(<span class="string">&quot;../utils/appError&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// * 每日鮮食計算</span></span><br><span class="line">router.<span class="title function_">post</span>(</span><br><span class="line">  <span class="string">&quot;/calculatefood&quot;</span>,</span><br><span class="line">  <span class="comment">/*  #swagger.tags = [&#x27;Food&#x27;]</span></span><br><span class="line"><span class="comment">      #swagger.summary = &#x27;每日鮮食計算&#x27;</span></span><br><span class="line"><span class="comment">      #swagger.description = &#x27;每日鮮食計算&#x27;</span></span><br><span class="line"><span class="comment">      #swagger.parameters[&#x27;body&#x27;] = &#123;</span></span><br><span class="line"><span class="comment">          in: &#x27;body&#x27;,</span></span><br><span class="line"><span class="comment">          required: true,</span></span><br><span class="line"><span class="comment">          schema:&#123;</span></span><br><span class="line"><span class="comment">              $memberId:&#x27;會員 ID&#x27;,</span></span><br><span class="line"><span class="comment">              $weight:&#x27;體重&#x27;,</span></span><br><span class="line"><span class="comment">              $activity: &#x27;活動量&#x27;,</span></span><br><span class="line"><span class="comment">              $foodId:&#x27;食物 ID&#x27;,</span></span><br><span class="line"><span class="comment">          &#125;</span></span><br><span class="line"><span class="comment">      &#125;</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="title function_">handleErrorAsync</span>(<span class="title function_">async</span> (req, res, next) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 取得參數</span></span><br><span class="line">    <span class="keyword">const</span> &#123; weight, activity, foodId &#125; = req.<span class="property">body</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 驗證必填欄位</span></span><br><span class="line">    <span class="keyword">if</span> (!weight || !activity || !foodId) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">next</span>(<span class="title function_">appError</span>(<span class="number">400</span>, <span class="string">&quot;weight, activity, foodId 為必填&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 驗證食物是否存在</span></span><br><span class="line">    <span class="keyword">const</span> freshFood = <span class="keyword">await</span> <span class="title class_">FreshFood</span>.<span class="title function_">findById</span>(foodId);</span><br><span class="line">    <span class="keyword">if</span> (!freshFood) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">next</span>(<span class="title function_">appError</span>(<span class="number">400</span>, <span class="string">&quot;食物不存在&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用新的 BMR 計算公式</span></span><br><span class="line">    <span class="keyword">const</span> K = <span class="number">175</span>; <span class="comment">// 鸚鵡的 K 值</span></span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">BMR</span> = K * <span class="title class_">Math</span>.<span class="title function_">pow</span>(weight / <span class="number">1000</span>, <span class="number">0.75</span>); <span class="comment">// 體重轉換為公斤並計算基礎代謝率</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根據活動水平調整BMR</span></span><br><span class="line">    <span class="keyword">let</span> activityLevel = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">switch</span> (activity) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;low&quot;</span>:</span><br><span class="line">        activityLevel = <span class="number">1.2</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;medium&quot;</span>:</span><br><span class="line">        activityLevel = <span class="number">1.4</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;high&quot;</span>:</span><br><span class="line">        activityLevel = <span class="number">1.6</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> adjustedBMR = <span class="variable constant_">BMR</span> * activityLevel; <span class="comment">// 調整後的BMR</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 計算每日所需熱量</span></span><br><span class="line">    <span class="keyword">let</span> dailyCalories = adjustedBMR;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 營養素需求計算</span></span><br><span class="line">    <span class="keyword">const</span> proteinNeed = dailyCalories * <span class="number">0.2</span>; <span class="comment">// 蛋白質需求占總熱量的20%</span></span><br><span class="line">    <span class="keyword">const</span> fatNeed = dailyCalories * <span class="number">0.2</span>; <span class="comment">// 脂肪需求占總熱量的20%</span></span><br><span class="line">    <span class="keyword">const</span> carbsNeed = dailyCalories * <span class="number">0.6</span>; <span class="comment">// 碳水化合物需求占總熱量的60%</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 營養素需求計算 (每日所需熱量的20%為蛋白質需求，20%為脂肪需求，60%為碳水化合物需求)</span></span><br><span class="line">    <span class="keyword">const</span> dailyProteinNeed = (dailyCalories * <span class="number">0.2</span>) / <span class="number">4</span>; <span class="comment">// 蛋白質每克4卡</span></span><br><span class="line">    <span class="keyword">const</span> dailyFatNeed = (dailyCalories * <span class="number">0.2</span>) / <span class="number">9</span>; <span class="comment">// 脂肪每克9卡</span></span><br><span class="line">    <span class="keyword">const</span> dailyCarbsNeed = (dailyCalories * <span class="number">0.6</span>) / <span class="number">4</span>; <span class="comment">// 碳水化合物每克4卡</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 計算該食物可攝取量</span></span><br><span class="line">    <span class="keyword">const</span> foodCalories = freshFood.<span class="property">calories</span>;</span><br><span class="line">    <span class="keyword">const</span> foodProtein = freshFood.<span class="property">protein</span>;</span><br><span class="line">    <span class="keyword">const</span> foodFat = freshFood.<span class="property">fat</span>;</span><br><span class="line">    <span class="keyword">const</span> foodCarbs = freshFood.<span class="property">carbs</span>;</span><br><span class="line">    <span class="keyword">const</span> foodMaxIntake = freshFood.<span class="property">maxIntake</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 計算該食物每日可攝取量</span></span><br><span class="line">    <span class="keyword">let</span> maxCaloriesFromFood = foodCalories * (foodMaxIntake / <span class="number">100</span>); <span class="comment">// 每日最大攝取量下的熱量</span></span><br><span class="line">    <span class="keyword">let</span> maxFoodIntake = <span class="title class_">Math</span>.<span class="title function_">min</span>(</span><br><span class="line">      foodMaxIntake,</span><br><span class="line">      (dailyCalories / foodCalories) * <span class="number">100</span></span><br><span class="line">    ); <span class="comment">// 不超過每日所需熱量的最大攝取量(g)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 計算食物提供的營養素量</span></span><br><span class="line">    <span class="keyword">let</span> proteinIntake = (maxFoodIntake * (foodProtein / <span class="number">100</span>)).<span class="title function_">toFixed</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">let</span> fatIntake = (maxFoodIntake * (foodFat / <span class="number">100</span>)).<span class="title function_">toFixed</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">let</span> carbsIntake = (maxFoodIntake * (foodCarbs / <span class="number">100</span>)).<span class="title function_">toFixed</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 計算食物提供的總熱量</span></span><br><span class="line">    <span class="keyword">let</span> foodProvidedCalories = (</span><br><span class="line">      proteinIntake * <span class="number">4</span> +</span><br><span class="line">      fatIntake * <span class="number">9</span> +</span><br><span class="line">      carbsIntake * <span class="number">4</span></span><br><span class="line">    ).<span class="title function_">toFixed</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 計算與每日所需熱量的差異</span></span><br><span class="line">    <span class="keyword">let</span> caloriesDifference = (dailyCalories - foodProvidedCalories).<span class="title function_">toFixed</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 計算食物提供的營養素熱量</span></span><br><span class="line">    <span class="keyword">let</span> proteinCalories = (proteinIntake * <span class="number">4</span>).<span class="title function_">toFixed</span>(<span class="number">2</span>); <span class="comment">// 蛋白質提供的熱量</span></span><br><span class="line">    <span class="keyword">let</span> fatCalories = (fatIntake * <span class="number">9</span>).<span class="title function_">toFixed</span>(<span class="number">2</span>); <span class="comment">// 脂肪提供的熱量</span></span><br><span class="line">    <span class="keyword">let</span> carbsCalories = (carbsIntake * <span class="number">4</span>).<span class="title function_">toFixed</span>(<span class="number">2</span>); <span class="comment">// 碳水化合物提供的熱量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回結果</span></span><br><span class="line">    <span class="keyword">let</span> data = &#123;</span><br><span class="line">      weight,</span><br><span class="line">      activity,</span><br><span class="line">      <span class="attr">food</span>: freshFood,</span><br><span class="line">      <span class="attr">BMR</span>: <span class="variable constant_">BMR</span>.<span class="title function_">toFixed</span>(<span class="number">2</span>), <span class="comment">// 基礎代謝率 (BMR)</span></span><br><span class="line">      <span class="attr">adjustedBMR</span>: adjustedBMR.<span class="title function_">toFixed</span>(<span class="number">2</span>), <span class="comment">// 調整後的 BMR</span></span><br><span class="line">      <span class="attr">dailyCalories</span>: dailyCalories.<span class="title function_">toFixed</span>(<span class="number">2</span>), <span class="comment">// 每日所需熱量</span></span><br><span class="line">      <span class="attr">dailyProteinNeed</span>: dailyProteinNeed.<span class="title function_">toFixed</span>(<span class="number">2</span>), <span class="comment">// 每日所需蛋白質</span></span><br><span class="line">      <span class="attr">dailyFatNeed</span>: dailyFatNeed.<span class="title function_">toFixed</span>(<span class="number">2</span>), <span class="comment">// 每日所需脂肪</span></span><br><span class="line">      <span class="attr">dailyCarbsNeed</span>: dailyCarbsNeed.<span class="title function_">toFixed</span>(<span class="number">2</span>), <span class="comment">// 每日所需碳水化合物</span></span><br><span class="line">      <span class="attr">maxIntake</span>: foodMaxIntake.<span class="title function_">toFixed</span>(<span class="number">2</span>), <span class="comment">// 最大攝取量</span></span><br><span class="line">      <span class="attr">foodIntake</span>: maxFoodIntake.<span class="title function_">toFixed</span>(<span class="number">2</span>), <span class="comment">// 實際攝取量</span></span><br><span class="line">      <span class="attr">nutrientsProvided</span>: &#123;</span><br><span class="line">        <span class="attr">protein</span>: proteinIntake, <span class="comment">// 每日食物中的蛋白質克數</span></span><br><span class="line">        <span class="attr">fat</span>: fatIntake, <span class="comment">// 每日食物中的脂肪克數</span></span><br><span class="line">        <span class="attr">carbs</span>: carbsIntake, <span class="comment">// 每日食物中的碳水化合物克數</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">foodProvidedCalories</span>: foodProvidedCalories, <span class="comment">// 食物提供的總熱量</span></span><br><span class="line">      <span class="attr">caloriesDifference</span>: caloriesDifference, <span class="comment">// 熱量差異</span></span><br><span class="line">      <span class="attr">detailedNutrientsCalories</span>: &#123;</span><br><span class="line">        <span class="attr">protein</span>: proteinCalories, <span class="comment">// 蛋白質提供的熱量</span></span><br><span class="line">        <span class="attr">fat</span>: fatCalories, <span class="comment">// 脂肪提供的熱量</span></span><br><span class="line">        <span class="attr">carbs</span>: carbsCalories, <span class="comment">// 碳水化合物提供的熱量</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">handleSuccess</span>(res, data, <span class="string">&quot;計算鮮食可攝取量成功&quot;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure>
</details>
## 總結

<p>終於把這個計算鸚鵡每日應攝取量的 API 完成了！雖然這個功能看起來很簡單，但實際實現起來還真不是一件容易的事情。<br>一開始，我對如何計算鸚鵡的每日所需營養完全沒有概念。為了找到最合適的計算方法，我查了不少資料，也試了好幾種不同的公式。過程中難免遇到一些挫折，但我知道，只要持續不斷地嘗試，就有機會找到最佳解決方案。<br>最後，我選擇了一個包含 K 值的公式。這個 K 值是最近才被研究出來的，它考慮了鸚鵡的特殊生理特性。能夠將最新的研究成果應用到自己的專案中，我還挺自豪的。<br>有了計算公式，接下來的任務就是把它轉化為 API。這一部分相對來說比較常規，畢竟之前的文章中我們已經學過如何定義路由，如何進行參數驗證，如何使用 Swagger 等等。不過，透過這個實際的案例，我對這些知識有了更深入的理解和運用。<br>現在，這個 API 已經可以正常運作了。它可以根據鸚鵡的體重和活動量，計算出每日所需的熱量和各種營養素，並根據選擇的食物，計算出適合的攝取量。雖然它可能還有一些地方可以優化，但作為一個初始版本，我已經很滿意了。</p>
<p>明天我們把專案部署到 Render 上吧，就不只是在本機跑，而是可以讓別人直接使用你的 API 囉！<br>大家有沒有想要更詳細補充的部分呢？歡迎在下方留言分享喔！我們一起學習、一起成長。明天見啦，掰掰～</p>
<br />
<hr />
<br />

<blockquote>
<p>希望這篇文章有幫助到你，謝謝你的觀看，若有想看的系列也歡迎告訴我 😉</p>
</blockquote>
]]></content>
      <tags>
        <tag>2024IT鐵人賽</tag>
        <tag>Express</tag>
        <tag>API</tag>
      </tags>
  </entry>
  <entry>
    <title>[ 2024 IT 鐵人賽 DAY21 ] 後端專案最終章：Render 部署全攻略</title>
    <url>/2024/09/30/2024it/d21/</url>
    <content><![CDATA[<p>哇！各位鐵粉們，今天是我們後端專案的最後一篇文章囉！已經過了 2&#x2F;3 的賽程，我們一起繼續努力堅持下去～</p>
<span id="more"></span>

<p>雖然有時候會覺得好像要寫不完了，但想到大家的支持，就又充滿力量了呢！</p>
<div class="cus-intro-box">
    <h2>房東不給養鸚鵡 - 那就用 Nuxt + Express + MongoDB 30 天寫一個全端鸚鵡專案。</h2>
    <p>挑戰人生第一次鐵人賽，就來個佛心分享 side project，從專案發想、規劃、設計、資料庫、開發到部署，技術使用 Nuxt 3、Tailwind CSS、Pinia、Axios、Express、MongoDB，製作一個前後端分離的鸚鵡專案，功能主要介紹食物計算機和聯絡我們，希望可以讓更多人瞭解專案的完整流程 ✨</p>
    <a href="https://ithelp.ithome.com.tw/users/20159686/ironman/7564" target="_blank">IT 全文章連結</a>
</div>

<h2 id="調整指令"><a href="#調整指令" class="headerlink" title="調整指令"></a>調整指令</h2><p>欸嘿，前面寫得太開心，直接把部署需要的原始指令給忘光光了啦！真是個菜鳥工程師呢 XD<br>不過沒關係，我們在部署前先把它加回來吧！就當作是復習一下之前學過的東西啦！</p>
<ol>
<li><p>打開 VSCode，找到 <code>package.json</code> 檔案。（沒錯，就是那個記錄我們專案靈魂的檔案！）</p>
</li>
<li><p>我們要把最初修改的 <code>&quot;start&quot;: &quot;node ./bin/www&quot;</code> 調整一下。為什麼要調整呢？因為我們要區分「開發環境」和「正式環境」啦！就像是我們平常穿的居家服和出門的正式服一樣，各有各的用途喔！<br> 調整成以下範例：</p>
 <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node ./bin/www&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;nodemon ./bin/www&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;swagger&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node ./swagger.js&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p> <img src="https://ithelp.ithome.com.tw/upload/images/20240930/201596860QexNhuzAi.png" alt="https://ithelp.ithome.com.tw/upload/images/20240930/201596860QexNhuzAi.png"><br> 解釋一下：</p>
<ul>
<li><code>start</code>：這是我們要留給部署時使用的指令。就像是正式出場時穿的西裝革履！</li>
<li><code>dev</code>：這是我們開發時使用的指令。就像是在家裡爬 bug 時穿的舒適睡衣～</li>
<li><code>swagger</code>：這個不變，還是用來生成我們的 API 文件的。<br> 小提醒：<code>nodemon</code> 是一個超棒的工具，它會在我們修改程式碼時自動重新啟動服務器，省去我們手動重啟的麻煩。如果你還沒安裝的話，可以用 <code>npm install nodemon --save-dev</code> 來安裝喔！</li>
</ul>
</li>
</ol>
<h2 id="推送更新到-Github"><a href="#推送更新到-Github" class="headerlink" title="推送更新到 Github"></a>推送更新到 Github</h2><p>好啦，調整完指令之後，我們要把這些變更推送到 Github 囉！這次我們要使用 VSCode 內建的版本控制功能，超方便der～</p>
<ol>
<li>在左側選單點擊「原始檔控制」（Source Control）。看到那個長得像樹枝的圖示了嗎？對，就是它！</li>
<li>在上方的輸入框中輸入本次變更的 Commit 訊息。例如：「調整 package.json 中的 start 和 dev 指令」。這就像是在寫一個小日記，記錄我們做了什麼變更。</li>
<li>選取要推送的變更檔案。通常 VSCode 會自動選取所有變更的檔案，但如果你只想推送部分變更，可以手動選擇。</li>
<li>點擊「提交」（Commit）按鈕。這就像是把我們的變更封裝起來，準備送出去。</li>
<li>最後，點擊「同步變更」（Sync Changes）按鈕，將本地端的檔案推送到遠端儲存庫。這就像是把我們的變更寄出去啦！<br> <img src="https://ithelp.ithome.com.tw/upload/images/20240930/20159686NAQMkn4ecM.png" alt="https://ithelp.ithome.com.tw/upload/images/20240930/20159686NAQMkn4ecM.png"><br>恭喜恭喜！我們成功將更新的檔案都推送到遠端囉～接下來，讓我們一起把專案部署到 Render 吧！</li>
</ol>
<h2 id="Render-介紹"><a href="#Render-介紹" class="headerlink" title="Render 介紹"></a>Render 介紹</h2><p>Render 是一個超級好用的雲端平台，可以讓我們輕鬆部署我們的網站和應用程式。它就像是一個網路上的超級電腦，可以幫我們把專案跑起來，讓全世界的人都能使用我們的 API！</p>
<h3 id="Render-休眠機制"><a href="#Render-休眠機制" class="headerlink" title="Render 休眠機制"></a>Render 休眠機制</h3><p>不過要注意的是，Render 的免費方案有一個小小的特色——休眠機制。它就像是一個愛睡覺的小貓咪，如果一段時間沒有人「摸」它（也就是沒有人使用我們的 API），它就會進入睡眠狀態。<br>當有新的請求進來時，它需要一點時間「伸懶腰」（喚醒服務），可能會有幾秒鐘的延遲。所以如果你發現第一次呼叫 API 特別慢，別緊張，這是正常的！後續的請求就會恢復正常速度啦。</p>
<h2 id="部署到-Render"><a href="#部署到-Render" class="headerlink" title="部署到 Render"></a>部署到 Render</h2><p>好啦，現在讓我們開始部署的魔法儀式吧！</p>
<ol>
<li><p>首先，前往 <a href="https://render.com/">Render 官網</a> 註冊一個帳號。這裡建議使用 Github 帳號登入，因為這樣可以直接連結我們的 Github 專案，超級方便的啦！<br> <img src="https://ithelp.ithome.com.tw/upload/images/20240930/20159686z0bjoiwOEM.png" alt="https://ithelp.ithome.com.tw/upload/images/20240930/20159686z0bjoiwOEM.png"></p>
</li>
<li><p>進入儀表板後，我們要「New」一個「Web Service」。<br> <img src="https://ithelp.ithome.com.tw/upload/images/20240930/20159686pgqUXbrPA3.png" alt="https://ithelp.ithome.com.tw/upload/images/20240930/20159686pgqUXbrPA3.png"></p>
</li>
<li><p>選擇你的 Github 專案。這裡 Render 會列出你 Github 上的所有專案，選擇我們要部署的那個就可以了。<br> <img src="https://ithelp.ithome.com.tw/upload/images/20240930/20159686CILj8jo3QX.png" alt="https://ithelp.ithome.com.tw/upload/images/20240930/20159686CILj8jo3QX.png"><br> <img src="https://ithelp.ithome.com.tw/upload/images/20240930/20159686xkXxFm6PCb.png" alt="https://ithelp.ithome.com.tw/upload/images/20240930/20159686xkXxFm6PCb.png"></p>
</li>
<li><p>接下來要填入一些基本資料：</p>
<ul>
<li>Name：幫你的專案取個響亮的名字吧！</li>
<li>Language：選擇 Node（因為我們用的是 Node.js 嘛）</li>
<li>Branch：選擇你的主要分支（通常是 main 或 master）</li>
<li>Build Command：填入 <code>npm install</code>（這是告訴 Render 要安裝我們專案的所有依賴）</li>
<li>Start Command：填入 <code>npm run start</code>（這是告訴 Render 如何啟動我們的專案）</li>
<li>Instance Type：選擇 <code>Free $0 / month</code>（誰說免費的不好，免費的完全夠用！）<br> <img src="https://ithelp.ithome.com.tw/upload/images/20240930/20159686TdWfgMhCLc.png" alt="https://ithelp.ithome.com.tw/upload/images/20240930/20159686TdWfgMhCLc.png"></li>
</ul>
</li>
<li><p>環境變數設定：<br>這裡要特別注意！我們需要把本地 <code>.env</code> 檔案中的所有變數都複製到 Render 的環境變數設定中。為什麼要這麼做呢？因為 <code>.env</code> 檔案通常包含一些敏感資訊（比如資料庫密碼），我們不會把它上傳到 Github。但是我們的專案需要這些資訊才能正常運作，所以要在 Render 中設定。<br> <img src="https://ithelp.ithome.com.tw/upload/images/20240930/20159686tUKhqB8mwF.png" alt="https://ithelp.ithome.com.tw/upload/images/20240930/20159686tUKhqB8mwF.png"></p>
</li>
<li><p>一切都設定好後，點擊「Deploy web service」開始部署！</p>
</li>
<li><p>接下來就是見證奇蹟的時刻…等待部署完成！這個過程可能需要幾分鐘，你可以趁這個時間去泡杯咖啡，或者像我一樣看著他轉圈圈（誤）。<br> <img src="https://ithelp.ithome.com.tw/upload/images/20240930/20159686sI4Fbs70wX.png" alt="https://ithelp.ithome.com.tw/upload/images/20240930/20159686sI4Fbs70wX.png"></p>
</li>
<li><p>當你看到「Your service is live 🎉」的訊息時，恭喜你！你的專案已經成功部署到雲端了！<br> <img src="https://ithelp.ithome.com.tw/upload/images/20240930/20159686W4caF1K9pw.png" alt="https://ithelp.ithome.com.tw/upload/images/20240930/20159686W4caF1K9pw.png"></p>
</li>
</ol>
<h2 id="用-Postman-測試部署的-API"><a href="#用-Postman-測試部署的-API" class="headerlink" title="用 Postman 測試部署的 API"></a>用 Postman 測試部署的 API</h2><p>部署完成後，我們當然要測試一下我們的 API 是不是真的能用啦！</p>
<ol>
<li><p>複製 Render 給我們的網址。它通常長得像 <code>https://你的專案名稱.onrender.com</code>。<br> <img src="https://ithelp.ithome.com.tw/upload/images/20240930/20159686KTEBgiL1GP.png" alt="https://ithelp.ithome.com.tw/upload/images/20240930/20159686KTEBgiL1GP.png"></p>
</li>
<li><p>打開我們的好朋友 Postman，新增一個請求。<br> <img src="https://ithelp.ithome.com.tw/upload/images/20240930/20159686BBLcULXq13.png" alt="https://ithelp.ithome.com.tw/upload/images/20240930/20159686BBLcULXq13.png"></p>
</li>
<li><p>把剛才複製的網址貼到 URL 欄位，記得在後面加上你的 API 路徑（例如 <code>/api/freshfoods</code>）。<br> <img src="https://ithelp.ithome.com.tw/upload/images/20240930/201596862u1krlIx7L.png" alt="https://ithelp.ithome.com.tw/upload/images/20240930/201596862u1krlIx7L.png"></p>
</li>
<li><p>選擇正確的 HTTP 方法（GET、POST 等），然後點擊「Send」。</p>
</li>
<li><p>如果你收到了預期的回應，那就代表我們的 API 已經成功部署並且可以正常使用啦！恭喜恭喜！🎉</p>
</li>
</ol>
<h2 id="調整-Swagger-url"><a href="#調整-Swagger-url" class="headerlink" title="調整 Swagger url"></a>調整 Swagger url</h2><p>如果要將 API 文件交付給前端或是團隊的話，記得要修改 url：</p>
<ol>
<li><p>到 Render 複製 url<br> <img src="https://ithelp.ithome.com.tw/upload/images/20240930/201596863HT5Z7PqQV.png" alt="https://ithelp.ithome.com.tw/upload/images/20240930/201596863HT5Z7PqQV.png"></p>
</li>
<li><p>VSCode 打開 <code>swagger.js</code> 修改成部署用的 <code>host</code> &amp; <code>schemes</code></p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">host: &quot;two024it-test-app.onrender.com&quot;, // 請使用自己的 url</span><br><span class="line">schemes: [&quot;https&quot;],</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>host</code> 注意不需要加前面 <code>https://</code> 哦！<br> <img src="https://ithelp.ithome.com.tw/upload/images/20240930/20159686p8AMgYZAfn.png" alt="https://ithelp.ithome.com.tw/upload/images/20240930/20159686p8AMgYZAfn.png">
 </p>
</blockquote>
</li>
<li><p>儲存並編譯 API 文件</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run swagger</span><br></pre></td></tr></table></figure>
<p> <img src="https://ithelp.ithome.com.tw/upload/images/20240930/201596869tFG9lR4cJ.png" alt="https://ithelp.ithome.com.tw/upload/images/20240930/201596869tFG9lR4cJ.png"></p>
</li>
<li><p>推送最新的變更<br> <img src="https://ithelp.ithome.com.tw/upload/images/20240930/20159686m3uDpytewM.png" alt="https://ithelp.ithome.com.tw/upload/images/20240930/20159686m3uDpytewM.png"></p>
</li>
<li><p>等待一大段時間，直到看到 Deploy live 部署成功，點擊 url 查看<br> <img src="https://ithelp.ithome.com.tw/upload/images/20240930/20159686TkyUdCcydt.png" alt="https://ithelp.ithome.com.tw/upload/images/20240930/20159686TkyUdCcydt.png"></p>
</li>
<li><p>進到頁面後，自行加上 &#x2F;api-docs 進入到 swagger UI<br> <img src="https://ithelp.ithome.com.tw/upload/images/20240930/20159686T2kc07du8X.png" alt="https://ithelp.ithome.com.tw/upload/images/20240930/20159686T2kc07du8X.png"></p>
</li>
</ol>
<blockquote>
<p>現在，可以把你開好的 API 給朋友使用囉 ~</p>
</blockquote>
<h3 id="範例後端專案-Github-repo"><a href="#範例後端專案-Github-repo" class="headerlink" title="範例後端專案 Github repo"></a>範例後端專案 Github <a href="https://github.com/sunny96087/2024it-test-app">repo</a></h3><h3 id="完整版後端專案-Github-repo"><a href="#完整版後端專案-Github-repo" class="headerlink" title="完整版後端專案 Github repo"></a>完整版後端專案 Github <a href="https://github.com/sunny96087/parrot_api">repo</a></h3><h2 id="後端專案總結"><a href="#後端專案總結" class="headerlink" title="後端專案總結"></a>後端專案總結</h2><p>哇～我們終於走完了後端的極簡流程耶！雖然因為時間有限，我們只講解了三種不同類型的 API（新增回饋、取得食物、計算鮮食攝取量），但是我們確實完整走過了一個專案開發的流程呢 😎</p>
<p>從最初的環境設置、資料庫連接，到 API 的設計與實作，再到文件的撰寫，最後是部署上線。每一步都是工程師日常工作中會遇到的挑戰，而我們都一一克服了！</p>
<p>接下來的 10 天，我們要一頭栽進前端的精彩世界囉！準備好要學習如何把我們辛苦開發的 API 變成漂亮的網頁介面了嗎？我已經迫不及待要開始了呢！</p>
<p>最後，我要特別感謝一路支持著我們的各位讀者。是你們的鼓勵讓我有動力堅持到現在。讓我們一起繼續在程式的海洋中航行，在前端的花園裡遨遊吧！Go go go！💪</p>
<p>大家有沒有想要更詳細補充的部分呢？歡迎在下方留言分享喔！我們一起學習、一起成長。明天見啦，掰掰～</p>
<br />
<hr />
<br />

<blockquote>
<p>希望這篇文章有幫助到你，謝謝你的觀看，若有想看的系列也歡迎告訴我 😉</p>
</blockquote>
]]></content>
      <tags>
        <tag>2024IT鐵人賽</tag>
        <tag>Express</tag>
        <tag>Postman</tag>
        <tag>Render</tag>
      </tags>
  </entry>
  <entry>
    <title>[ 2024 IT 鐵人賽 DAY22 ] Nuxt3 前端開發起手式：環境建立與基礎認知</title>
    <url>/2024/10/01/2024it/d22/</url>
    <content><![CDATA[<p>哈囉大家好！今天要帶大家一起探索 Nuxt3 的奧秘。不知道大家有沒有遇過這種情況：明明已經學會 Vue，但是在開發大型專案時卻總覺得少了點什麼？那個「少了點什麼」，很可能就是 Nuxt3！<br>哇，時間過得真快！一眨眼，我們的鐵人賽已經進行到第 21 天了，剩下不到 10 天就要完賽了。說實在的，我的心情有點緊張又興奮。緊張的是時間真的不多了，興奮的是我們終於要進入前端專案的世界啦！</p>
<span id="more"></span>

<p>沒錯，各位親愛的同學們，我們花了整整 20 天的時間，打造了一個堅實的後端基礎。現在，是時候把我們的注意力轉移到前端了。畢竟，再厲害的後端，如果沒有一個好看又好用的前端介面，使用者也不會喜歡，對吧？<br>所以，接下來的幾天，我們要一起挑戰的就是 Nuxt3！這可是 Vue 的超級加強版，不僅繼承了 Vue 的所有優點，還為我們解決了許多在開發大型專案時常遇到的問題。雖然時間緊迫，但我相信只要我們一起努力，一定可以在短時間內掌握 Nuxt3 的精髓，為我們的專案畫下完美的句點！</p>
<p>準備好了嗎？讓我們一起踏上這段刺激又充實的 Nuxt3 學習之旅吧！衝啊！</p>
<div class="cus-intro-box">
    <h2>房東不給養鸚鵡 - 那就用 Nuxt + Express + MongoDB 30 天寫一個全端鸚鵡專案。</h2>
    <p>挑戰人生第一次鐵人賽，就來個佛心分享 side project，從專案發想、規劃、設計、資料庫、開發到部署，技術使用 Nuxt 3、Tailwind CSS、Pinia、Axios、Express、MongoDB，製作一個前後端分離的鸚鵡專案，功能主要介紹食物計算機和聯絡我們，希望可以讓更多人瞭解專案的完整流程 ✨</p>
    <a href="https://ithelp.ithome.com.tw/users/20159686/ironman/7564" target="_blank">IT 全文章連結</a>
</div>

<h2 id="Nuxt3-vs-Vue：前端開發的超級助手"><a href="#Nuxt3-vs-Vue：前端開發的超級助手" class="headerlink" title="Nuxt3 vs Vue：前端開發的超級助手"></a>Nuxt3 vs Vue：前端開發的超級助手</h2><p>Nuxt3 確實是 Vue 的加強版，但它的強大之處遠不止於此。讓我們來看看 Nuxt3 如何在多個方面超越了 Vue：</p>
<ol>
<li>自動路由：<ul>
<li>Vue 需要手動設定路由。</li>
<li>Nuxt3 根據 <code>pages</code> 資料夾的結構自動生成路由，省去了大量配置時間。</li>
<li>支援動態路由、嵌套路由，甚至是自定義的參數化路由。</li>
</ul>
</li>
<li>服務器端渲染（SSR）：<ul>
<li>Vue 主要是客戶端渲染，需要額外設定才能實現 SSR。</li>
<li>Nuxt3 內建 SSR 支援，大幅提升首次載入速度和 SEO 表現。</li>
<li>還提供了混合渲染模式，可以針對不同頁面選擇最適合的渲染方式。</li>
</ul>
</li>
<li>靜態網站生成（Static Site Generation, SSG）：<ul>
<li>Vue 需要額外的工具如 VuePress 來實現。</li>
<li>Nuxt3 內建 SSG 功能，可以輕鬆生成高效能的靜態網站。</li>
<li>支援增量式靜態生成（ISR），兼顧了靜態網站的效能和動態內容的即時性。</li>
</ul>
</li>
<li>檔案系統 API：<ul>
<li>Vue 需要額外設定後端框架如 Express 來處理 API。</li>
<li>Nuxt3 的 server 資料夾可以直接寫 API，實現真正的全端開發。</li>
<li>支援 API 路由的自動生成，大幅簡化了後端開發流程。</li>
</ul>
</li>
<li>模組系統：<ul>
<li>Nuxt3 提供了強大的模組系統，可以輕鬆擴展功能。</li>
<li>豐富的社群模組生態，幾乎覆蓋了所有常見的開發需求。</li>
</ul>
</li>
<li>優化效能：<ul>
<li>自動代碼分割：Nuxt3 會自動將代碼分割成更小的塊，提升載入速度。</li>
<li>自動導入：組件和組合式函數無需手動導入，減少樣板代碼。</li>
<li>圖片優化：內建的圖片元件可以自動進行圖片優化。</li>
</ul>
</li>
<li>TypeScript 支援：<ul>
<li>Nuxt3 從底層就支援 TypeScript，無需額外配置。</li>
<li>提供了更好的型別推斷和自動補全。</li>
</ul>
</li>
<li>開發體驗：<ul>
<li>熱模組替換（HMR）更快速、更可靠。</li>
<li>錯誤處理更友善，提供清晰的錯誤訊息和錯誤頁面。</li>
</ul>
</li>
<li>部署靈活性：<ul>
<li>可以部署為 SSR 應用、靜態網站，甚至是 Serverless 函數。</li>
<li>支援多種主流的雲平台，如 Vercel、Netlify 等。</li>
</ul>
</li>
<li>SEO 友好：<ul>
<li>內建的 <code>useHead</code> 組合式函數，輕鬆管理 meta 標籤。</li>
<li>自動生成 sitemap，有利於搜尋引擎爬蟲。<br>Nuxt3 不僅簡化了開發流程，還提供了一個完整的生態系統來處理常見的 Web 開發需求。它讓開發者可以專注於業務邏輯，而不是被繁瑣的配置和優化工作所困擾。無論你是要開發一個小型的個人網站，還是大型的企業應用，Nuxt3 都能提供強大的支援，讓你的開發之路更加順暢。</li>
</ul>
</li>
</ol>
<h2 id="建立前端-Nuxt3-專案"><a href="#建立前端-Nuxt3-專案" class="headerlink" title="建立前端 Nuxt3 專案"></a>建立前端 Nuxt3 專案</h2><p>好啦，說了這麼多，我們來實際操作看看吧！</p>
<ol>
<li><p>首先，用 VSCode 打開你想要放專案的資料夾。我自己是選「文件」資料夾，你們可以選自己喜歡的地方。<br> <img src="https://ithelp.ithome.com.tw/upload/images/20241001/20159686K7NSwvI5xJ.png" alt="https://ithelp.ithome.com.tw/upload/images/20241001/20159686K7NSwvI5xJ.png"></p>
</li>
<li><p>接著，打開終端機，輸入以下指令來建立專案：<br> 這裡的 <code>&lt;project-name&gt;</code> 要替換成你想要的專案名稱喔！<br> 更詳細也可以查閱 <a href="https://nuxt.com/docs/getting-started/installation#new-project">官方文件</a></p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx nuxi@latest init &lt;project-name&gt;</span><br></pre></td></tr></table></figure>
<p> <img src="https://ithelp.ithome.com.tw/upload/images/20241001/20159686mxK3cqgPgq.png" alt="https://ithelp.ithome.com.tw/upload/images/20241001/20159686mxK3cqgPgq.png"><br> 部分 mac 才需要加 sudo</p>
</li>
<li><p>接下來會問你一些問題，這樣回答就可以了：</p>
<ul>
<li>是否安裝依賴套件？ → 當然是 <code>y</code> 啦！</li>
<li>用哪種套件管理器？ → 我們就選最常見的 <code>npm</code></li>
<li>要不要初始化 git？ → 當然是 <code>yes</code>，版本控制很重要der！<br> <img src="https://ithelp.ithome.com.tw/upload/images/20241001/20159686uObJjvKMzd.png" alt="https://ithelp.ithome.com.tw/upload/images/20241001/20159686uObJjvKMzd.png"><br> <img src="https://ithelp.ithome.com.tw/upload/images/20241001/20159686i5sRn2vSQi.png" alt="https://ithelp.ithome.com.tw/upload/images/20241001/20159686i5sRn2vSQi.png"></li>
</ul>
</li>
<li><p>等它跑完之後，我們就可以進入剛剛建立好的專案了。你可以用指令：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> &lt;project-name&gt;</span><br></pre></td></tr></table></figure>
<p> 或者是重新開啟資料夾。我自己比較喜歡重開，這樣左邊的工作區看起來比較整齊。<br> <img src="https://ithelp.ithome.com.tw/upload/images/20241001/20159686Q2LtfyY054.png" alt="https://ithelp.ithome.com.tw/upload/images/20241001/20159686Q2LtfyY054.png"></p>
</li>
</ol>
<h2 id="認識-Nuxt3-專案基本架構"><a href="#認識-Nuxt3-專案基本架構" class="headerlink" title="認識 Nuxt3 專案基本架構"></a>認識 Nuxt3 專案基本架構</h2><p>現在，讓我們來看看 Nuxt3 專案的基本架構。別擔心，看起來檔案很多，但其實每個都有它的用途：</p>
<ol>
<li><code>app.vue</code>：這就是我們網站的大家長，所有頁面都會在這裡面呈現。</li>
<li><code>nuxt.config.ts</code>：這是 Nuxt 的設定檔，你可以在這裡設定網站的基本資訊、引入 CSS、設定插件等。</li>
<li><code>.nuxt</code> 資料夾：這裡面是 Nuxt 自己產生的檔案，我們通常不會去動它。</li>
<li><code>components</code> 資料夾：這裡放的是可以重複使用的 Vue 元件。</li>
<li><code>pages</code> 資料夾：這裡放的是網頁的各個頁面，Nuxt 會根據這裡的檔案自動產生網址路徑。</li>
<li><code>public</code> 資料夾：這裡放的是靜態檔案，像是圖片、字型檔之類的。</li>
<li><code>server</code> 資料夾：這裡放的是伺服器端的程式碼，比如說 API 的設定。</li>
<li><code>package.json</code>：這個檔案記錄了專案需要用到的套件和一些常用的指令。</li>
<li><code>tsconfig.json</code>：這是 TypeScript 的設定檔。</li>
<li><code>node_modules</code> 資料夾：這裡面放的是專案用到的所有套件。</li>
<li><code>.gitignore</code>：這個檔案告訴 Git 哪些檔案不需要被版本控制。</li>
<li><code>README.md</code>：這是專案的說明書，通常會寫一些專案的介紹和使用方法。<br><img src="https://ithelp.ithome.com.tw/upload/images/20241001/201596865s6uvh1Lrv.png" alt="https://ithelp.ithome.com.tw/upload/images/20241001/201596865s6uvh1Lrv.png"></li>
</ol>
<h2 id="嘗試執行專案"><a href="#嘗試執行專案" class="headerlink" title="嘗試執行專案"></a>嘗試執行專案</h2><p>好啦，現在我們來把專案跑起來看看吧！</p>
<ol>
<li><p>如果你在建立專案時沒有下載依賴套件，先在終端機輸入：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>
</li>
<li><p>接著，輸入以下指令來啟動專案：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure>
</li>
<li><p>然後打開瀏覽器，輸入 <code>http://localhost:3000/</code><br> <img src="https://ithelp.ithome.com.tw/upload/images/20241001/20159686dLyGkwQhvu.png" alt="https://ithelp.ithome.com.tw/upload/images/20241001/20159686dLyGkwQhvu.png"></p>
</li>
</ol>
<p>如果你看到了 Nuxt 的歡迎頁面，恭喜你！你的 Nuxt3 專案已經成功運行了！<br><img src="https://ithelp.ithome.com.tw/upload/images/20241001/20159686xLNVnbHf7G.png" alt="https://ithelp.ithome.com.tw/upload/images/20241001/20159686xLNVnbHf7G.png"></p>
<h2 id="Nuxt-專案資料夾結構說明"><a href="#Nuxt-專案資料夾結構說明" class="headerlink" title="Nuxt 專案資料夾結構說明"></a>Nuxt 專案資料夾結構說明</h2><p>Nuxt 給我們的是一個極簡版本，有些資料夾是需要我們自己建立的。這裡再詳細說明一下每個資料夾的用途：</p>
<ol>
<li><code>pages/</code>：這裡放的是網頁的各個頁面。</li>
<li><code>components/</code>：這裡放可重複使用的 Vue 元件。</li>
<li><code>layouts/</code>：這裡放網站的布局元件，像是共用的頁首頁尾。</li>
<li><code>public/</code>：靜態檔案放這裡，像是網站 logo 之類的。</li>
<li><code>server/</code>：伺服器端的程式碼放這裡。</li>
<li><code>assets/</code>：需要經過處理的資源放這裡，像是 SASS 檔案。</li>
<li><code>composables/</code>：可重複使用的組合式函數放這裡。</li>
<li><code>plugins/</code>：需要在應用程式啟動前執行的 JavaScript 插件放這裡。</li>
<li><code>middleware/</code>：中間件檔案放這裡，用來在頁面渲染前執行一些程式碼。</li>
<li><code>stores/</code>：如果你用 Pinia 來管理狀態，相關的檔案就放這裡。</li>
</ol>
<blockquote>
<p>我們後面有需要使用時會再做示範 &amp; 詳細說明 ~</p>
</blockquote>
<h2 id="別忘了版控！讓我們把專案上傳到-GitHub"><a href="#別忘了版控！讓我們把專案上傳到-GitHub" class="headerlink" title="別忘了版控！讓我們把專案上傳到 GitHub"></a>別忘了版控！讓我們把專案上傳到 GitHub</h2><p>寫程式時，版本控制超重要的！來，跟著我一起把專案上傳到 GitHub：</p>
<ol>
<li><p>先在專案資料夾中打開終端機，輸入這些指令：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&#x27;初始化 Nuxt3 專案&#x27;</span></span><br></pre></td></tr></table></figure>
<p> 這幾行指令會初始化 Git、將所有檔案加入追蹤，然後提交第一個版本。</p>
</li>
<li><p>接著，到 GitHub 建立一個新的儲存庫，複製它給你的連接指令。通常長這樣：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin [你的 GitHub 儲存庫網址]</span><br><span class="line">git branch -M main</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure>
<p> 這些指令會將你的本地專案連接到 GitHub，並把程式碼推上去。<br> 搞定！這樣你的 Nuxt3 專案就成功上傳到 GitHub 了。之後要更新的話，記得常常 commit 和 push 喔！<br> 版本控制不僅可以幫你記錄每次的修改，還能方便與他人協作。養成好習慣，程式人生會順暢很多！</p>
</li>
</ol>
<blockquote>
<p>如果這些指令無法幫助你完成的話，可以回去看 DAY13 Github 新手村 ~</p>
</blockquote>
<h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>哇，我們今天學了好多東西！從認識 Nuxt3，到建立專案，再到了解專案結構，相信大家對 Nuxt3 已經有了初步的認識。別擔心如果有些地方還不太懂，這很正常！學習新技術就像爬山一樣，要一步一步來。重要的是，我們已經邁出了第一步！<br>接下來，我們會慢慢深入 Nuxt3 的各個功能，一起打造出厲害的網站。記得，程式開發最重要的就是動手做，所以大家一定要跟著教學實際操作喔！<br>大家有沒有想要更詳細補充的部分呢？歡迎在下方留言分享喔！讓我們一起在 Nuxt3 的世界中探險吧！加油！</p>
<br />
<hr />
<br />

<blockquote>
<p>希望這篇文章有幫助到你，謝謝你的觀看，若有想看的系列也歡迎告訴我 😉</p>
</blockquote>
]]></content>
      <tags>
        <tag>2024IT鐵人賽</tag>
        <tag>Nuxt3</tag>
      </tags>
  </entry>
  <entry>
    <title>[ 2024 IT 鐵人賽 DAY23 ] Nuxt3 開發必備：套件安裝懶人包</title>
    <url>/2024/10/02/2024it/d23/</url>
    <content><![CDATA[<p>哈囉大家早安！昨天我們成功建立了 Nuxt3 的開發環境，今天我們要來認識幾個超級實用的開發工具和套件。<br>這些工具就像是我們的小幫手，不只能讓我們的程式碼變得更漂亮、更好讀，還能幫我們省下不少除錯的時間呢！<br>準備好了嗎？讓我們一起打開 VSCode，開始今天的學習之旅吧！</p>
<span id="more"></span>

<div class="cus-intro-box">
    <h2>房東不給養鸚鵡 - 那就用 Nuxt + Express + MongoDB 30 天寫一個全端鸚鵡專案。</h2>
    <p>挑戰人生第一次鐵人賽，就來個佛心分享 side project，從專案發想、規劃、設計、資料庫、開發到部署，技術使用 Nuxt 3、Tailwind CSS、Pinia、Axios、Express、MongoDB，製作一個前後端分離的鸚鵡專案，功能主要介紹食物計算機和聯絡我們，希望可以讓更多人瞭解專案的完整流程 ✨</p>
    <a href="https://ithelp.ithome.com.tw/users/20159686/ironman/7564" target="_blank">IT 全文章連結</a>
</div>

<h2 id="1-Prettier：程式碼的美容師"><a href="#1-Prettier：程式碼的美容師" class="headerlink" title="1. Prettier：程式碼的美容師"></a>1. Prettier：程式碼的美容師</h2><p>首先登場的是 Prettier，它就像是程式碼的美容師。想像一下，如果程式碼是一個人，Prettier 就是那個幫你梳妝打扮的造型師，讓你的程式碼變得超級漂亮！</p>
<h3 id="Prettier-的魔力："><a href="#Prettier-的魔力：" class="headerlink" title="Prettier 的魔力："></a>Prettier 的魔力：</h3><ul>
<li>統一團隊的程式碼風格：再也不用為了要用單引號還是雙引號吵架啦！</li>
<li>自動處理程式碼格式：你專心寫邏輯，排版的事就交給 Prettier 啦！</li>
<li>支援超多程式語言：不管你是寫 JavaScript、TypeScript 還是 Vue，它都罩得住！</li>
</ul>
<h3 id="安裝步驟："><a href="#安裝步驟：" class="headerlink" title="安裝步驟："></a>安裝步驟：</h3><ol>
<li><p>在終端機輸入以下指令安裝 Prettier：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -D prettier prettier-plugin-tailwindcss</span><br></pre></td></tr></table></figure>
</li>
<li><p>在專案根目錄創建 <code>.prettierrc.cjs</code> 檔案：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> .prettierrc.cjs</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 <code>.prettierrc.cjs</code> 檔案中加入以下內容：</p>
 <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="string">&#x27;prettier-plugin-tailwindcss&#x27;</span>], <span class="comment">// 支援 Tailwind CSS 的類別排序</span></span><br><span class="line">  <span class="attr">printWidth</span>: <span class="number">100</span>, <span class="comment">// 設定每行最大長度為 100 字元</span></span><br><span class="line">  <span class="attr">semi</span>: <span class="literal">false</span>, <span class="comment">// 不在語句末尾加分號</span></span><br><span class="line">  <span class="attr">singleQuote</span>: <span class="literal">true</span>, <span class="comment">// 使用單引號而不是雙引號</span></span><br><span class="line">  <span class="attr">trailingComma</span>: <span class="string">&#x27;none&#x27;</span> <span class="comment">// 不在物件或陣列的最後一個元素後加逗號</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> <img src="https://ithelp.ithome.com.tw/upload/images/20241002/20159686XJs7hiUy5m.png" alt="https://ithelp.ithome.com.tw/upload/images/20241002/20159686XJs7hiUy5m.png"></p>
</li>
</ol>
<blockquote>
<p>小提醒：安裝完 Prettier 後，你的程式碼就會自動變得超級整齊喔！就像是幫你的房間請了一個專業整理師一樣，一切都會變得井井有條。</p>
</blockquote>
<h2 id="2-ESLint：程式碼的糾察隊"><a href="#2-ESLint：程式碼的糾察隊" class="headerlink" title="2. ESLint：程式碼的糾察隊"></a>2. ESLint：程式碼的糾察隊</h2><p>接下來是 ESLint，它就像是程式碼的糾察隊。如果 Prettier 是美容師，那 ESLint 就是那個幫你檢查儀容的嚴格老師，確保你的程式碼不只好看，還要有內涵！</p>
<h3 id="ESLint-的超能力："><a href="#ESLint-的超能力：" class="headerlink" title="ESLint 的超能力："></a>ESLint 的超能力：</h3><ul>
<li>強制執行程式碼風格規則：讓團隊的程式碼風格一致，就像大家都穿制服一樣整齊！</li>
<li>發現並修復常見的程式設計問題：它會幫你指出可能的 bug，就像是幫你檢查作業的好朋友。</li>
<li>提高程式碼品質：讓你的程式碼不只漂亮，還很聰明！</li>
</ul>
<h3 id="安裝步驟：-1"><a href="#安裝步驟：-1" class="headerlink" title="安裝步驟："></a>安裝步驟：</h3><ol>
<li><p>安裝 ESLint 和相關套件：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -D eslint @nuxtjs/eslint-config eslint-config-prettier eslint-plugin-prettier</span><br></pre></td></tr></table></figure>
</li>
<li><p>創建 <code>.eslintrc.js</code> 檔案：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> .eslintrc.js</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 <code>.eslintrc.js</code> 檔案中加入以下內容：</p>
 <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">env</span>: &#123;</span><br><span class="line">    <span class="attr">browser</span>: <span class="literal">true</span>, <span class="comment">// 允許使用瀏覽器全域變數</span></span><br><span class="line">    <span class="attr">es2023</span>: <span class="literal">true</span> <span class="comment">// 使用 ECMAScript 2023 特性</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">extends</span>: [<span class="string">&#x27;@nuxtjs&#x27;</span>, <span class="string">&#x27;prettier&#x27;</span>], <span class="comment">// 使用 Nuxt.js 和 Prettier 推薦的規則</span></span><br><span class="line">  <span class="attr">parserOptions</span>: &#123;</span><br><span class="line">    <span class="attr">ecmaVersion</span>: <span class="number">2023</span>, <span class="comment">// 指定 ECMAScript 版本</span></span><br><span class="line">    <span class="attr">sourceType</span>: <span class="string">&#x27;module&#x27;</span> <span class="comment">// 使用 ES 模組語法</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="string">&#x27;prettier&#x27;</span>], <span class="comment">// 使用 Prettier 插件</span></span><br><span class="line">  <span class="attr">rules</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;no-undef&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="comment">// 關閉未定義變數的警告（Nuxt 3 會自動處理）</span></span><br><span class="line">    <span class="string">&#x27;prettier/prettier&#x27;</span>: <span class="string">&#x27;error&#x27;</span> <span class="comment">// 將不符合 Prettier 規則的地方標記為錯誤</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">overrides</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">files</span>: [<span class="string">&#x27;**/*.js&#x27;</span>, <span class="string">&#x27;**/*.ts&#x27;</span>, <span class="string">&#x27;**/*.vue&#x27;</span>] <span class="comment">// 這些規則適用於所有 .js、.ts 和 .vue 文件</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<blockquote>
<p>小提醒：安裝 ESLint 後，你可能會看到一些紅色的波浪線。別擔心，這些就像是 ESLint 給你的小紙條，提醒你哪裡可以改得更好喔！</p>
</blockquote>
<h2 id="VS-Code-設定-儲存時同步整理程式碼"><a href="#VS-Code-設定-儲存時同步整理程式碼" class="headerlink" title="VS Code 設定 &gt; 儲存時同步整理程式碼"></a>VS Code 設定 &gt; 儲存時同步整理程式碼</h2><p>為了讓 Prettier 和 ESLint 這兩個好朋友在 VS Code 中發揮最大功效，我們需要做一些設定。這就像是幫它們倆安排一個最佳的工作環境，讓它們能夠完美合作！</p>
<ol>
<li><p>首先，先安裝 VS Code 的 Prettier 和 ESLint 擴充套件：</p>
<ol>
<li>點擊左側邊欄的擴充套件圖示（看起來像四個小方塊）。</li>
<li>在搜尋欄中輸入 “Prettier”。</li>
<li>找到 “Prettier - Code formatter”，點擊安裝。<br> <img src="https://ithelp.ithome.com.tw/upload/images/20241002/20159686Ny81Bsl8eZ.png" alt="https://ithelp.ithome.com.tw/upload/images/20241002/20159686Ny81Bsl8eZ.png"></li>
<li>接著在搜尋欄中輸入 “ESLint”。</li>
<li>找到由 Microsoft 發布的 “ESLint”，點擊安裝。<br> <img src="https://ithelp.ithome.com.tw/upload/images/20241002/201596869FE512HetI.png" alt="https://ithelp.ithome.com.tw/upload/images/20241002/201596869FE512HetI.png"></li>
</ol>
</li>
<li><p>接下來，我們要在專案根目錄創建一個 <code>.vscode</code> 資料夾，並在其中新增一個 <code>settings.json</code> 文件。這個文件會包含專案特定的 VS Code 設定。</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> .vscode</span><br><span class="line"><span class="built_in">touch</span> .vscode/settings.json</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 <code>.vscode/settings.json</code> 文件中，添加以下設定：</p>
 <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;editor.formatOnSave&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esbenp.prettier-vscode&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;prettier.requireConfig&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p> 這些設定的含義如下：</p>
<ul>
<li><code>&quot;editor.formatOnSave&quot;: true</code>：每次儲存文件時自動格式化程式碼。</li>
<li><code>&quot;editor.defaultFormatter&quot;: &quot;esbenp.prettier-vscode&quot;</code>：使用 Prettier 作為默認的程式碼格式化工具。</li>
<li><code>&quot;prettier.requireConfig&quot;: true</code>：要求必須有 Prettier 的配置文件才會執行格式化，這可以確保只在有 Prettier 配置的專案中使用 Prettier。</li>
</ul>
</li>
</ol>
<p>這樣設定後，每次你在 VS Code 中儲存文件時，它就會自動使用 Prettier 來格式化你的程式碼，並且使用 ESLint 來檢查和修復可能的問題。這可以大大提高你的開發效率，並確保程式碼風格的一致性。</p>
<blockquote>
<p>注意：這些設定是專案特定的，只會影響當前專案。如果你想要這些設定在所有專案中生效，你可以將它們加入到 VS Code 的全域設定中。</p>
</blockquote>
<blockquote>
<p>小提醒：完成這些設定後，每次你儲存檔案時，VS Code 就會自動幫你整理程式碼。就像是有一個小精靈，在你打完程式碼後，自動幫你整理好一切！</p>
</blockquote>
<h2 id="3-Tailwind-CSS：CSS-的魔法師"><a href="#3-Tailwind-CSS：CSS-的魔法師" class="headerlink" title="3. Tailwind CSS：CSS 的魔法師"></a>3. Tailwind CSS：CSS 的魔法師</h2><p>再來是 Tailwind CSS，它可以說是 CSS 界的魔法師。想像一下，如果寫 CSS 是畫畫，那 Tailwind 就是給你一盒現成的顏料，讓你可以快速完成一幅美麗的畫作！</p>
<h3 id="Tailwind-CSS-的神奇之處："><a href="#Tailwind-CSS-的神奇之處：" class="headerlink" title="Tailwind CSS 的神奇之處："></a>Tailwind CSS 的神奇之處：</h3><ul>
<li>大幅提高開發速度：用預設的類別快速設計版面，就像是用積木堆疊一樣簡單！</li>
<li>響應式設計變得超easy：不用寫一堆 media query，幾個類別就搞定。</li>
<li>自動優化 CSS 大小：它會自動移除你沒用到的樣式，讓你的網站變得更輕盈。</li>
</ul>
<h3 id="安裝步驟：-2"><a href="#安裝步驟：-2" class="headerlink" title="安裝步驟："></a>安裝步驟：</h3><ol>
<li><p>安裝 Tailwind CSS：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -D @nuxtjs/tailwindcss</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 <code>nuxt.config.ts</code> 中啟用 Tailwind CSS：</p>
 <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineNuxtConfig</span>(&#123;</span><br><span class="line">  <span class="attr">modules</span>: [<span class="string">&#x27;@nuxtjs/tailwindcss&#x27;</span>] <span class="comment">// 啟用 Tailwind CSS 模組</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p> <img src="https://ithelp.ithome.com.tw/upload/images/20241002/20159686eo4O4Nqhdz.png" alt="https://ithelp.ithome.com.tw/upload/images/20241002/20159686eo4O4Nqhdz.png"></p>
</li>
<li><p>創建 <code>tailwind.config.ts</code> 檔案：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> tailwind.config.ts</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 <code>tailwind.config.ts</code> 檔案中加入以下內容：</p>
 <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@type</span> &#123;<span class="type">import(&#x27;tailwindcss&#x27;).Config</span>&#125; */</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">content</span>: [</span><br><span class="line">    <span class="string">&#x27;./components/**/*.&#123;vue,js,ts&#125;&#x27;</span>, <span class="comment">// 掃描所有 Vue 組件</span></span><br><span class="line">    <span class="string">&#x27;./layouts/**/*.vue&#x27;</span>, <span class="comment">// 掃描所有布局文件</span></span><br><span class="line">    <span class="string">&#x27;./pages/**/*.vue&#x27;</span>, <span class="comment">// 掃描所有頁面文件</span></span><br><span class="line">    <span class="string">&#x27;./composables/**/*.&#123;js,ts&#125;&#x27;</span>, <span class="comment">// 掃描所有可組合式函數</span></span><br><span class="line">    <span class="string">&#x27;./plugins/**/*.&#123;js,ts&#125;&#x27;</span>, <span class="comment">// 掃描所有插件</span></span><br><span class="line">    <span class="string">&#x27;./utils/**/*.&#123;js,ts&#125;&#x27;</span>, <span class="comment">// 掃描所有工具函數</span></span><br><span class="line">    <span class="string">&#x27;./&#123;App,app&#125;.&#123;js,ts,vue&#125;&#x27;</span>, <span class="comment">// 掃描主應用文件</span></span><br><span class="line">    <span class="string">&#x27;./&#123;Error,error&#125;.&#123;js,ts,vue&#125;&#x27;</span>, <span class="comment">// 掃描錯誤處理文件</span></span><br><span class="line">    <span class="string">&#x27;./app.config.&#123;js,ts&#125;&#x27;</span> <span class="comment">// 掃描應用配置文件</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">theme</span>: &#123;</span><br><span class="line">    <span class="attr">extend</span>: &#123;&#125; <span class="comment">// 在這裡可以擴展或覆蓋 Tailwind 的默認主題</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [] <span class="comment">// 可以添加 Tailwind 插件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> <img src="https://ithelp.ithome.com.tw/upload/images/20241002/201596868gtRnmUjR0.png" alt="https://ithelp.ithome.com.tw/upload/images/20241002/201596868gtRnmUjR0.png"></p>
</li>
<li><p>完成設置後，可以打開 app.vue 測試是否成功</p>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 可以隱藏預設歡迎畫面，才不會找不到自己測試的文字 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;NuxtRouteAnnouncer /&gt; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;NuxtWelcome /&gt; --&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 輸入這行做測試 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text-5xl text-red-500&quot;</span>&gt;</span>測試文字<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>輸入指令執行專案</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure>
</li>
<li><p>成功可以看到類似下面畫面，上面設定字體大小跟顏色，所以看到紅色文字就代表成功囉 ~<br> <img src="https://ithelp.ithome.com.tw/upload/images/20241002/20159686YpNLLEgWNt.png" alt="https://ithelp.ithome.com.tw/upload/images/20241002/20159686YpNLLEgWNt.png"></p>
</li>
</ul>
</li>
</ol>
<h3 id="套件補充：Tailwind-CSS-IntelliSense"><a href="#套件補充：Tailwind-CSS-IntelliSense" class="headerlink" title="套件補充：Tailwind CSS IntelliSense"></a>套件補充：Tailwind CSS IntelliSense</h3><p>這個擴充套件可以為 Tailwind CSS 類別提供自動完成、語法高亮和 linting 功能。</p>
<ul>
<li>安裝這個擴充套件的步驟與前兩個相同，只需在搜尋欄中輸入 “Tailwind CSS” 即可找到。<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20241002/20159686s29zJ3g71T.png" alt="https://ithelp.ithome.com.tw/upload/images/20241002/20159686s29zJ3g71T.png"></li>
<li>安裝後可以將鼠標懸浮在 tailwind css 的 class 標籤上，會看到該樣式說明：<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20241002/20159686lFTiYEsmxw.png" alt="https://ithelp.ithome.com.tw/upload/images/20241002/20159686lFTiYEsmxw.png"></li>
</ul>
<h2 id="4-Axios：網路請求的超級英雄"><a href="#4-Axios：網路請求的超級英雄" class="headerlink" title="4. Axios：網路請求的超級英雄"></a>4. Axios：網路請求的超級英雄</h2><p>最後登場的是 Axios，它是處理 HTTP 請求的超級英雄，讓我們能輕鬆地與後端 API 溝通。</p>
<h3 id="Axios-的超能力："><a href="#Axios-的超能力：" class="headerlink" title="Axios 的超能力："></a>Axios 的超能力：</h3><ul>
<li>自動轉換 JSON 數據：不用自己解析 JSON 了，Axios 幫你搞定！</li>
<li>幫你防禦壞人：它有內建的防護機制，讓你的 API 請求更安全。</li>
<li>可以攔截請求和響應：就像是幫你的請求加上特效，讓你可以在送出前後做一些特別的處理。</li>
</ul>
<h3 id="安裝步驟：-3"><a href="#安裝步驟：-3" class="headerlink" title="安裝步驟："></a>安裝步驟：</h3><ol>
<li><p>安裝 Axios：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 <code>app.vue</code> 頁面中使用 Axios：</p>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 建立 script 區塊 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 創建一個自定義的 Axios 實例</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> api = axios.<span class="title function_">create</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">baseURL</span>: <span class="string">&#x27;https://two024it-test-app.onrender.com&#x27;</span> <span class="comment">// 設置基礎 URL，就不用一直重複修改</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 測試取資料</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> response = <span class="keyword">await</span> api.<span class="title function_">get</span>(<span class="string">&#x27;/freshfoods/&#x27;</span>) <span class="comment">// 獲取食物列表</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>) <span class="comment">// 處理響應數據</span></span></span><br><span class="line"><span class="language-javascript">  &#125; <span class="keyword">catch</span> (error) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;發生錯誤:&#x27;</span>, error) <span class="comment">// 錯誤處理</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">fetchData</span>()</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>API 資料可以到 Postman 查看自己前幾天測試的 URL，直接取用。<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20241002/20159686VBzVRo9xog.png" alt="https://ithelp.ithome.com.tw/upload/images/20241002/20159686VBzVRo9xog.png"></li>
</ul>
</li>
<li><p>可以打開 F12 查看，若測試成功會看到類似以下畫面：<br> <img src="https://ithelp.ithome.com.tw/upload/images/20241002/201596867G3mATDSUu.png" alt="https://ithelp.ithome.com.tw/upload/images/20241002/201596867G3mATDSUu.png"></p>
<blockquote>
<p>測試就先到這邊，之後會再詳細說明如何將資料顯示到畫面上 ~</p>
</blockquote>
</li>
</ol>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>哇！今天我們學了好多東西呢！我們認識了 Prettier 這個程式碼美容師、ESLint 這個嚴格的糾察隊、Tailwind CSS 這個 CSS 魔法師，還有 Axios 這個網路世界的超級英雄。這些工具就像是我們的得力助手，幫我們打造出更好的程式碼和更棒的網站。<br>別擔心如果現在還不太會用這些工具，就像學習任何新技能一樣，需要時間和練習。重要的是，我們已經認識了這些好朋友，接下來就是要多多和它們相處啦！<br>大家有沒有想要更詳細補充的部分呢？歡迎在下方留言分享喔！讓我們一起在 Nuxt3 的世界中探險吧！加油！</p>
<br />
<hr />
<br />

<blockquote>
<p>希望這篇文章有幫助到你，謝謝你的觀看，若有想看的系列也歡迎告訴我 😉</p>
</blockquote>
]]></content>
      <tags>
        <tag>2024IT鐵人賽</tag>
        <tag>Nuxt3</tag>
      </tags>
  </entry>
  <entry>
    <title>[ 2024 IT 鐵人賽 DAY24 ] Nuxt3 魔法教室：Vue 語法速成班</title>
    <url>/2024/10/03/2024it/d24/</url>
    <content><![CDATA[<p>嗨大家好！今天我們要來學習 Nuxt3 中一些超實用的 Vue 語法。就算你是 Vue 新手，看完這篇文章也能快速上手喔！讓我們一起來認識這些前端魔法吧！</p>
<span id="more"></span>

<div class="cus-intro-box">
    <h2>房東不給養鸚鵡 - 那就用 Nuxt + Express + MongoDB 30 天寫一個全端鸚鵡專案。</h2>
    <p>挑戰人生第一次鐵人賽，就來個佛心分享 side project，從專案發想、規劃、設計、資料庫、開發到部署，技術使用 Nuxt 3、Tailwind CSS、Pinia、Axios、Express、MongoDB，製作一個前後端分離的鸚鵡專案，功能主要介紹食物計算機和聯絡我們，希望可以讓更多人瞭解專案的完整流程 ✨</p>
    <a href="https://ithelp.ithome.com.tw/users/20159686/ironman/7564" target="_blank">IT 全文章連結</a>
</div>

<h2 id="條件渲染：v-if-和-v-show"><a href="#條件渲染：v-if-和-v-show" class="headerlink" title="條件渲染：v-if 和 v-show"></a>條件渲染：v-if 和 v-show</h2><p>這兩個指令都用於控制元素的顯示，但有微妙的區別：</p>
<h3 id="v-if：決定元素是否要被渲染"><a href="#v-if：決定元素是否要被渲染" class="headerlink" title="v-if：決定元素是否要被渲染"></a>v-if：決定元素是否要被渲染</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> isVisible = <span class="title function_">ref</span>(<span class="literal">true</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;isVisible&quot;</span>&gt;</span>我只有在 isVisible 為 true 時才會出現！<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>當 <code>isVisible</code> 為 false 時，這個 div 元素完全不會被渲染到 DOM 中。</p>
<h3 id="v-show：決定元素是否要被顯示（但一定會被渲染）"><a href="#v-show：決定元素是否要被顯示（但一定會被渲染）" class="headerlink" title="v-show：決定元素是否要被顯示（但一定會被渲染）"></a>v-show：決定元素是否要被顯示（但一定會被渲染）</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&quot;isVisible&quot;</span>&gt;</span>我一定會被渲染，但只有在 isVisible 為 true 時才會顯示！<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用 v-show 時，元素始終會被渲染並保留在 DOM 中，只是通過 CSS 的 display 屬性來控制其顯示與否。</p>
<blockquote>
<p>小提醒：v-if 適合不常變動的情況，因為它涉及 DOM 的重新渲染；v-show 適合頻繁切換的情況，因為它只是切換 CSS 屬性。</p>
</blockquote>
<h2 id="列表渲染：v-for"><a href="#列表渲染：v-for" class="headerlink" title="列表渲染：v-for"></a>列表渲染：v-for</h2><p>v-for 用來重複渲染元素或組件，非常適合用於展示列表數據：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> items = <span class="title function_">ref</span>([<span class="string">&#x27;蘋果&#x27;</span>, <span class="string">&#x27;香蕉&#x27;</span>, <span class="string">&#x27;橘子&#x27;</span>])</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in items&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123; item &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>這裡，v-for 會遍歷 items 數組，為每個元素創建一個 <li>。<br>index 是當前元素的索引。<br>:key 是非常重要的，它幫助 Vue 跟蹤每個節點的身份，從而重用和重新排序現有元素。</p>
<h2 id="事件處理：v-on"><a href="#事件處理：v-on" class="headerlink" title="事件處理：v-on (@)"></a>事件處理：v-on (@)</h2><p>v-on 指令用來監聽 DOM 事件，並在事件觸發時執行一些 JavaScript 代碼：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">alert</span>(<span class="string">&#x27;哈囉，歡迎來到 Nuxt3 魔法世界！&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sayHello&quot;</span>&gt;</span>點我說哈囉<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>這裡 @click 是 v-on:click 的縮寫。當按鈕被點擊時，sayHello 函數就會被調用。</p>
<h2 id="雙向綁定：v-model"><a href="#雙向綁定：v-model" class="headerlink" title="雙向綁定：v-model"></a>雙向綁定：v-model</h2><p>v-model 指令在表單輸入和組件上創建雙向數據綁定：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> message = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;輸入些什麼吧&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>你輸入的是：&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>當用戶在輸入框中輸入內容時，message 的值會自動更新。同時，如果 message 的值在別處被改變，輸入框的內容也會相應更新。</p>
<h2 id="生命週期鉤子"><a href="#生命週期鉤子" class="headerlink" title="生命週期鉤子"></a>生命週期鉤子</h2><p>在 Nuxt3 中，我們主要使用 Composition API 的生命週期鉤子。這些鉤子讓我們能在組件生命週期的特定階段執行代碼：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;組件已經掛載到 DOM 上了！&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 這裡可以進行一些初始化操作，比如獲取數據</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">onUnmounted</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;組件即將被銷毀了！&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 這裡可以進行一些清理操作，比如取消訂閱、清除定時器等</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>onMounted 會在組件掛載到 DOM 後立即調用，而 onUnmounted 會在組件即將被銷毀時調用。</p>
<h3 id="計算屬性：computed"><a href="#計算屬性：computed" class="headerlink" title="計算屬性：computed"></a>計算屬性：computed</h3><p>computed 用於處理任何複雜邏輯，它會根據其依賴的響應式數據自動更新：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> message = <span class="title function_">ref</span>(<span class="string">&#x27;Hello, Nuxt3!&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> reversedMessage = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">return</span> message.<span class="property">value</span>.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>反轉後的訊息：&#123;&#123; reversedMessage &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>這裡，reversedMessage 是一個計算屬性，它依賴於 message。當 message 變化時，reversedMessage 會自動重新計算。</p>
<h3 id="監聽器：watch"><a href="#監聽器：watch" class="headerlink" title="監聽器：watch"></a>監聽器：watch</h3><p>watch 用於觀察和響應數據的變化：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> message = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 增加計數的函數</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  count.<span class="property">value</span>++</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 減少計數的函數</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">decrement</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  count.<span class="property">value</span>--</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 使用 watch 來觀察 count 的變化</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">watch</span>(count, <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  message.<span class="property">value</span> = <span class="string">`計數從 <span class="subst">$&#123;oldValue&#125;</span> 變成 <span class="subst">$&#123;newValue&#125;</span> 了！`</span></span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">if</span> (newValue &gt; oldValue) &#123;</span></span><br><span class="line"><span class="language-javascript">    message.<span class="property">value</span> += <span class="string">&#x27; 數字在增加！&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    message.<span class="property">value</span> += <span class="string">&#x27; 數字在減少！&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>目前計數：&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span>增加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;decrement&quot;</span>&gt;</span>減少<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在這個範例中：</p>
<ol>
<li>我們定義了一個 <code>count</code> ref 來儲存計數值，和一個 <code>message</code> ref 來顯示訊息。</li>
<li><code>increment</code> 和 <code>decrement</code> 函數分別用來增加和減少計數。這些函數與模板中的按鈕通過 <code>@click</code> 事件綁定。</li>
<li><code>watch</code> 函數用來觀察 <code>count</code> 的變化。每當 <code>count</code> 變化時，它就會更新 <code>message</code>：<ul>
<li>它會告訴我們計數從什麼值變成什麼值。</li>
<li>它會告訴我們數字是在增加還是減少。</li>
</ul>
</li>
<li>在模板中，我們顯示當前的計數，兩個可以改變計數的按鈕，以及一個顯示 <code>message</code> 的段落。</li>
</ol>
<h2 id="動態綁定：v-bind"><a href="#動態綁定：v-bind" class="headerlink" title="動態綁定：v-bind (:)"></a>動態綁定：v-bind (:)</h2><p>v-bind 指令用於動態綁定一個或多個屬性，或者一個組件 prop 到表達式：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> imageSrc = <span class="title function_">ref</span>(<span class="string">&#x27;/path/to/image.jpg&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> imageAlt = <span class="title function_">ref</span>(<span class="string">&#x27;一張可愛的貓咪圖片&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;imageSrc&quot;</span> <span class="attr">:alt</span>=<span class="string">&quot;imageAlt&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>這裡，:src 是 v-bind:src 的縮寫。當 imageSrc 或 imageAlt 的值發生變化時，img 標籤的 src 和 alt 屬性會自動更新。<br>這些 Vue 語法是在 Nuxt3 中經常使用的基礎”魔法”。掌握了這些，你就能在 Nuxt3 的世界中自由翱翔啦！記住，學習編程就像學習魔法一樣，需要不斷練習。不要怕犯錯，多嘗試、多實驗，你很快就會成為 Nuxt3 的魔法師！<br>大家有沒有想要更詳細補充的部分呢？歡迎在下方留言分享喔！讓我們一起在 Nuxt3 的世界中探險吧！加油！</p>
<br />
<hr />
<br />

<blockquote>
<p>希望這篇文章有幫助到你，謝謝你的觀看，若有想看的系列也歡迎告訴我 😉</p>
</blockquote>
]]></content>
      <tags>
        <tag>2024IT鐵人賽</tag>
        <tag>Nuxt3</tag>
        <tag>Vue3</tag>
      </tags>
  </entry>
  <entry>
    <title>[ 2024 IT 鐵人賽 DAY25 ] Nuxt 3 開發之旅：顏色、圖示、導航欄到動畫效果</title>
    <url>/2024/10/04/2024it/d25/</url>
    <content><![CDATA[<p>哈囉大家好！今天我們要來玩點有趣的東西了 —— 我們要開始打造我們的網頁骨架啦！想像一下，我們今天要給我們的 Nuxt3 專案穿上漂亮的衣服，讓它不再只是一個空蕩蕩的框架。準備好了嗎？讓我們開始吧！</p>
<span id="more"></span>

<div class="cus-intro-box">
    <h2>房東不給養鸚鵡 - 那就用 Nuxt + Express + MongoDB 30 天寫一個全端鸚鵡專案。</h2>
    <p>挑戰人生第一次鐵人賽，就來個佛心分享 side project，從專案發想、規劃、設計、資料庫、開發到部署，技術使用 Nuxt 3、Tailwind CSS、Pinia、Axios、Express、MongoDB，製作一個前後端分離的鸚鵡專案，功能主要介紹食物計算機和聯絡我們，希望可以讓更多人瞭解專案的完整流程 ✨</p>
    <a href="https://ithelp.ithome.com.tw/users/20159686/ironman/7564" target="_blank">IT 全文章連結</a>
</div>

<h2 id="先來看看我們的目標"><a href="#先來看看我們的目標" class="headerlink" title="先來看看我們的目標"></a>先來看看我們的目標</h2><p>首先，讓我們來看看我們要做出來的頁面吧：</p>
<ol>
<li><p>聯繫我們頁面：<br> <img src="https://ithelp.ithome.com.tw/upload/images/20241004/20159686rwAHn5G0v1.png" alt="https://ithelp.ithome.com.tw/upload/images/20241004/20159686rwAHn5G0v1.png"></p>
</li>
<li><p>食物計算機頁面：<br> <img src="https://ithelp.ithome.com.tw/upload/images/20241004/201596866yJAOVpWxa.png" alt="https://ithelp.ithome.com.tw/upload/images/20241004/201596866yJAOVpWxa.png"><img src="https://ithelp.ithome.com.tw/upload/images/20241004/20159686xYndNzmg8V.png" alt="https://ithelp.ithome.com.tw/upload/images/20241004/20159686xYndNzmg8V.png"></p>
</li>
</ol>
<p>是不是看起來很酷？接下來我們會一步一步把這些頁面實現出來 (但不是今天)！</p>
<h2 id="開始動手做吧！"><a href="#開始動手做吧！" class="headerlink" title="開始動手做吧！"></a>開始動手做吧！</h2><h3 id="1-整理-app-vue"><a href="#1-整理-app-vue" class="headerlink" title="1. 整理 app.vue"></a>1. 整理 app.vue</h3><p>首先，我們要整理一下 <code>app.vue</code>。這個檔案就像是我們網站的大骨架，所有的頁面都會包在這裡面。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import axios from &#x27;axios&#x27;</span><br><span class="line"></span><br><span class="line">// 建立一個 Axios 實例，就像是給我們的 API 請求一個專屬的小幫手</span><br><span class="line">const api = axios.create(&#123;</span><br><span class="line">  baseURL: &#x27;https://two024it-test-app.onrender.com&#x27;// 設定基礎 URL</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const list = ref([])</span><br><span class="line"></span><br><span class="line">// 取得資料的函式</span><br><span class="line">async function fetchData() &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    const response = await api.get(&#x27;/freshfoods/&#x27;)// 取得食物列表</span><br><span class="line">    console.log(response.data)// 在控制台印出回應資料</span><br><span class="line">    list.value = response.data</span><br><span class="line">  &#125; catch (error) &#123;</span><br><span class="line">    console.error(&#x27;哎呀，出錯了：&#x27;, error)// 錯誤處理</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">  fetchData()</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;relative flex min-h-screen w-full flex-col&quot;&gt;</span><br><span class="line">&lt;!-- 導航欄 --&gt;</span><br><span class="line">    &lt;header class=&quot;z-20&quot;&gt;</span><br><span class="line">&lt;!-- &lt;Header /&gt; --&gt;</span><br><span class="line">    &lt;/header&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 頁面內容 --&gt;</span><br><span class="line">    &lt;main class=&quot;page-wrapper&quot;&gt;</span><br><span class="line">      &lt;NuxtPage /&gt;</span><br><span class="line">    &lt;/main&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.page-wrapper &#123;</span><br><span class="line">  @apply mx-auto flex w-full max-w-[1200px] grow px-3 pb-5 pt-[52px] lg:px-5 lg:pt-[64px];</span><br><span class="line">  align-items: start;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>這裡我們用了 <code>&lt;NuxtPage /&gt;</code> 組件，它就像是一個神奇的佔位符，Nuxt 會自動把我們的頁面內容放在這裡。</p>
<h3 id="2-建立首頁"><a href="#2-建立首頁" class="headerlink" title="2. 建立首頁"></a>2. 建立首頁</h3><p>接下來，我們要在 <code>pages</code> 資料夾裡新增一個 <code>index.vue</code> 檔案。這就是我們的首頁啦！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;index&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>當你執行專案並進入首頁時，你會看到 “index” 這個字。這是因為 <code>&lt;NuxtPage /&gt;</code> 幫我們把 <code>pages/index.vue</code> 的內容放到那裡了。是不是很神奇？<br><img src="https://ithelp.ithome.com.tw/upload/images/20241004/20159686JZuLvNIisZ.png" alt="https://ithelp.ithome.com.tw/upload/images/20241004/20159686JZuLvNIisZ.png"></p>
<h3 id="3-新增其他頁面"><a href="#3-新增其他頁面" class="headerlink" title="3. 新增其他頁面"></a>3. 新增其他頁面</h3><p>接著，我們要在 <code>pages</code> 資料夾裡新增所有需要的頁面。我會新增以下頁面：</p>
<ul>
<li><code>index.vue</code>（首頁，已存在）</li>
<li><code>calculator.vue</code>（食物計算機）</li>
<li><code>food.vue</code>（營養指南）</li>
<li><code>bird.vue</code>（百科全書）</li>
<li><code>hospital.vue</code>（醫護站）</li>
<li><code>connect.vue</code>（聯繫我們）</li>
</ul>
<p>每個檔案可以使用以下基本結構：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;頁面標題&lt;/h1&gt;</span><br><span class="line">    &lt;!-- 在這裡添加頁面內容 --&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">// 這裡可以添加需要的 JavaScript 邏輯</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">/* 這裡可以添加頁面專屬的樣式 */</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h3 id="4-設定網站基礎配色"><a href="#4-設定網站基礎配色" class="headerlink" title="4. 設定網站基礎配色"></a>4. 設定網站基礎配色</h3><p>為了讓我們的網站看起來更漂亮，我們要設定一些基礎的顏色。打開 <code>tailwind.config.ts</code>，加入以下程式碼：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="attr">extend</span>: &#123;</span><br><span class="line">  <span class="attr">colors</span>: &#123;</span><br><span class="line">    <span class="attr">blue1</span>: <span class="string">&#x27;#e9f1fe&#x27;</span>,</span><br><span class="line">    <span class="attr">blue2</span>: <span class="string">&#x27;#c4d7ed&#x27;</span>,</span><br><span class="line">    <span class="attr">blue3</span>: <span class="string">&#x27;#abc8e2&#x27;</span>,</span><br><span class="line">    <span class="attr">blue4</span>: <span class="string">&#x27;#375d81&#x27;</span>,</span><br><span class="line">    <span class="attr">blue5</span>: <span class="string">&#x27;#183152&#x27;</span>,</span><br><span class="line">    <span class="attr">red1</span>: <span class="string">&#x27;#ffaeaa&#x27;</span>,</span><br><span class="line">    <span class="attr">red2</span>: <span class="string">&#x27;#ed6f69&#x27;</span>,</span><br><span class="line">    <span class="attr">bg</span>: <span class="string">&#x27;#fff6ea&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這樣我們就可以用像 <code>text-blue3</code> 這樣的 class 來使用我們自定義的顏色了！超方便的吧？<br><img src="https://ithelp.ithome.com.tw/upload/images/20241004/20159686FifMXEgU2X.png" alt="https://ithelp.ithome.com.tw/upload/images/20241004/20159686FifMXEgU2X.png"></p>
<h3 id="5-安裝和使用-Nuxt-Icon"><a href="#5-安裝和使用-Nuxt-Icon" class="headerlink" title="5. 安裝和使用 Nuxt Icon"></a>5. 安裝和使用 Nuxt Icon</h3><ol>
<li><p>安裝圖示套件：</p>
<ul>
<li><p>開啟終端機，在專案根目錄執行以下指令安裝 Nuxt Icon 模組：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -D @nuxt/icon</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>設定 Nuxt：</p>
<ul>
<li><p>打開 <code>nuxt.config.ts</code> 檔案。</p>
</li>
<li><p>在 <code>modules</code> 陣列中添加 <code>nuxt-icon</code>：</p>
  <figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineNuxtConfig</span>(&#123;</span><br><span class="line">  <span class="attr">devtools</span>: &#123; <span class="attr">enabled</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  <span class="attr">modules</span>: [<span class="string">&#x27;@nuxtjs/tailwindcss&#x27;</span>, <span class="string">&#x27;@nuxt-icon&#x27;</span>]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>使用圖示：</p>
<ul>
<li><p>前往 <a href="https://icones.js.org/">Icones</a> 網站尋找需要的圖示。</p>
</li>
<li><p>複製您選擇的圖示名稱。<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20241004/20159686xI1BDvJT4b.png" alt="https://ithelp.ithome.com.tw/upload/images/20241004/20159686xI1BDvJT4b.png"></p>
</li>
<li><p>在頁面中使用以下格式插入圖示：</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Icon name=&quot;ph:hand-tap&quot; size=&quot;20&quot;&gt;&lt;/Icon&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>name</code> 屬性中填入您剛剛複製的圖示名稱。</p>
</li>
<li><p><code>size</code> 屬性用來控制圖示大小。</p>
</li>
</ul>
<blockquote>
<p>注意：這邊如果貼在 <code>Header.vue</code> 測試會看不到哦，因為我們 <code>app.vue</code> 的 <code>Header</code> 元件是註解的狀態 &gt;&lt;</p>
</blockquote>
</li>
<li><p>實用提示：</p>
<ul>
<li><p>推薦安裝 VS Code 擴充套件：<strong>Iconify IntelliSense</strong><br>  <img src="https://ithelp.ithome.com.tw/upload/images/20241004/20159686d4uvYZPdFR.png" alt="https://ithelp.ithome.com.tw/upload/images/20241004/20159686d4uvYZPdFR.png"></p>
</li>
<li><p>這個擴充套件可以將程式碼中的圖示名稱轉換為可視化的圖示，方便預覽和選擇。<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20241004/201596861xBSMcLCUf.png" alt="https://ithelp.ithome.com.tw/upload/images/20241004/201596861xBSMcLCUf.png"></p>
</li>
</ul>
</li>
</ol>
<p>完成以上步驟後，您就可以在專案中使用漂亮的圖示了！</p>
<h3 id="6-建立元件-components-資料夾"><a href="#6-建立元件-components-資料夾" class="headerlink" title="6. 建立元件 components 資料夾"></a>6. 建立元件 <code>components</code> 資料夾</h3><ol>
<li><p>在專案根目錄新增一個 <code>components</code> 資料夾。<br> 這個資料夾將用來存放所有的 Vue 元件。</p>
</li>
<li><p>在 <code>components</code> 資料夾內新增一個 <code>Header.vue</code> 檔案。<br> 這個檔案將包含我們的導航欄元件程式碼。</p>
</li>
</ol>
<h3 id="7-建立資源-assets-資料夾"><a href="#7-建立資源-assets-資料夾" class="headerlink" title="7. 建立資源 assets 資料夾"></a>7. 建立資源 <code>assets</code> 資料夾</h3><ol>
<li>在專案根目錄新增一個 <code>assets</code> 資料夾。<br>這個資料夾用於存放靜態資源，如圖片、樣式表等。</li>
<li>在 <code>assets</code> 資料夾內新增一個 <code>images</code> 資料夾。<br>這個資料夾將專門用來存放圖片檔案。</li>
<li>將 LOGO 圖片放入 <code>assets/images</code> 資料夾中。<br> <img src="https://ithelp.ithome.com.tw/upload/images/20241004/201596860YI7cnLsxd.png" alt="https://ithelp.ithome.com.tw/upload/images/20241004/201596860YI7cnLsxd.png"></li>
</ol>
<h3 id="8-建立-建立全局樣式文件"><a href="#8-建立-建立全局樣式文件" class="headerlink" title="8. 建立 建立全局樣式文件"></a>8. 建立 建立全局樣式文件</h3><p>在這個步驟中，我們將創建一個全局的 CSS 文件，用於定義整個應用程序的基本樣式和一些通用的 CSS 類。</p>
<ol>
<li><p>在專案根目錄下創建 <code>assets/css/main.css</code> 文件。</p>
</li>
<li><p>將以下內容複製到 <code>main.css</code> 文件中：</p>
 <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> url(<span class="string">&#x27;https://fonts.googleapis.com/css2?family=Noto+Sans+TC:wght@100..900&amp;display=swap&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="attr">--color-blue1</span>: <span class="number">#e9f1fe</span>;</span><br><span class="line">  <span class="attr">--color-blue2</span>: <span class="number">#c4d7ed</span>;</span><br><span class="line">  <span class="attr">--color-blue3</span>: <span class="number">#abc8e2</span>;</span><br><span class="line">  <span class="attr">--color-blue4</span>: <span class="number">#375d81</span>;</span><br><span class="line">  <span class="attr">--color-blue5</span>: <span class="number">#183152</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attr">--color-red1</span>: <span class="number">#ffaeaa</span>;</span><br><span class="line">  <span class="attr">--color-red2</span>: <span class="number">#ed6f69</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attr">--color-bg</span>: <span class="number">#fff6ea</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;Noto Sans TC&#x27;</span>, sans-serif;</span><br><span class="line">  <span class="attribute">letter-spacing</span>: <span class="number">1.25px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">var</span>(--color-bg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 消樣式 */</span></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:focus-visible</span> &#123;</span><br><span class="line">  <span class="attribute">outline</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">textarea</span><span class="selector-pseudo">:focus-visible</span> &#123;</span><br><span class="line">  <span class="attribute">outline</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">select</span><span class="selector-pseudo">:focus-visible</span> &#123;</span><br><span class="line">  <span class="attribute">outline</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 圖片通用 */</span></span><br><span class="line"><span class="selector-class">.pic-auto</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">object-fit</span>: cover;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 限制最大寬度 !&gt; 1200px, 搭配 px-5 使用 */</span></span><br><span class="line"><span class="selector-class">.page-max-w</span> &#123;</span><br><span class="line">  <span class="keyword">@apply</span> mx-auto w-full max-w-[<span class="number">1200px</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* hover 效果 */</span></span><br><span class="line"><span class="selector-class">.hover-auto</span> &#123;</span><br><span class="line">  <span class="keyword">@apply</span> transform duration-<span class="number">200</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 讓我們來解析這個 CSS 文件的各個部分：</p>
<ol>
<li>字體導入：<ul>
<li>使用 Google Fonts 導入 Noto Sans TC 字體，這是一種適合中文顯示的sans-serif字體。</li>
</ul>
</li>
<li>CSS 變數定義：<ul>
<li>在 <code>:root</code> 選擇器中定義了一系列顏色變數，包括不同深淺的藍色、紅色和背景色。</li>
<li>使用 CSS 變數可以讓我們在整個應用中方便地管理和修改顏色。</li>
</ul>
</li>
<li>全局樣式：<ul>
<li>為 <code>body</code> 元素設置了字體、字間距和背景色。</li>
</ul>
</li>
<li>表單元素樣式重置：<ul>
<li>移除了 <code>input</code>、<code>textarea</code> 和 <code>select</code> 元素在獲得焦點時的默認輪廓。</li>
</ul>
</li>
<li>通用圖片樣式：<ul>
<li><code>.pic-auto</code> 類提供了一種便捷的方式來設置圖片的寬高和適應方式。</li>
</ul>
</li>
<li>頁面最大寬度限制：<ul>
<li><code>.page-max-w</code> 類用於限制內容的最大寬度，通常與 padding 一起使用來創建響應式佈局。</li>
</ul>
</li>
<li>Hover 效果：<ul>
<li><code>.hover-auto</code> 類為元素添加了過渡效果，可用於創建平滑的懸停動畫。</li>
</ul>
</li>
</ol>
</li>
<li><p>要在專案中使用這個 CSS 文件，需要在 <code>nuxt.config.ts</code> 中進行配置：</p>
 <figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineNuxtConfig</span>(&#123;</span><br><span class="line">  <span class="attr">css</span>: [<span class="string">&#x27;~/assets/css/main.css&#x27;</span>],</span><br><span class="line"><span class="comment">// 其他配置...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p> 這樣，<code>main.css</code> 中定義的樣式就會被應用到整個專案中。您可以在元件中直接使用這些 CSS 類和變數，例如：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;page-max-w&quot;&gt;</span><br><span class="line">    &lt;img src=&quot;...&quot; alt=&quot;...&quot; class=&quot;pic-auto hover-auto&quot; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.custom-element &#123;</span><br><span class="line">  color: var(--color-blue4);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p> 通過這種方式，我們可以確保整個應用程序有一致的樣式，同時也方便了樣式的管理和修改。</p>
</li>
</ol>
<h3 id="9-查看設計稿"><a href="#9-查看設計稿" class="headerlink" title="9. 查看設計稿"></a>9. 查看設計稿</h3><p>在開始編寫程式碼之前，請仔細查看導航欄的設計稿：</p>
<ul>
<li>左側是 LOGO</li>
<li>右側是導航選項<br><img src="https://ithelp.ithome.com.tw/upload/images/20241004/20159686HxVuW3xe6F.png" alt="https://ithelp.ithome.com.tw/upload/images/20241004/20159686HxVuW3xe6F.png"><img src="https://ithelp.ithome.com.tw/upload/images/20241004/20159686eNQ7XI4uib.png" alt="https://ithelp.ithome.com.tw/upload/images/20241004/20159686eNQ7XI4uib.png"><br>這個設計將指導我們如何構建 <code>Header.vue</code> 元件的結構和樣式。<br>完成這些步驟後，我們就準備好開始製作導航欄元件了。接下來，我們將開始編寫 <code>Header.vue</code> 的內容，實現設計稿中的導航欄功能。</li>
</ul>
<h2 id="導航欄詳細製作步驟"><a href="#導航欄詳細製作步驟" class="headerlink" title="導航欄詳細製作步驟"></a>導航欄詳細製作步驟</h2><h3 id="1-建立基本結構"><a href="#1-建立基本結構" class="headerlink" title="1. 建立基本結構"></a>1. 建立基本結構</h3><p>首先，我們要在 <code>components</code> 資料夾裡新增一個 <code>Header.vue</code> 檔案。這個檔案會包含我們導航欄的所有程式碼。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">// 這裡放 JavaScript 程式碼</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;!-- 這裡放 HTML 結構 --&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">/* 這裡放 CSS 樣式 */</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>這是 Vue 單文件組件的基本結構。<code>&lt;script setup&gt;</code> 區塊用於 JavaScript 邏輯，<code>&lt;template&gt;</code> 用於 HTML 結構，<code>&lt;style scoped&gt;</code> 用於 CSS 樣式。</p>
<h3 id="2-製作-Logo"><a href="#2-製作-Logo" class="headerlink" title="2. 製作 Logo"></a>2. 製作 Logo</h3><p>我們先來放置網站的 Logo：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;nuxt-link to=&quot;/&quot; class=&quot;logo fixed left-5 top-2 w-[32px] lg:w-[40px]&quot;&gt;</span><br><span class="line">    &lt;img src=&quot;~/assets/images/logo.svg&quot; alt=&quot;logo&quot; class=&quot;pic-auto&quot; /&gt;</span><br><span class="line">  &lt;/nuxt-link&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<p>這段程式碼做了什麼呢？</p>
<ul>
<li><code>nuxt-link</code> 是 Nuxt 提供的特殊連結元件，這裡我們用它來連到首頁 <code>&quot;/&quot;</code>。</li>
<li><code>class</code> 裡的內容是使用 Tailwind CSS 來設定樣式，例如 <code>fixed</code> 表示固定位置，<code>left-5</code> 和 <code>top-2</code> 設定位置，<code>w-[32px]</code> 設定寬度。</li>
<li><code>img</code> 標籤用來顯示 Logo 圖片：<ul>
<li><code>src=&quot;~/assets/images/logo.svg&quot;</code> 指定了 Logo 圖片的路徑。<code>~</code> 是 Nuxt.js 中的特殊符號，代表專案的根目錄。這表示圖片位於專案的 <code>assets/images</code> 資料夾中。</li>
</ul>
</li>
</ul>
<h3 id="3-製作選單按鈕"><a href="#3-製作選單按鈕" class="headerlink" title="3. 製作選單按鈕"></a>3. 製作選單按鈕</h3><p>接下來，我們來做選單按鈕：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">const route = useRoute()</span><br><span class="line">const menuOpen = ref(false)</span><br><span class="line"></span><br><span class="line">const toggleMenu = () =&gt; &#123;</span><br><span class="line">  menuOpen.value = !menuOpen.value</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;relative&quot;&gt;</span><br><span class="line">    &lt;button v-show=&quot;!menuOpen&quot; @click=&quot;toggleMenu&quot; class=&quot;nav-btn&quot;&gt;</span><br><span class="line">      &lt;Icon name=&quot;ph:hand-tap&quot; size=&quot;20&quot;&gt;&lt;/Icon&gt;</span><br><span class="line"></span><br><span class="line">      &lt;div v-if=&quot;route.path === &#x27;/&#x27;&quot;&gt;首頁&lt;/div&gt;</span><br><span class="line">      &lt;div v-else-if=&quot;route.path === &#x27;/calculator&#x27;&quot;&gt;食物計算機&lt;/div&gt;</span><br><span class="line">      &lt;div v-else-if=&quot;route.path === &#x27;/food&#x27;&quot;&gt;營養指南&lt;/div&gt;</span><br><span class="line">      &lt;div v-else-if=&quot;route.path === &#x27;/bird&#x27;&quot;&gt;百科全書&lt;/div&gt;</span><br><span class="line">      &lt;div v-else-if=&quot;route.path === &#x27;/hospital&#x27;&quot;&gt;醫護站&lt;/div&gt;</span><br><span class="line">      &lt;div v-else=&quot;route.path === &#x27;/connect&#x27;&quot;&gt;聯繫我們&lt;/div&gt;</span><br><span class="line">    &lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.nav-btn &#123;</span><br><span class="line">  @apply bg-bg text-blue4 border-blue4 fixed right-0 top-0 z-20 flex w-[140px] items-center justify-center gap-[6px] rounded-bl-[6px] border-b border-l bg-opacity-20 p-[10px] font-bold backdrop-blur-sm;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>讓我解釋一下這段程式碼：</p>
<ol>
<li><code>const route = useRoute()</code> 讓我們可以知道現在在哪個頁面。</li>
<li><code>menuOpen</code> 是一個變數，用來記錄選單是開啟還是關閉的。</li>
<li><code>toggleMenu</code> 函式用來切換選單的開關狀態。</li>
<li>在 <code>template</code> 中，我們用 <code>v-show=&quot;!menuOpen&quot;</code> 來控制按鈕的顯示。</li>
<li><code>@click=&quot;toggleMenu&quot;</code> 表示當按鈕被點擊時，會呼叫 <code>toggleMenu</code> 函式。</li>
<li>我們用一系列的 <code>v-if</code> 和 <code>v-else-if</code> 來根據不同的頁面路徑顯示不同的文字。</li>
<li><code>Icon</code> 元件是用來顯示一個小圖示。</li>
</ol>
<h3 id="4-製作選單內容"><a href="#4-製作選單內容" class="headerlink" title="4. 製作選單內容"></a>4. 製作選單內容</h3><p>現在來製作選單的主要內容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;relative&quot;&gt;</span><br><span class="line">    &lt;!-- 前面的按鈕程式碼 --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div v-show=&quot;menuOpen&quot; class=&quot;nav-menu&quot;&gt;</span><br><span class="line">      &lt;button class=&quot;nav-menu-item&quot; @click=&quot;toggleMenu&quot;&gt;CLOSE&lt;/button&gt;</span><br><span class="line">      &lt;nuxt-link class=&quot;nav-menu-item&quot; exact-active-class=&quot;bg-blue4 bg-opacity-15&quot; to=&quot;/&quot;&gt;首頁&lt;/nuxt-link&gt;</span><br><span class="line">      &lt;nuxt-link class=&quot;nav-menu-item&quot; exact-active-class=&quot;bg-blue4 bg-opacity-15&quot; to=&quot;/calculator&quot;&gt;食物計算機&lt;/nuxt-link&gt;</span><br><span class="line">      &lt;nuxt-link class=&quot;nav-menu-item&quot; exact-active-class=&quot;bg-blue4 bg-opacity-15&quot; to=&quot;/food&quot;&gt;營養指南&lt;/nuxt-link&gt;</span><br><span class="line">      &lt;nuxt-link class=&quot;nav-menu-item&quot; exact-active-class=&quot;bg-blue4 bg-opacity-15&quot; to=&quot;/bird&quot;&gt;百科全書&lt;/nuxt-link&gt;</span><br><span class="line">      &lt;nuxt-link class=&quot;nav-menu-item&quot; exact-active-class=&quot;bg-blue4 bg-opacity-15&quot; to=&quot;/hospital&quot;&gt;醫護站&lt;/nuxt-link&gt;</span><br><span class="line">      &lt;nuxt-link class=&quot;nav-menu-item&quot; exact-active-class=&quot;bg-blue4 bg-opacity-15&quot; to=&quot;/connect&quot;&gt;聯繫我們&lt;/nuxt-link&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.nav-menu &#123;</span><br><span class="line">  @apply text-blue4 border-blue4 fixed right-0 top-0 z-20 flex w-[140px] flex-col items-center justify-center rounded-bl-[6px] border-b border-l bg-opacity-20 font-bold backdrop-blur-sm;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.nav-menu-item &#123;</span><br><span class="line">  @apply flex w-full items-center justify-center p-[10px];</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>這段程式碼做了什麼：</p>
<ol>
<li>我們用 <code>v-show=&quot;menuOpen&quot;</code> 來控制整個選單的顯示。</li>
<li>每個選單項目都是一個 <code>nuxt-link</code>，點擊後會跳轉到對應的頁面。</li>
<li><code>exact-active-class</code> 用來設定當前頁面的選單項目的樣式。</li>
</ol>
<h3 id="5-自動關閉選單"><a href="#5-自動關閉選單" class="headerlink" title="5. 自動關閉選單"></a>5. 自動關閉選單</h3><p>最後，我們來加入一個功能，讓選單在頁面切換時自動關閉：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// ... 前面的程式碼</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">watch</span>(</span></span><br><span class="line"><span class="language-javascript">  <span class="function">() =&gt;</span> route.<span class="property">path</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="function">(<span class="params">currentPath, previousPath</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (menuOpen.<span class="property">value</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">toggleMenu</span>()</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>這段程式碼的作用是：</p>
<ol>
<li>使用 <code>watch</code> 來監視路由的變化。</li>
<li>當路由改變（也就是頁面切換）時，如果選單是開啟的，就自動關閉它。</li>
</ol>
<h2 id="額外補充：Transition-動畫效果"><a href="#額外補充：Transition-動畫效果" class="headerlink" title="額外補充：Transition 動畫效果"></a>額外補充：Transition 動畫效果</h2><p>為了讓我們的導航欄更加吸引人，我們可以加入一些轉場效果。在 Vue 中，我們可以使用 <code>&lt;Transition&gt;</code> 元件來實現這個功能。這個功能不只是讓網頁看起來更酷炫，還能提升使用者體驗，讓介面變化更加流暢自然。</p>
<h3 id="Vue-的-Transition-元件"><a href="#Vue-的-Transition-元件" class="headerlink" title="Vue 的 Transition 元件"></a>Vue 的 Transition 元件</h3><p>首先，讓我們來看看 Vue 官方文檔中關於 Transition 的說明：<a href="https://vuejs.org/guide/built-ins/transition.html">Vue Transition 官方文檔</a><br>Vue 提供了一個 <code>&lt;Transition&gt;</code> 元件，它可以讓我們輕鬆地為任何元素或元件添加進入&#x2F;離開的動畫效果。這個元件非常強大，可以處理以下幾種情況：</p>
<ul>
<li>條件渲染 (使用 v-if)</li>
<li>條件展示 (使用 v-show)</li>
<li>動態元件</li>
<li>元件根節點</li>
</ul>
<h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>在我們的導航欄例中，我是這樣使用 Transition 的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;relative&quot;&gt;</span><br><span class="line">    &lt;Transition name=&quot;fade&quot;&gt;</span><br><span class="line">&lt;!-- 選單按鈕 --&gt;</span><br><span class="line">    &lt;/Transition&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Transition name=&quot;fade&quot;&gt;</span><br><span class="line">&lt;!-- 選單內容 --&gt;</span><br><span class="line">    &lt;/Transition&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<p>這裡的 <code>name=&quot;fade&quot;</code> 是很重要的，它定義了我們的動畫效果的名稱。這個名稱會被用來生成 CSS 類別名稱，Vue 會在適當的時機添加或移除這些類別。</p>
<h3 id="CSS-過渡類別"><a href="#CSS-過渡類別" class="headerlink" title="CSS 過渡類別"></a>CSS 過渡類別</h3><p>當一個元素被 <code>&lt;Transition&gt;</code> 包裹時，Vue 會在元素進入或離開時自動添加&#x2F;移除一些 CSS 類別。這些類別的名稱是基於我們設定的 <code>name</code> 屬性。<br>在我們的例子中，因為我們使用了 <code>name=&quot;fade&quot;</code>，所以 Vue 會使用以下的類別：</p>
<ol>
<li><code>fade-enter-from</code>：進入動畫的起始狀態</li>
<li><code>fade-enter-active</code>：進入動畫的生效狀態</li>
<li><code>fade-enter-to</code>：進入動畫的結束狀態</li>
<li><code>fade-leave-from</code>：離開動畫的起始狀態</li>
<li><code>fade-leave-active</code>：離開動畫的生效狀態</li>
<li><code>fade-leave-to</code>：離開動畫的結束狀態<br>這些類別會在不同的動畫階段被添加和移除，讓我們能夠精確控制動畫的每個階段。</li>
</ol>
<h3 id="CSS-樣式定義"><a href="#CSS-樣式定義" class="headerlink" title="CSS 樣式定義"></a>CSS 樣式定義</h3><p>讓我們來看看我們為導航欄定義的 CSS 樣式：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.fade-enter-active</span>,</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.fade-leave-active</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">transition</span>: all <span class="number">0.4s</span> ease-in-out;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.fade-enter-from</span>,</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.fade-leave-to</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">transform</span>: <span class="built_in">translatey</span>(-<span class="number">264px</span>);</span></span><br><span class="line"><span class="language-css">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>這裡發生了什麼？</p>
<ol>
<li><code>.fade-enter-active</code> 和 <code>.fade-leave-active</code>：<ul>
<li>這兩個類別定義了動畫的持續時間和變化方式。</li>
<li><code>transition: all 0.4s ease-in-out;</code> 表示所有屬性的變化都會在 0.4 秒內完成，使用 ease-in-out 的變化曲線。</li>
<li>ease-in-out 曲線讓動畫在開始和結束時較慢，中間較快，創造出更自然的效果。</li>
</ul>
</li>
<li><code>.fade-enter-from</code> 和 <code>.fade-leave-to</code>：<ul>
<li>這兩個類別定義了動畫的起始狀態和結束狀態。</li>
<li><code>transform: translatey(-264px);</code> 表示元素會從上方 264px 的位置移動到原位（或從原位移動到上方 264px 的位置）。</li>
<li><code>opacity: 0;</code> 表示元素會從完全透明變為可見（或從可見變為完全透明）。</li>
</ul>
</li>
</ol>
<h3 id="動畫效果解析"><a href="#動畫效果解析" class="headerlink" title="動畫效果解析"></a>動畫效果解析</h3><p>結合起來，這些 CSS 樣式創造了這樣的效果：</p>
<ul>
<li>當選單出現時（進入動畫）：<ul>
<li>初始狀態：選單在上方 264px 處且完全透明。</li>
<li>動畫過程：選單在 0.4 秒內逐漸下移到原位，同時逐漸變得不透明。</li>
<li>最終狀態：選單在原位且完全不透明。</li>
</ul>
</li>
<li>當選單消失時（離開動畫）：<ul>
<li>初始狀態：選單在原位且完全不透明。</li>
<li>動畫過程：選單在 0.4 秒內逐漸上移 264px，同時逐漸變得透明。</li>
<li>最終狀態：選單在上方 264px 處且完全透明。</li>
</ul>
</li>
</ul>
<p>整個過程持續 0.4 秒，使用 ease-in-out 的變化曲線，這會讓動畫看起來更加平滑自然。</p>
<h2 id="今日成果展示"><a href="#今日成果展示" class="headerlink" title="今日成果展示"></a>今日成果展示</h2><p>我們得到了一個可以切換頁面又有動畫的 navbar (點縮圖可以打開 Youtube 影片喔)<br><a href="https://www.youtube.com/watch?v=4LQ1bhICoYA"><img src="https://img.youtube.com/vi/4LQ1bhICoYA/0.jpg" alt="Yes"></a></p>
<h2 id="今日範例完整程式碼"><a href="#今日範例完整程式碼" class="headerlink" title="今日範例完整程式碼"></a>今日範例完整程式碼</h2><details>
<summary><code>components/Header.vue</code></summary>
    
<pre><code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">const route = useRoute()</span><br><span class="line"></span><br><span class="line">// 選單變數</span><br><span class="line">const menuOpen = ref(false)</span><br><span class="line"></span><br><span class="line">// 選單開關</span><br><span class="line">const toggleMenu = () =&gt; &#123;</span><br><span class="line">  menuOpen.value = !menuOpen.value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 監聽路由的 path 變化, 換頁時自動關閉選單</span><br><span class="line">watch(</span><br><span class="line">  () =&gt; route.path,</span><br><span class="line">  (currentPath, previousPath) =&gt; &#123;</span><br><span class="line">    if (menuOpen.value) &#123;</span><br><span class="line">      toggleMenu()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;nuxt-link to=&quot;/&quot; class=&quot;logo fixed left-5 top-2 w-[32px] lg:w-[40px]&quot;&gt;</span><br><span class="line">    &lt;img src=&quot;~/assets/images/logo.svg&quot; alt=&quot;logo&quot; class=&quot;pic-auto&quot; /&gt;</span><br><span class="line">  &lt;/nuxt-link&gt;</span><br><span class="line">  &lt;div class=&quot;relative&quot;&gt;</span><br><span class="line">    &lt;!-- * 選單按鈕 --&gt;</span><br><span class="line">    &lt;Transition name=&quot;fade&quot;&gt;</span><br><span class="line">      &lt;button v-show=&quot;!menuOpen&quot; @click=&quot;toggleMenu&quot; class=&quot;nav-btn&quot;&gt;</span><br><span class="line">        &lt;Icon name=&quot;ph:hand-tap&quot; size=&quot;20&quot;&gt;&lt;/Icon&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div v-if=&quot;route.path === &#x27;/&#x27;&quot;&gt;首頁&lt;/div&gt;</span><br><span class="line">        &lt;div v-else-if=&quot;route.path === &#x27;/calculator&#x27;&quot;&gt;食物計算機&lt;/div&gt;</span><br><span class="line">        &lt;div v-else-if=&quot;route.path === &#x27;/food&#x27;&quot;&gt;營養指南&lt;/div&gt;</span><br><span class="line">        &lt;div v-else-if=&quot;route.path === &#x27;/bird&#x27;&quot;&gt;百科全書&lt;/div&gt;</span><br><span class="line">        &lt;div v-else-if=&quot;route.path === &#x27;/hospital&#x27;&quot;&gt;醫護站&lt;/div&gt;</span><br><span class="line">        &lt;div v-else=&quot;route.path === &#x27;/connect&#x27;&quot;&gt;聯繫我們&lt;/div&gt;</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">    &lt;/Transition&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- * 選單 --&gt;</span><br><span class="line">    &lt;Transition name=&quot;fade&quot;&gt;</span><br><span class="line">      &lt;div v-show=&quot;menuOpen&quot; class=&quot;nav-menu&quot;&gt;</span><br><span class="line">        &lt;button class=&quot;nav-menu-item&quot; @click=&quot;toggleMenu&quot;&gt;CLOSE&lt;/button&gt;</span><br><span class="line">        &lt;nuxt-link class=&quot;nav-menu-item&quot; exact-active-class=&quot;bg-blue4 bg-opacity-15&quot; to=&quot;/&quot;</span><br><span class="line">          &gt;首頁&lt;/nuxt-link</span><br><span class="line">        &gt;</span><br><span class="line">        &lt;nuxt-link</span><br><span class="line">          class=&quot;nav-menu-item&quot;</span><br><span class="line">          exact-active-class=&quot;bg-blue4 bg-opacity-15&quot;</span><br><span class="line">          to=&quot;/calculator&quot;</span><br><span class="line">          &gt;食物計算機&lt;/nuxt-link</span><br><span class="line">        &gt;</span><br><span class="line">        &lt;nuxt-link class=&quot;nav-menu-item&quot; exact-active-class=&quot;bg-blue4 bg-opacity-15&quot; to=&quot;/food&quot;</span><br><span class="line">          &gt;營養指南&lt;/nuxt-link</span><br><span class="line">        &gt;</span><br><span class="line">        &lt;nuxt-link class=&quot;nav-menu-item&quot; exact-active-class=&quot;bg-blue4 bg-opacity-15&quot; to=&quot;/bird&quot;</span><br><span class="line">          &gt;百科全書&lt;/nuxt-link</span><br><span class="line">        &gt;</span><br><span class="line">        &lt;nuxt-link class=&quot;nav-menu-item&quot; exact-active-class=&quot;bg-blue4 bg-opacity-15&quot; to=&quot;/hospital&quot;</span><br><span class="line">          &gt;醫護站&lt;/nuxt-link</span><br><span class="line">        &gt;</span><br><span class="line">        &lt;nuxt-link class=&quot;nav-menu-item&quot; exact-active-class=&quot;bg-blue4 bg-opacity-15&quot; to=&quot;/connect&quot;</span><br><span class="line">          &gt;聯繫我們&lt;/nuxt-link</span><br><span class="line">        &gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/Transition&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.nav-btn &#123;</span><br><span class="line">  @apply bg-bg text-blue4 border-blue4 fixed right-0 top-0 z-20 flex w-[140px] items-center justify-center gap-[6px] rounded-bl-[6px] border-b border-l bg-opacity-20 p-[10px] font-bold backdrop-blur-sm;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.nav-menu &#123;</span><br><span class="line">  @apply text-blue4 border-blue4 fixed right-0 top-0 z-20 flex w-[140px] flex-col items-center justify-center rounded-bl-[6px] border-b border-l bg-opacity-20 font-bold backdrop-blur-sm;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.nav-menu-item &#123;</span><br><span class="line">  @apply flex w-full items-center justify-center p-[10px];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.fade-enter-active,</span><br><span class="line">.fade-leave-active &#123;</span><br><span class="line">  transition: all 0.4s ease-in-out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.fade-enter-from,</span><br><span class="line">.fade-leave-to &#123;</span><br><span class="line">  transform: translatey(-264px);</span><br><span class="line">  opacity: 0;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</code></pre>
</details>

<details>
<summary><code>app.vue</code></summary>
    
<pre><code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import axios from &#x27;axios&#x27;</span><br><span class="line"></span><br><span class="line">// 創建一個自定義的 Axios 實例</span><br><span class="line">const api = axios.create(&#123;</span><br><span class="line">  baseURL: &#x27;https://two024it-test-app.onrender.com&#x27; // 設置基礎 URL</span><br><span class="line">  // timeout: 5000 // 設置超時時間為 5 秒</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const list = ref([])</span><br><span class="line"></span><br><span class="line">// 測試取資料</span><br><span class="line">async function fetchData() &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    const response = await api.get(&#x27;/freshfoods/&#x27;) // 獲取食物列表</span><br><span class="line">    console.log(response.data) // 處理響應數據</span><br><span class="line">    list.value = response.data</span><br><span class="line">  &#125; catch (error) &#123;</span><br><span class="line">    console.error(&#x27;發生錯誤:&#x27;, error) // 錯誤處理</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">  fetchData()</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;app relative flex min-h-screen w-full flex-col&quot;&gt;</span><br><span class="line">    &lt;!-- * navbar --&gt;</span><br><span class="line">    &lt;header class=&quot;z-20&quot;&gt;</span><br><span class="line">      &lt;Header /&gt;</span><br><span class="line">    &lt;/header&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- * pages --&gt;</span><br><span class="line">    &lt;main class=&quot;page-wrapper&quot;&gt;</span><br><span class="line">      &lt;NuxtPage /&gt;</span><br><span class="line">    &lt;/main&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.app &#123;</span><br><span class="line">  font-family: &#x27;Noto Sans TC&#x27;, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line">.page-wrapper &#123;</span><br><span class="line">  @apply mx-auto flex w-full max-w-[1200px] grow px-3 pb-5 pt-[52px] lg:px-5 lg:pt-[64px];</span><br><span class="line">  align-items: start;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</code></pre>
</details>

<details>
<summary><code>nuxt.config.ts</code></summary>
    
<pre><code><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// https://nuxt.com/docs/api/configuration/nuxt-config</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineNuxtConfig</span>(&#123;</span><br><span class="line">  <span class="attr">devtools</span>: &#123; <span class="attr">enabled</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  <span class="attr">modules</span>: [<span class="string">&#x27;@nuxtjs/tailwindcss&#x27;</span>, <span class="string">&#x27;@nuxt-icon&#x27;</span>]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</code></pre>
</details>

<details>
<summary><code>tailwind.config.ts</code></summary>
    
<pre><code><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@type</span> &#123;<span class="type">import(&#x27;tailwindcss&#x27;).Config</span>&#125; */</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">content</span>: [</span><br><span class="line">    <span class="string">&#x27;./components/**/*.&#123;vue,js,ts&#125;&#x27;</span>, <span class="comment">// 掃描所有 Vue 組件</span></span><br><span class="line">    <span class="string">&#x27;./layouts/**/*.vue&#x27;</span>, <span class="comment">// 掃描所有布局文件</span></span><br><span class="line">    <span class="string">&#x27;./pages/**/*.vue&#x27;</span>, <span class="comment">// 掃描所有頁面文件</span></span><br><span class="line">    <span class="string">&#x27;./composables/**/*.&#123;js,ts&#125;&#x27;</span>, <span class="comment">// 掃描所有可組合式函數</span></span><br><span class="line">    <span class="string">&#x27;./plugins/**/*.&#123;js,ts&#125;&#x27;</span>, <span class="comment">// 掃描所有插件</span></span><br><span class="line">    <span class="string">&#x27;./utils/**/*.&#123;js,ts&#125;&#x27;</span>, <span class="comment">// 掃描所有工具函數</span></span><br><span class="line">    <span class="string">&#x27;./&#123;App,app&#125;.&#123;js,ts,vue&#125;&#x27;</span>, <span class="comment">// 掃描主應用文件</span></span><br><span class="line">    <span class="string">&#x27;./&#123;Error,error&#125;.&#123;js,ts,vue&#125;&#x27;</span>, <span class="comment">// 掃描錯誤處理文件</span></span><br><span class="line">    <span class="string">&#x27;./app.config.&#123;js,ts&#125;&#x27;</span> <span class="comment">// 掃描應用配置文件</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">theme</span>: &#123;</span><br><span class="line">    <span class="attr">extend</span>: &#123;</span><br><span class="line">      <span class="attr">colors</span>: &#123;</span><br><span class="line">        <span class="attr">blue1</span>: <span class="string">&#x27;#e9f1fe&#x27;</span>,</span><br><span class="line">        <span class="attr">blue2</span>: <span class="string">&#x27;#c4d7ed&#x27;</span>,</span><br><span class="line">        <span class="attr">blue3</span>: <span class="string">&#x27;#abc8e2&#x27;</span>,</span><br><span class="line">        <span class="attr">blue4</span>: <span class="string">&#x27;#375d81&#x27;</span>,</span><br><span class="line">        <span class="attr">blue5</span>: <span class="string">&#x27;#183152&#x27;</span>,</span><br><span class="line">        <span class="attr">red1</span>: <span class="string">&#x27;#ffaeaa&#x27;</span>,</span><br><span class="line">        <span class="attr">red2</span>: <span class="string">&#x27;#ed6f69&#x27;</span>,</span><br><span class="line">        <span class="attr">bg</span>: <span class="string">&#x27;#fff6ea&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [] <span class="comment">// 可以添加 Tailwind 插件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</code></pre>
</details>

<details>
<summary><code>assets/css/main.css</code></summary>
    
<pre><code><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> url(<span class="string">&#x27;https://fonts.googleapis.com/css2?family=Noto+Sans+TC:wght@100..900&amp;display=swap&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="attr">--color-blue1</span>: <span class="number">#e9f1fe</span>;</span><br><span class="line">  <span class="attr">--color-blue2</span>: <span class="number">#c4d7ed</span>;</span><br><span class="line">  <span class="attr">--color-blue3</span>: <span class="number">#abc8e2</span>;</span><br><span class="line">  <span class="attr">--color-blue4</span>: <span class="number">#375d81</span>;</span><br><span class="line">  <span class="attr">--color-blue5</span>: <span class="number">#183152</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attr">--color-red1</span>: <span class="number">#ffaeaa</span>;</span><br><span class="line">  <span class="attr">--color-red2</span>: <span class="number">#ed6f69</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attr">--color-bg</span>: <span class="number">#fff6ea</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;Noto Sans TC&#x27;</span>, sans-serif;</span><br><span class="line">  <span class="attribute">letter-spacing</span>: <span class="number">1.25px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">var</span>(--color-bg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 消樣式 */</span></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:focus-visible</span> &#123;</span><br><span class="line">  <span class="attribute">outline</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">textarea</span><span class="selector-pseudo">:focus-visible</span> &#123;</span><br><span class="line">  <span class="attribute">outline</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">select</span><span class="selector-pseudo">:focus-visible</span> &#123;</span><br><span class="line">  <span class="attribute">outline</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 圖片通用 */</span></span><br><span class="line"><span class="selector-class">.pic-auto</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">object-fit</span>: cover;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 限制最大寬度 !&gt; 1200px, 搭配 px-5 使用 */</span></span><br><span class="line"><span class="selector-class">.page-max-w</span> &#123;</span><br><span class="line">  <span class="keyword">@apply</span> mx-auto w-full max-w-[<span class="number">1200px</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* hover 效果 */</span></span><br><span class="line"><span class="selector-class">.hover-auto</span> &#123;</span><br><span class="line">  <span class="keyword">@apply</span> transform duration-<span class="number">200</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</code></pre>
</details>

<p>好啦！這就是我們超酷導航欄的全部內容了。是不是覺得很有趣？雖然看起來有點複雜，但只要一步一步來，你也可以做出這麼厲害的導航欄喔！，加油！<br>大家有沒有想要更詳細補充的部分呢？歡迎在下方留言分享喔！讓我們一起在 Nuxt3 的世界中探險吧！加油！</p>
<br />
<hr />
<br />

<blockquote>
<p>希望這篇文章有幫助到你，謝謝你的觀看，若有想看的系列也歡迎告訴我 😉</p>
</blockquote>
]]></content>
      <tags>
        <tag>2024IT鐵人賽</tag>
        <tag>Nuxt3</tag>
        <tag>Vue3</tag>
        <tag>Transition</tag>
        <tag>animate</tag>
      </tags>
  </entry>
  <entry>
    <title>[ 2024 IT 鐵人賽 DAY26 ] Nuxt 3 進階技巧：Pinia、API 整合、Loading 元件</title>
    <url>/2024/10/05/2024it/d26/</url>
    <content><![CDATA[<p>嗨！今天要跟大家分享的是如何在 Nuxt 3 專案中運用 Pinia 這個強大的狀態管理工具，並且實作一個客製化的 Loading 元件。無論你是剛接觸 Vue 生態系的新手，還是想要更新技能的資深開發者，這篇文章都會帶給你滿滿的收穫！</p>
<span id="more"></span>

<p>我們會從最基礎的 Pinia 介紹開始，一步步帶你實作到最後的成品。準備好你的開發環境，讓我們一起來深入探索 Nuxt 3 和 Pinia 的奧妙吧！</p>
<div class="cus-intro-box">
    <h2>房東不給養鸚鵡 - 那就用 Nuxt + Express + MongoDB 30 天寫一個全端鸚鵡專案。</h2>
    <p>挑戰人生第一次鐵人賽，就來個佛心分享 side project，從專案發想、規劃、設計、資料庫、開發到部署，技術使用 Nuxt 3、Tailwind CSS、Pinia、Axios、Express、MongoDB，製作一個前後端分離的鸚鵡專案，功能主要介紹食物計算機和聯絡我們，希望可以讓更多人瞭解專案的完整流程 ✨</p>
    <a href="https://ithelp.ithome.com.tw/users/20159686/ironman/7564" target="_blank">IT 全文章連結</a>
</div>

<h2 id="Pinia-簡介"><a href="#Pinia-簡介" class="headerlink" title="Pinia 簡介"></a>Pinia 簡介</h2><p>Pinia 是 Vue 生態系統中的新一代狀態管理庫。它提供了一種簡單、直觀的方式來管理應用程序的狀態。Pinia 的主要特點包括：</p>
<ol>
<li>輕量級：比 Vuex 更小、更快。</li>
<li>類型安全：完全支援 TypeScript。</li>
<li>開發者工具支援：可以輕鬆追蹤狀態變化。</li>
<li>模塊化設計：無需創建複雜的模塊樹。</li>
<li>無需額外的樣板代碼：使用簡單的 API 設計。<br>現在，讓我們一起來看看如何在 Nuxt 3 專案中使用 Pinia 吧！</li>
</ol>
<h2 id="在-Nuxt-3-中使用-Pinia-的步驟"><a href="#在-Nuxt-3-中使用-Pinia-的步驟" class="headerlink" title="在 Nuxt 3 中使用 Pinia 的步驟"></a>在 Nuxt 3 中使用 Pinia 的步驟</h2><h3 id="1-安裝-Pinia"><a href="#1-安裝-Pinia" class="headerlink" title="1. 安裝 Pinia"></a>1. 安裝 Pinia</h3><p>首先，我們要在專案目錄中執行以下指令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install pinia @pinia/nuxt</span><br></pre></td></tr></table></figure>

<blockquote>
<p>💡 小提醒：如果你跟我一樣遇到安裝問題，別擔心！試試看到 <code>package.json</code> 檔案中，將 <code>&quot;vue&quot;: &quot;latest&quot;</code> 改成 <code>&quot;vue&quot;: &quot;^3.4.0&quot;</code>，這個小撇步通常能解決問題喔！</p>
</blockquote>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;vue&quot;</span>: <span class="string">&quot;^3.4.0&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h3 id="2-配置-Pinia"><a href="#2-配置-Pinia" class="headerlink" title="2. 配置 Pinia"></a>2. 配置 Pinia</h3><p>接下來，我們要在 <code>nuxt.config.ts</code> 中把 Pinia 加進去：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineNuxtConfig</span>(&#123;</span><br><span class="line">  <span class="attr">modules</span>: [<span class="string">&#x27;@pinia/nuxt&#x27;</span>],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>這個設定就像是在告訴 Nuxt：「欸，我要用 Pinia 喔！」這樣 Nuxt 就會幫我們把 Pinia 整合到專案中，讓我們可以盡情使用它的所有功能。</p>
<h3 id="3-創建-Store"><a href="#3-創建-Store" class="headerlink" title="3. 創建 Store"></a>3. 創建 Store</h3><p>現在，讓我們來創建一個 store 吧！我們要在 <code>stores</code> 目錄下創建一個 <code>api.ts</code> 檔案。</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// stores/api.ts</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 從 Pinia 中匯入 defineStore 函數,這是我們創建 store 的關鍵工具</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 匯入 axios,這是一個用來發送 HTTP 請求的工具</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定義我們 API 的基礎網址</span></span><br><span class="line"><span class="keyword">const</span> baseURL = <span class="string">&#x27;&lt;https://two024it-test-app.onrender.com&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 創建一個 axios 實例,設定好基礎網址</span></span><br><span class="line"><span class="keyword">const</span> api = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  baseURL</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定義一個名為 &#x27;api-store&#x27; 的 store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useApiStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;api-store&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">// 在這裡定義可以執行的動作</span></span><br><span class="line">  <span class="attr">actions</span>: &#123;      </span><br><span class="line">    <span class="comment">// 這是一個用來獲取食物列表的函數</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">fetchFoodList</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 發送 GET 請求到 &#x27;/freshfoods/&#x27; 路徑</span></span><br><span class="line">      <span class="keyword">const</span> response = <span class="keyword">await</span> api.<span class="title function_">get</span>(<span class="string">&#x27;/freshfoods/&#x27;</span>)</span><br><span class="line">      <span class="keyword">return</span> response <span class="comment">// 返回收到的回應</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 你可以在這裡添加更多的 API 操作</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>讓我們來解釋一下這段程式碼：</p>
<ol>
<li><strong>defineStore</strong>: 這是 Pinia 提供的函數，用來創建一個 store。你可以把 store 想像成一個專門儲存和管理某些特定資料的地方。</li>
<li><strong>axios</strong>: 這是一個非常受歡迎的 JavaScript 庫，用來發送 HTTP 請求。簡單來說，它就是幫我們跟伺服器溝通的工具。</li>
<li><strong>baseURL</strong>: 這是我們 API 的基本網址。設定好這個之後,我們後續發送請求時就不需要每次都寫完整的網址了。</li>
<li><strong>actions</strong>: 在 Pinia 中，actions 是用來定義可以改變 store 狀態的方法。這裡我們定義了一個 <code>fetchFoodList</code> 方法，用來從伺服器獲取食物列表。</li>
<li><strong>async&#x2F;await</strong>: 這兩個關鍵字用於處理非同步操作。你可以把它想像成：「這個操作可能需要一點時間，但不用擔心，我會等它完成的！」</li>
</ol>
<h3 id="4-在元件中使用"><a href="#4-在元件中使用" class="headerlink" title="4. 在元件中使用"></a>4. 在元件中使用</h3><p>最後，讓我們來看看如何在元件中使用我們剛剛創建的 store。我們將在 <code>pages/calculator.vue</code> 中使用它：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">// 匯入在 stores/api.ts 中定義的 API store</span><br><span class="line">import &#123; useApiStore &#125; from &#x27;~/stores/api&#x27;</span><br><span class="line"></span><br><span class="line">// 初始化 API store，使其在此元件中可用</span><br><span class="line">const apiStore = useApiStore()</span><br><span class="line"></span><br><span class="line">// 創建一個響應式變數來儲存食物列表</span><br><span class="line">// ref 函數使得 Vue 可以追蹤這個變數的變化</span><br><span class="line">const foodList = ref([])</span><br><span class="line"></span><br><span class="line">// 定義一個非同步函數來獲取食物列表</span><br><span class="line">async function fetchFoods() &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    // 調用 store 中的方法來獲取食物列表</span><br><span class="line">    const res = await apiStore.fetchFoodList()</span><br><span class="line">    </span><br><span class="line">    // 從響應中提取數據</span><br><span class="line">    const result = res.data</span><br><span class="line">    </span><br><span class="line">    // 在控制台輸出結果以便調試</span><br><span class="line">    console.log(result)</span><br><span class="line"></span><br><span class="line">    // 檢查是否成功獲取數據</span><br><span class="line">    if (result &amp;&amp; result.status === &#x27;success&#x27;) &#123;</span><br><span class="line">      // 將獲取的數據存入響應式變數</span><br><span class="line">      foodList.value = result.data</span><br><span class="line">      </span><br><span class="line">      // 再次在控制台輸出，確認數據已正確存儲</span><br><span class="line">      console.log(foodList.value)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; catch (e) &#123;</span><br><span class="line">    // 如果發生錯誤，在控制台輸出錯誤信息</span><br><span class="line">    console.log(e)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 當元件被掛載到頁面上時，自動調用 fetchFoods 函數</span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">  fetchFoods()</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;食品列表&lt;/h1&gt;</span><br><span class="line">    &lt;pre&gt;</span><br><span class="line">      &lt;!-- 使用雙大括號語法將 foodList 的內容顯示在頁面上 --&gt;</span><br><span class="line">      &#123;&#123; foodList &#125;&#125;</span><br><span class="line">    &lt;/pre&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<p>讓我們來解釋一下這個元件：</p>
<ol>
<li><strong>useApiStore</strong>: 這是我們用來獲取 store 實例的函數。通過調用它,我們就可以使用 store 中定義的所有方法和資料。</li>
<li><strong>ref</strong>: 這是 Vue 3 中用來創建響應式變數的函數。當 <code>foodList</code> 的值改變時,Vue 會自動更新相關的畫面。</li>
<li><strong>async function</strong>: 這表示 <code>fetchFoods</code> 是一個非同步函數。它可能需要一些時間來完成,但不會阻塞其他程式碼的執行。</li>
<li><strong>try&#x2F;catch</strong>: 這是用來處理錯誤的結構。如果在 <code>try</code> 區塊中的程式碼出錯,就會執行 <code>catch</code> 區塊中的程式碼。</li>
<li><strong>onMounted</strong>: 這是一個生命週期鉤子,它會在元件被掛載到頁面上後立即執行。我們用它來確保一旦頁面準備好,就立即獲取食物列表。</li>
<li><strong>template</strong>: 這部分定義了元件的 HTML 結構。<code>&#123;&#123; foodList &#125;&#125;</code> 會將 <code>foodList</code> 的內容直接顯示在頁面上。<br>通過這種方式,我們實現了一個簡單但功能完整的食品列表頁面。當頁面載入時,它會自動從伺服器獲取食品資料,並將其顯示出來。如果獲取過程中出現任何錯誤,我們也會在控制台中看到相關信息,方便進行除錯。</li>
</ol>
<h3 id="目前頁面截圖"><a href="#目前頁面截圖" class="headerlink" title="目前頁面截圖"></a>目前頁面截圖</h3><p>畫面上印出的就是我們取回來的食物資料<br><img src="https://ithelp.ithome.com.tw/upload/images/20241005/201596865lSlyP9sN0.png" alt="https://ithelp.ithome.com.tw/upload/images/20241005/201596865lSlyP9sN0.png"></p>
<h2 id="在-Nuxt-3-中添加自定義-Loading-元件的步驟指南"><a href="#在-Nuxt-3-中添加自定義-Loading-元件的步驟指南" class="headerlink" title="在 Nuxt 3 中添加自定義 Loading 元件的步驟指南"></a>在 Nuxt 3 中添加自定義 Loading 元件的步驟指南</h2><h3 id="1-準備-Loading-動畫"><a href="#1-準備-Loading-動畫" class="headerlink" title="1. 準備 Loading 動畫"></a>1. 準備 Loading 動畫</h3><ol>
<li><p>前往 <a href="https://lottiefiles.com/search?category=animations&utm_source=search&utm_medium=platform">Lottie 網站</a> 尋找喜歡的 GIF 動畫。<br> <img src="https://ithelp.ithome.com.tw/upload/images/20241005/20159686RZ02NBZAdZ.png" alt="https://ithelp.ithome.com.tw/upload/images/20241005/20159686RZ02NBZAdZ.png"></p>
</li>
<li><p>下載選中的 GIF 檔案。<br> <img src="https://ithelp.ithome.com.tw/upload/images/20241005/20159686DaeucTPtFv.png" alt="https://ithelp.ithome.com.tw/upload/images/20241005/20159686DaeucTPtFv.png"></p>
<blockquote>
<p>這是流程示範，可以選自己喜歡的下載，我也不是下載這個動畫 XD<br>注意免費的有下載數量限制！</p>
</blockquote>
</li>
<li><p>將下載的 GIF 檔案放入 <code>assets/images/</code> 資料夾 (我的 GIF 檔案命名為 <code>birdGif.gif</code> )</p>
</li>
</ol>
<h3 id="2-設置事件總線-stores-eventBus-ts"><a href="#2-設置事件總線-stores-eventBus-ts" class="headerlink" title="2. 設置事件總線 (stores&#x2F;eventBus.ts)"></a>2. 設置事件總線 (stores&#x2F;eventBus.ts)</h3><p>創建 <code>stores/eventBus.ts</code> 檔案：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// stores/eventBus.ts</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 創建一個響應式變數來控制 Loading 狀態</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> isLoading = <span class="title function_">ref</span>(<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 顯示 Loading 的函數</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">showLoading</span>(<span class="params"></span>) &#123;</span><br><span class="line">  isLoading.<span class="property">value</span> = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 隱藏 Loading 的函數</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">hideLoading</span>(<span class="params"></span>) &#123;</span><br><span class="line">  isLoading.<span class="property">value</span> = <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>詳細解釋：</p>
<ul>
<li><code>export const isLoading = ref(false)</code>:<ul>
<li>這裡使用 Vue 3 的 <code>ref</code> 函數創建了一個響應式變數。</li>
<li>初始值設為 <code>false</code>，表示一開始不顯示 loading。</li>
<li>使用 <code>export</code> 使得這個變數可以在其他文件中被引入和使用。</li>
</ul>
</li>
<li><code>export function showLoading()</code> 和 <code>export function hideLoading()</code>:<ul>
<li>這兩個函數用於控制 <code>isLoading</code> 的值。</li>
<li><code>showLoading()</code> 將 <code>isLoading</code> 設為 <code>true</code>，表示開始載入。</li>
<li><code>hideLoading()</code> 將 <code>isLoading</code> 設為 <code>false</code>，表示載入結束。</li>
<li>這種設計讓我們可以在應用的任何地方輕鬆控制 loading 狀態。<blockquote>
<p>補充說明：事件總線（Event Bus）是一種常見的設計模式，用於在不同元件間進行通訊。在這裡，我們用它來管理全局的 Loading 狀態。這種方法特別適合處理跨元件的狀態，比如 Loading 狀態這種需要在整個應用中共享的資訊。</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h3 id="3-創建-Loading-元件-components-LoadingTool-vue"><a href="#3-創建-Loading-元件-components-LoadingTool-vue" class="headerlink" title="3. 創建 Loading 元件 (components&#x2F;LoadingTool.vue)"></a>3. 創建 Loading 元件 (components&#x2F;LoadingTool.vue)</h3><p>創建 <code>components/LoadingTool.vue</code> 檔案：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; isLoading &#125; from &#x27;~/stores/eventBus&#x27;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div v-if=&quot;isLoading&quot; class=&quot;spinner-container&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;&quot;&gt;</span><br><span class="line">        &lt;img src=&quot;~/assets/images/birdGif.gif&quot; alt=&quot;birdGif&quot; /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.spinner-container &#123;</span><br><span class="line">  @apply bg-bg bg-opacity-70;</span><br><span class="line">  position: fixed;</span><br><span class="line">  inset: 0;</span><br><span class="line">  z-index: 1300;</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: center;</span><br><span class="line">  align-items: center;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>詳細解釋：</p>
<ul>
<li><code>&lt;script setup lang=&quot;ts&quot;&gt;</code>:<ul>
<li>這是 Vue 3 的組合式 API 寫法，<code>setup</code> 表示這個腳本區塊會在組件創建時自動執行。</li>
<li><code>lang=&quot;ts&quot;</code> 表示使用 TypeScript。</li>
</ul>
</li>
<li><code>import &#123; isLoading &#125; from &#39;~/stores/eventBus&#39;</code>:<ul>
<li>從事件總線中引入 <code>isLoading</code> 變數，使得這個組件可以根據全局狀態來顯示或隱藏。</li>
</ul>
</li>
<li><code>&lt;template&gt;</code> 部分：<ul>
<li><code>v-if=&quot;isLoading&quot;</code>: 這是一個 Vue 指令，當 <code>isLoading</code> 為 true 時，才會顯示這個 div。</li>
<li><code>&lt;img src=&quot;~/assets/images/birdGif.gif&quot; alt=&quot;birdGif&quot; /&gt;</code>: 顯示 loading 動畫。</li>
</ul>
</li>
<li><code>&lt;style scoped&gt;</code>:<ul>
<li><code>scoped</code> 表示這些樣式只應用於這個組件。</li>
<li><code>.spinner-container</code> 的樣式設置：<ul>
<li><code>@apply bg-bg bg-opacity-70;</code>: 這是 Tailwind CSS 的語法，設置背景和透明度。</li>
<li><code>position: fixed; inset: 0;</code>: 使 loading 覆蓋整個螢幕。</li>
<li><code>z-index: 1300;</code>: 確保 loading 顯示在其他元素之上。</li>
<li><code>display: flex; justify-content: center; align-items: center;</code>: 使 loading 動畫居中顯示。</li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>補充說明：Vue 3 的組合式 API（Composition API）是一種新的程式碼組織方式，它讓我們能更靈活地組織和重用程式碼。<code>&lt;script setup&gt;</code> 是其中一個語法糖，它簡化了組合式 API 的使用方式。使用 <code>&lt;script setup&gt;</code> 讓我們的程式碼更簡潔，同時保持了強大的功能性。</p>
</blockquote>
<h3 id="4-在主應用元件中使用-Loading-元件-app-vue"><a href="#4-在主應用元件中使用-Loading-元件-app-vue" class="headerlink" title="4. 在主應用元件中使用 Loading 元件 (app.vue)"></a>4. 在主應用元件中使用 Loading 元件 (app.vue)</h3><p>修改 <code>app.vue</code> 檔案：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;relative flex min-h-screen w-full flex-col&quot;&gt;</span><br><span class="line">    &lt;!-- navbar --&gt;</span><br><span class="line">    &lt;header class=&quot;z-20&quot;&gt;</span><br><span class="line">      &lt;Header /&gt;</span><br><span class="line">    &lt;/header&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- pages --&gt;</span><br><span class="line">    &lt;main class=&quot;page-wrapper&quot;&gt;</span><br><span class="line">      &lt;NuxtPage /&gt;</span><br><span class="line">    &lt;/main&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 將做好的 Loading 元件放這 --&gt;</span><br><span class="line">    &lt;LoadingTool /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<p>詳細解釋：</p>
<ul>
<li>這是 Nuxt 3 的主應用組件，它包裝了整個應用。</li>
<li><code>&lt;Header /&gt;</code>: 這是導航欄組件，放在頁面頂部。</li>
<li><code>&lt;NuxtPage /&gt;</code>: 這是 Nuxt 3 的特殊組件，用於顯示當前路由對應的頁面內容。</li>
<li><code>&lt;LoadingTool /&gt;</code>: 這裡引入了我們剛才創建的 Loading 組件。<ul>
<li>將它放在這裡意味著 Loading 效果可以覆蓋整個應用，在任何頁面都能顯示。</li>
</ul>
</li>
</ul>
<h3 id="5-在頁面中使用-Loading-效果-pages-calculator-vue"><a href="#5-在頁面中使用-Loading-效果-pages-calculator-vue" class="headerlink" title="5. 在頁面中使用 Loading 效果 (pages&#x2F;calculator.vue)"></a>5. 在頁面中使用 Loading 效果 (pages&#x2F;calculator.vue)</h3><p>修改 <code>pages/calculator.vue</code> 檔案：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; useApiStore &#125; from &#x27;~/stores/api&#x27;</span><br><span class="line">import &#123; showLoading, hideLoading &#125; from &#x27;~/stores/eventBus&#x27; // 引入函數</span><br><span class="line"></span><br><span class="line">const apiStore = useApiStore()</span><br><span class="line">const foodList = ref([])</span><br><span class="line"></span><br><span class="line">async function fetchFoods() &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    showLoading() // 顯示 Loading</span><br><span class="line">    const res = await apiStore.fetchFoodList()</span><br><span class="line">    const result = res.data</span><br><span class="line"></span><br><span class="line">    console.log(result)</span><br><span class="line"></span><br><span class="line">    if (result &amp;&amp; result.status === &#x27;success&#x27;) &#123;</span><br><span class="line">      foodList.value = result.data</span><br><span class="line">      console.log(foodList.value)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; catch (e) &#123;</span><br><span class="line">    console.log(e)</span><br><span class="line">  &#125; finally &#123;</span><br><span class="line">    hideLoading() // 隱藏 Loading</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">  fetchFoods()</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;食品列表&lt;/h1&gt;</span><br><span class="line">    &lt;pre&gt;</span><br><span class="line">      &#123;&#123; foodList &#125;&#125;</span><br><span class="line">    &lt;/pre&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<p>詳細解釋：</p>
<ul>
<li>引入 <code>showLoading</code> 和 <code>hideLoading</code>: 用於控制 loading 狀態的函數。</li>
<li><code>async function fetchFoods()</code>:<ul>
<li>這是一個非同步函數，用於獲取食品列表數據。</li>
<li><code>showLoading()</code>: 在開始獲取數據前顯示 loading。</li>
<li><code>await apiStore.fetchFoodList()</code>: 調用 API 獲取數據。</li>
<li>如果成功獲取數據，將其存儲在 <code>foodList</code> 中。</li>
<li><code>hideLoading()</code>: 在 <code>finally</code> 區塊中調用，確保無論成功與否都會隱藏 loading。<blockquote>
<p>補充說明：非同步函數（Async Function）和 <code>try-catch-finally</code> 結構是處理非同步操作的重要工具。非同步函數允許我們以同步的寫法處理非同步操作，大大提高了程式碼的可讀性。而 <code>try-catch-finally</code> 結構則幫助我們優雅地處理可能發生的錯誤，確保無論操作成功與否，都能執行必要的清理工作（在這裡是隱藏 Loading）。<br>這種設計允許我們在數據加載過程中顯示 loading 效果，提升用戶體驗。同時，由於 loading 狀態是全局管理的，我們可以在應用的任何部分輕鬆地控制它的顯示和隱藏。</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>哇！恭喜你完成了這趟 Nuxt 3 和 Pinia 的學習之旅！我們不僅學會了如何使用 Pinia 進行狀態管理，還成功實作了一個超酷的自定義 Loading 元件。這些技能絕對會讓你的前端開發功力大幅提升！<br>記住，程式開發就像是在玩樂高積木，我們今天學到的每個概念都是一塊重要的積木。Pinia 是管理狀態的積木，自定義 Loading 元件則是提升使用者體驗的積木。隨著你不斷學習和實踐，你會發現自己能夠搭建出越來越複雜、越來越酷炫的應用程式。<br>最後，別忘了實際動手做做看！理論學習很重要，但真正的進步來自於實踐。嘗試在自己的專案中運用這些技巧，你會發現更多有趣的應用方式。<br>繼續保持學習的熱情，相信不久的將來，你一定會成為一位出色的前端工程師！加油！<br>大家有沒有想要更詳細補充的部分呢？歡迎在下方留言分享喔！讓我們一起在 Nuxt3 的世界中探險吧！加油！</p>
<br />
<hr />
<br />

<blockquote>
<p>希望這篇文章有幫助到你，謝謝你的觀看，若有想看的系列也歡迎告訴我 😉</p>
</blockquote>
]]></content>
      <tags>
        <tag>2024IT鐵人賽</tag>
        <tag>Nuxt3</tag>
        <tag>Vue3</tag>
        <tag>Pinia</tag>
        <tag>Component</tag>
      </tags>
  </entry>
  <entry>
    <title>[ 2024 IT 鐵人賽 DAY27 ] Nuxt 3 專案實戰：打造互動式鮮食計算機</title>
    <url>/2024/10/06/2024it/d27/</url>
    <content><![CDATA[<p>哈囉大家好！今天要帶大家一起來打造一個超酷的鸚鵡鮮食計算機！不管你是不是程式新手，跟著我們一步一步來，保證你也能輕鬆搞定！讓我們一起來看看怎麼用 Nuxt 3 和 Pinia 來完成這個有趣的專案吧！</p>
<span id="more"></span>

<div class="cus-intro-box">
    <h2>房東不給養鸚鵡 - 那就用 Nuxt + Express + MongoDB 30 天寫一個全端鸚鵡專案。</h2>
    <p>挑戰人生第一次鐵人賽，就來個佛心分享 side project，從專案發想、規劃、設計、資料庫、開發到部署，技術使用 Nuxt 3、Tailwind CSS、Pinia、Axios、Express、MongoDB，製作一個前後端分離的鸚鵡專案，功能主要介紹食物計算機和聯絡我們，希望可以讓更多人瞭解專案的完整流程 ✨</p>
    <a href="https://ithelp.ithome.com.tw/users/20159686/ironman/7564" target="_blank">IT 全文章連結</a>
</div>

<h2 id="1-設定-API-Store"><a href="#1-設定-API-Store" class="headerlink" title="1. 設定 API Store"></a>1. 設定 API Store</h2><p>首先，我們要先設定 API Store。這個 Store 就像是一個神奇的工具箱，裡面放著我們需要的所有工具（也就是 API 函式）。</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// stores/api.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> baseURL = <span class="string">&#x27;https://two024it-test-app.onrender.com&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> api = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  baseURL</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useApiStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;api-store&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="comment">// 取得食物列表</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">fetchFoodList</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> response = <span class="keyword">await</span> api.<span class="title function_">get</span>(<span class="string">&#x27;/freshfoods/&#x27;</span>)</span><br><span class="line">      <span class="keyword">return</span> response</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// * 新增鮮食計算</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">calculateFood</span>(<span class="params"><span class="attr">data</span>: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> response = <span class="keyword">await</span> api.<span class="title function_">post</span>(<span class="string">&#x27;/foods/calculatefood&#x27;</span>, data)</span><br><span class="line">      <span class="keyword">return</span> response</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>這裡我們定義了兩個「動作」（actions）：</p>
<ol>
<li><code>fetchFoodList</code>：用來獲取所有可用的鮮食列表。</li>
<li><code>calculateFood</code>：用來計算特定食物的營養價值。</li>
</ol>
<h2 id="2-實作計算機頁面"><a href="#2-實作計算機頁面" class="headerlink" title="2. 實作計算機頁面"></a>2. 實作計算機頁面</h2><p>接下來，我們要開始製作計算機的主頁面。這個頁面就像是一個互動式的表單，讓使用者可以輸入資料，然後獲得計算結果。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- pages/calculator.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; useApiStore &#125; <span class="keyword">from</span> <span class="string">&#x27;~/stores/api&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; showLoading, hideLoading &#125; <span class="keyword">from</span> <span class="string">&#x27;~/stores/eventBus&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> apiStore = <span class="title function_">useApiStore</span>()</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> foodList = <span class="title function_">ref</span>([])</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// ... 更多程式碼 ...</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 這裡放置 HTML 結構 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在這個檔案中，我們：</p>
<ol>
<li>引入了剛才建立的 API Store。</li>
<li>設定了一些變數來儲存食物列表和使用者的輸入。</li>
<li>準備了一個模板來顯示我們的頁面內容。</li>
</ol>
<h2 id="3-實作資料獲取功能"><a href="#3-實作資料獲取功能" class="headerlink" title="3. 實作資料獲取功能"></a>3. 實作資料獲取功能</h2><p>現在，我們要實作獲取食物列表的功能：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 取得食物列表</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchFoods</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="title function_">showLoading</span>()</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> apiStore.<span class="title function_">fetchFoodList</span>()</span><br><span class="line">    <span class="keyword">const</span> result = res.<span class="property">data</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (result &amp;&amp; result.<span class="property">status</span> === <span class="string">&#x27;success&#x27;</span>) &#123;</span><br><span class="line">      foodList.<span class="property">value</span> = result.<span class="property">data</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(foodList.<span class="property">value</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e)</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="title function_">hideLoading</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這個函式做了幾件事：</p>
<ol>
<li>顯示一個載入中的畫面（<code>showLoading()</code>）。</li>
<li>使用我們的 API Store 來獲取食物列表。</li>
<li>如果成功了，就把獲得的資料存到 <code>foodList</code> 中。</li>
<li>如果失敗了，就在控制台顯示錯誤訊息。</li>
<li>不管成功還是失敗，最後都會隱藏載入中的畫面（<code>hideLoading()</code>）。<br>這就像是派一個小助手去超市採購，回來後把採購清單交給我們，讓我們知道有哪些食材可以選擇。</li>
</ol>
<blockquote>
<p>昨天有做過，但還是再重複一次，怕有同學漏掉 🙌</p>
</blockquote>
<h2 id="4-實作計算功能"><a href="#4-實作計算功能" class="headerlink" title="4. 實作計算功能"></a>4. 實作計算功能</h2><p>接下來是重頭戲，我們要實作計算功能：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 新增鮮食計算</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">submitCalculatefood</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="title function_">showLoading</span>()</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> apiStore.<span class="title function_">calculateFood</span>(&#123;</span><br><span class="line">      <span class="attr">weight</span>: weight.<span class="property">value</span>,</span><br><span class="line">      <span class="attr">activity</span>: activity.<span class="property">value</span>,</span><br><span class="line">      <span class="attr">foodId</span>: foodId.<span class="property">value</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> result = res.<span class="property">data</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (result &amp;&amp; result.<span class="property">status</span> === <span class="string">&#x27;success&#x27;</span>) &#123;</span><br><span class="line">      calculatefoodInfo.<span class="property">value</span> = result.<span class="property">data</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;新增成功&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e)</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="title function_">hideLoading</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這個函式做的事情有：</p>
<ol>
<li>再次顯示載入中的畫面。</li>
<li>將使用者輸入的資料（鸚鵡體重、活動水平和選擇的食物）送到伺服器進行計算。</li>
<li>如果計算成功，就將結果存到 <code>calculatefoodInfo</code> 中。</li>
<li>如果失敗，同樣在控制台顯示錯誤訊息。</li>
<li>最後隱藏載入中的畫面。<br>這就像是把鸚鵡的資料和選擇的食物交給一位營養師，讓他幫我們計算出最適合的飲食方案。</li>
</ol>
<h2 id="5-製作使用者介面"><a href="#5-製作使用者介面" class="headerlink" title="5. 製作使用者介面"></a>5. 製作使用者介面</h2><p>最後，我們要把所有東西組合起來，製作一個好用又好看的使用者介面：</p>
<h3 id="5-1-標籤頁區域"><a href="#5-1-標籤頁區域" class="headerlink" title="5-1. 標籤頁區域"></a>5-1. 標籤頁區域</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-wrapper&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex overflow-x-auto&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;calculator-tab&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:class</span>=<span class="string">&quot;&#123; &#x27;calculator-tab-active&#x27;: mode === 0 &#125;&quot;</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">click</span>=<span class="string">&quot;mode = 0&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      鮮食隨機配</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;calculator-tab&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:class</span>=<span class="string">&quot;&#123; &#x27;calculator-tab-active&#x27;: mode === 1 &#125;&quot;</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">click</span>=<span class="string">&quot;mode = 1&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      指定鮮食算攝取量</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;calculator-tab&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:class</span>=<span class="string">&quot;&#123; &#x27;calculator-tab-active&#x27;: mode === 2 &#125;&quot;</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">click</span>=<span class="string">&quot;mode = 2&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      指定熱量算鮮食</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;calculator-tab&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:class</span>=<span class="string">&quot;&#123; &#x27;calculator-tab-active&#x27;: mode === 3 &#125;&quot;</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">click</span>=<span class="string">&quot;mode = 3&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      指定飼料算攝取量</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;calculator-tab&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:class</span>=<span class="string">&quot;&#123; &#x27;calculator-tab-active&#x27;: mode === 4 &#125;&quot;</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">click</span>=<span class="string">&quot;mode = 4&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      指定熱量算飼料</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>這裡有五個標籤，每個都使用了動態類綁定和點擊事件：</p>
<ul>
<li><code>:class=&quot;&#123; &#39;calculator-tab-active&#39;: mode === X &#125;&quot;</code>: 這是一個條件判斷。當 <code>mode</code> 的值等於對應的數字時，標籤會添加 <code>calculator-tab-active</code> 類，用於顯示當前選中的標籤。</li>
<li><code>@click=&quot;mode = X&quot;</code>: 點擊事件，用於切換模式。</li>
</ul>
<h3 id="5-2-內容區域"><a href="#5-2-內容區域" class="headerlink" title="5-2. 內容區域"></a>5-2. 內容區域</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-border&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 簡介 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-intro&quot;</span>&gt;</span></span><br><span class="line">    不知道該給鸚鵡吃什麼嗎？<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    輸入鸚鵡體重跟活動水平，我幫你推薦營養均衡的鮮食！</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span> <span class="attr">class</span>=<span class="string">&quot;cus-line-row&quot;</span> /&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- 0 鮮食隨機配 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span> <span class="attr">v-if</span>=<span class="string">&quot;mode === 0&quot;</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-block-padding&quot;</span>&gt;</span>鮮食隨機配<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 1 指定鮮食算攝取量 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span> <span class="attr">v-else-if</span>=<span class="string">&quot;mode === 1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;text-sm sm:text-base&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 表單內容 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- 2 指定熱量算鮮食 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span> <span class="attr">v-else-if</span>=<span class="string">&quot;mode === 2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-block-padding&quot;</span>&gt;</span>指定熱量算鮮食<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 3 指定飼料算攝取量 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span> <span class="attr">v-else-if</span>=<span class="string">&quot;mode === 3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-block-padding&quot;</span>&gt;</span>指定飼料算攝取量<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 4 指定熱量算飼料 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span> <span class="attr">v-else-if</span>=<span class="string">&quot;mode === 4&quot;</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-block-padding&quot;</span>&gt;</span>指定熱量算飼料<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>這段程式碼實現了一個動態切換內容的鮮食計算機介面：</p>
<ol>
<li>外層 <code>&lt;div&gt;</code> 使用 <code>cus-border</code> 類來設置整體樣式。</li>
<li>頂部有一個簡介區域，使用 <code>cus-intro</code> 類來設置樣式。</li>
<li>使用 <code>v-if</code> 和 <code>v-else-if</code> 指令來根據 <code>mode</code> 變數的值動態顯示不同的內容區塊。這實現了單頁面多功能的效果。</li>
<li>共有五種模式（0-4），每種模式對應不同的計算功能：<ul>
<li>鮮食隨機配</li>
<li>指定鮮食算攝取量</li>
<li>指定熱量算鮮食</li>
<li>指定飼料算攝取量</li>
<li>指定熱量算飼料</li>
</ul>
</li>
<li>每個功能區塊都包裝在 <code>&lt;section&gt;</code> 標籤中，使用 <code>cus-block-padding</code> 類來設置內邊距。</li>
<li>「指定鮮食算攝取量」區塊使用額外的 <code>text-sm sm:text-base</code> 類，可能用於響應式文字大小調整。<br>這種結構允許在單一頁面上靈活切換不同的功能，提高了使用者體驗和介面的整潔度。通過改變 <code>mode</code> 的值，可以輕鬆控制顯示哪個功能區塊。</li>
</ol>
<h3 id="5-3-表單區域"><a href="#5-3-表單區域" class="headerlink" title="5-3. 表單區域"></a>5-3. 表單區域</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-block-padding&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;cus-page-title&quot;</span>&gt;</span>輸入基本資料<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-col-3&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-col-1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;weight&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cus-label&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span>1. 體重 (g) <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;text-red2&quot;</span>&gt;</span>*<span class="tag">&lt;/<span class="name">span</span>&gt;</span>&lt;/label</span><br><span class="line">      &gt;</span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">&quot;number&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">&quot;cus-input&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">id</span>=<span class="string">&quot;weight&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-model</span>=<span class="string">&quot;weight&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">placeholder</span>=<span class="string">&quot;請輸入鸚鵡體重 (g)&quot;</span></span></span><br><span class="line"><span class="tag">      /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;cus-input-note&quot;</span>&gt;</span>基礎代謝率(BMR) = 175 * (體重 / 1000) ^ 0.75<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-col-1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;activity&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cus-label&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span>2. 活動水平 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;text-red2&quot;</span>&gt;</span>*<span class="tag">&lt;/<span class="name">span</span>&gt;</span>&lt;/label</span><br><span class="line">      &gt;</span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-radio-row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;cus-label-radio&quot;</span> <span class="attr">for</span>=<span class="string">&quot;low&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">            <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">&quot;activity&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">class</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">id</span>=<span class="string">&quot;low&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">v-model</span>=<span class="string">&quot;activity&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">value</span>=<span class="string">&quot;low&quot;</span></span></span><br><span class="line"><span class="tag">          /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          低 - 平常不太活動</span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;cus-label-radio&quot;</span> <span class="attr">for</span>=<span class="string">&quot;medium&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">            <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">&quot;activity&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">class</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">id</span>=<span class="string">&quot;medium&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">v-model</span>=<span class="string">&quot;activity&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">value</span>=<span class="string">&quot;medium&quot;</span></span></span><br><span class="line"><span class="tag">          /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          中 - 適度活動</span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;high&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cus-label-radio&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">            <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">&quot;activity&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">class</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">id</span>=<span class="string">&quot;high&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">v-model</span>=<span class="string">&quot;activity&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">value</span>=<span class="string">&quot;high&quot;</span></span></span><br><span class="line"><span class="tag">          /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>高 - 經常活動</span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;cus-input-note&quot;</span>&gt;</span>活動水平用來調整 BMR，可以更符合需求<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-col-1&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;foodList.length&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;foodId&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cus-label&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span>3. 選擇想計算的食物 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;text-red2&quot;</span>&gt;</span>*<span class="tag">&lt;/<span class="name">span</span>&gt;</span>&lt;/label</span><br><span class="line">      &gt;</span><br><span class="line">      <span class="tag">&lt;<span class="name">select</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cus-input&quot;</span> <span class="attr">id</span>=<span class="string">&quot;foodId&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;foodId&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">disabled</span> <span class="attr">selected</span>&gt;</span>請選擇食物<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">v-for</span>=<span class="string">&quot;food in foodList&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;food._id&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;food._id&quot;</span>&gt;</span></span><br><span class="line">          &#123;&#123; food.name &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;cus-input-note&quot;</span>&gt;</span>目前僅提供計算資料庫內的食物<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">&quot;cus-btn-primary mt-5&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:disabled</span>=<span class="string">&quot;!weight || !foodId&quot;</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">click</span>=<span class="string">&quot;submitCalculatefood&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    開始計算</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>這個表單區域包含了幾個重要的部分：</p>
<ol>
<li>體重輸入：使用 <code>v-model=&quot;weight&quot;</code> 綁定數據。</li>
<li>活動水平選擇：使用單選按鈕和 <code>v-model=&quot;activity&quot;</code> 綁定數據。</li>
<li>食物選擇：使用 <code>v-if=&quot;foodList.length&quot;</code> 判斷是否有食物列表，然後使用 <code>v-for</code> 循環顯示選項。</li>
<li>提交按鈕：使用 <code>:disabled=&quot;!weight || !foodId&quot;</code> 判斷是否禁用按鈕。只有當體重和食物ID都有值時，按鈕才能點擊。</li>
</ol>
<h3 id="5-4-結果顯示區域"><a href="#5-4-結果顯示區域" class="headerlink" title="5-4. 結果顯示區域"></a>5-4. 結果顯示區域</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 手機版結果顯示 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;calculatefoodInfo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;lg:hidden&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">hr</span> <span class="attr">class</span>=<span class="string">&quot;cus-line-row&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-block-padding&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;cus-page-title&quot;</span>&gt;</span>計算結果<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">&lt;!-- ? 每日基本營養需求 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;cus-title-border-left&quot;</span>&gt;</span>每日基本營養需求<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table mb-5&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-row grid grid-cols-2&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-th&quot;</span>&gt;</span>熱量 (kcal/day)<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-td&quot;</span>&gt;</span>&#123;&#123; calculatefoodInfo.dailyCalories &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-row grid grid-cols-2&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-th&quot;</span>&gt;</span>蛋白質 (g/day)<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-td&quot;</span>&gt;</span>&#123;&#123; calculatefoodInfo.dailyProteinNeed &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-row grid grid-cols-2&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-th&quot;</span>&gt;</span>脂肪 (g/day)<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-td&quot;</span>&gt;</span>&#123;&#123; calculatefoodInfo.dailyFatNeed &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid grid-cols-2&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-th&quot;</span>&gt;</span>碳水化合物 (g/day)<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-td&quot;</span>&gt;</span>&#123;&#123; calculatefoodInfo.dailyCarbsNeed &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">&lt;!-- ? 食物營養資訊 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;cus-title-border-left&quot;</span>&gt;</span>食物營養資訊<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table mb-5&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-row grid grid-cols-2&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-th&quot;</span>&gt;</span>食物名稱<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-td&quot;</span>&gt;</span>&#123;&#123; calculatefoodInfo.food?.name &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-row grid grid-cols-2&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-th&quot;</span>&gt;</span>熱量 (kcal/100g)<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-td&quot;</span>&gt;</span>&#123;&#123; calculatefoodInfo.food?.calories &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-row grid grid-cols-2&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-th&quot;</span>&gt;</span>蛋白質 (g/100g)<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-td&quot;</span>&gt;</span>&#123;&#123; calculatefoodInfo.food?.protein &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-row grid grid-cols-2&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-th&quot;</span>&gt;</span>脂肪 (g/100g)<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-td&quot;</span>&gt;</span>&#123;&#123; calculatefoodInfo.food?.fat &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-row grid grid-cols-2&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-th&quot;</span>&gt;</span>碳水化合物 (g/100g)<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-td&quot;</span>&gt;</span>&#123;&#123; calculatefoodInfo.food?.carbs &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-row grid grid-cols-2&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-th&quot;</span>&gt;</span>每日最大攝取量 (g/day)<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-td&quot;</span>&gt;</span>&#123;&#123; calculatefoodInfo.food?.maxIntake &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-row grid grid-cols-2&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-th&quot;</span>&gt;</span>食物備註<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-td&quot;</span>&gt;</span>&#123;&#123; calculatefoodInfo.food?.note &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid grid-cols-2&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-th&quot;</span>&gt;</span>好處<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-td&quot;</span>&gt;</span>&#123;&#123; calculatefoodInfo.food?.nutrition &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">&lt;!-- ? 食物建議攝取量 &amp; 營養資訊 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;cus-title-border-left&quot;</span>&gt;</span>食物建議攝取量 &amp; 營養資訊<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table mb-5&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-row grid grid-cols-2&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-th&quot;</span>&gt;</span>建議攝取量 (g/day)<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-td&quot;</span>&gt;</span>&#123;&#123; calculatefoodInfo.foodIntake &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-row grid grid-cols-2&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-th&quot;</span>&gt;</span>蛋白質量 (g/day)<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-td&quot;</span>&gt;</span>&#123;&#123; calculatefoodInfo.nutrientsProvided?.protein &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-row grid grid-cols-2&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-th&quot;</span>&gt;</span>脂肪量 (g/day)<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-td&quot;</span>&gt;</span>&#123;&#123; calculatefoodInfo.nutrientsProvided?.fat &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid grid-cols-2&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-th&quot;</span>&gt;</span>碳水化合物量 (g/day)<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-td&quot;</span>&gt;</span>&#123;&#123; calculatefoodInfo.nutrientsProvided?.carbs &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-row grid grid-cols-2&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-th&quot;</span>&gt;</span>提供總熱量 (kcal/day)<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-td&quot;</span>&gt;</span>&#123;&#123; calculatefoodInfo.foodProvidedCalories &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">&lt;!-- ? 每日所需營養缺失量 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;cus-title-border-left-err&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;calculatefoodInfo.caloriesDifference &gt; 0&quot;</span>&gt;</span></span><br><span class="line">       每日所需營養缺失量： &#123;&#123; calculatefoodInfo.caloriesDifference &#125;&#125; (kcal/day)</span><br><span class="line">     <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-else</span> <span class="attr">class</span>=<span class="string">&quot;cus-title-border-left&quot;</span>&gt;</span>補充小知識<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text-blue4&quot;</span>&gt;</span></span><br><span class="line">       每日營養最佳分配比例為：<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">       蛋白質 2：脂肪 2：碳水化合物 6，<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">       單一種鮮食難以滿足鸚鵡每日所需營養，<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">       建議可以使用鮮食隨機配！</span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 電腦版結果顯示 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;calculatefoodInfo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;hidden lg:block&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span> <span class="attr">class</span>=<span class="string">&quot;cus-line-row&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-block-padding&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;cus-page-title&quot;</span>&gt;</span>計算結果<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- ? 每日基本營養需求 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;cus-title-border-left&quot;</span>&gt;</span>每日基本營養需求<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table mb-5&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-row grid grid-cols-4&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-th&quot;</span>&gt;</span>熱量 (kcal/day)<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-th&quot;</span>&gt;</span>蛋白質 (g/day)<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-th&quot;</span>&gt;</span>脂肪 (g/day)<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-th&quot;</span>&gt;</span>碳水化合物 (g/day)<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid grid-cols-4&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-td&quot;</span>&gt;</span>&#123;&#123; calculatefoodInfo.dailyCalories &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-td&quot;</span>&gt;</span>&#123;&#123; calculatefoodInfo.dailyProteinNeed &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-td&quot;</span>&gt;</span>&#123;&#123; calculatefoodInfo.dailyFatNeed &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-td&quot;</span>&gt;</span>&#123;&#123; calculatefoodInfo.dailyCarbsNeed &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- ? 食物營養資訊 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;cus-title-border-left&quot;</span>&gt;</span>食物營養資訊<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table mb-5&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-row grid grid-cols-5&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-th&quot;</span>&gt;</span>食物名稱<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-th&quot;</span>&gt;</span>熱量 (kcal/100g)<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-th&quot;</span>&gt;</span>蛋白質 (g/100g)<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-th&quot;</span>&gt;</span>脂肪 (g/100g)<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-th&quot;</span>&gt;</span>碳水化合物 (g/100g)<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid grid-cols-5&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-td&quot;</span>&gt;</span>&#123;&#123; calculatefoodInfo.food?.name &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-td&quot;</span>&gt;</span>&#123;&#123; calculatefoodInfo.food?.calories &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-td&quot;</span>&gt;</span>&#123;&#123; calculatefoodInfo.food?.protein &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-td&quot;</span>&gt;</span>&#123;&#123; calculatefoodInfo.food?.fat &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-td&quot;</span>&gt;</span>&#123;&#123; calculatefoodInfo.food?.carbs &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table mb-5&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-row grid grid-cols-5&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-th&quot;</span>&gt;</span>每日最大攝取量 (g/day)<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-th&quot;</span>&gt;</span>食物備註<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-th col-span-3&quot;</span>&gt;</span>好處<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid grid-cols-5&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-td&quot;</span>&gt;</span>&#123;&#123; calculatefoodInfo.food?.maxIntake &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-td&quot;</span>&gt;</span>&#123;&#123; calculatefoodInfo.food?.note &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-td col-span-3&quot;</span>&gt;</span>&#123;&#123; calculatefoodInfo.food?.nutrition &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- ? 食物建議攝取量 &amp; 營養資訊 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;cus-title-border-left&quot;</span>&gt;</span>食物建議攝取量 &amp; 營養資訊<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table mb-5&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-row grid grid-cols-5&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-th&quot;</span>&gt;</span>建議攝取量 (g/day)<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-th&quot;</span>&gt;</span>蛋白質量 (g/day)<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-th&quot;</span>&gt;</span>脂肪量 (g/day)<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-th&quot;</span>&gt;</span>碳水化合物量 (g/day)<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-th&quot;</span>&gt;</span>提供總熱量 (kcal/day)<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid grid-cols-5&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-td&quot;</span>&gt;</span>&#123;&#123; calculatefoodInfo.foodIntake &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-td&quot;</span>&gt;</span>&#123;&#123; calculatefoodInfo.nutrientsProvided?.protein &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-td&quot;</span>&gt;</span>&#123;&#123; calculatefoodInfo.nutrientsProvided?.fat &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-td&quot;</span>&gt;</span>&#123;&#123; calculatefoodInfo.nutrientsProvided?.carbs &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-table-td&quot;</span>&gt;</span>&#123;&#123; calculatefoodInfo.foodProvidedCalories &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- ? 每日所需營養缺失量 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;cus-title-border-left-err&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;calculatefoodInfo.caloriesDifference &gt; 0&quot;</span>&gt;</span></span><br><span class="line">          每日所需營養缺失量： &#123;&#123; calculatefoodInfo.caloriesDifference &#125;&#125; (kcal/day)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-else</span> <span class="attr">class</span>=<span class="string">&quot;cus-title-border-left&quot;</span>&gt;</span>補充小知識<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text-blue4&quot;</span>&gt;</span></span><br><span class="line">          每日營養最佳分配比例為：<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">          蛋白質 2：脂肪 2：碳水化合物 6，<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">          單一種鮮食難以滿足鸚鵡每日所需營養，<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">          建議可以使用鮮食隨機配！</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>這段程式碼主要是結果顯示部分，分為手機版和電腦版兩種佈局。主要功能包括：</p>
<ol>
<li>條件渲染：使用 <code>v-if=&quot;calculatefoodInfo&quot;</code> 確保只在有計算結果時顯示內容。</li>
<li>響應式設計：透過 Tailwind CSS 的類別 <code>lg:hidden</code> 和 <code>hidden lg:block</code> 實現在不同螢幕尺寸下切換顯示版本。</li>
<li>資料呈現：將從 API 取回的計算結果（<code>calculatefoodInfo</code>）呈現在畫面上，包括每日基本營養需求、食物營養資訊、建議攝取量等。</li>
<li>動態內容：根據計算結果動態顯示營養缺失量或補充知識。</li>
<li>格式化顯示：使用表格形式有條理地呈現複雜的營養資訊，增強可讀性。</li>
</ol>
<h3 id="今日範例完整程式碼"><a href="#今日範例完整程式碼" class="headerlink" title="今日範例完整程式碼"></a>今日範例完整程式碼</h3><details>
<summary><code>pages/calculator.vue</code></summary>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- pages / calculator.vue --&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; useApiStore &#125; from &#x27;~/stores/api&#x27;</span><br><span class="line">import &#123; showLoading, hideLoading &#125; from &#x27;~/stores/eventBus&#x27;</span><br><span class="line"></span><br><span class="line">const apiStore = useApiStore()</span><br><span class="line">const foodList = ref([])</span><br><span class="line"></span><br><span class="line">const mode = ref(1)</span><br><span class="line">/**</span><br><span class="line"> * 選擇模式</span><br><span class="line"> * 0 鮮食隨機配</span><br><span class="line"> * 1 指定鮮食算攝取量</span><br><span class="line"> * 2 指定熱量算鮮食</span><br><span class="line"> * 3 指定飼料算攝取量</span><br><span class="line"> * 4 指定熱量算飼料</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">const weight = ref(&#x27;&#x27;) // 體重</span><br><span class="line">const activity = ref(&#x27;low&#x27;) // low, medium, high</span><br><span class="line">const foodId = ref(&#x27;&#x27;) // 食物 ID</span><br><span class="line"></span><br><span class="line">const calculatefoodInfo: any = ref(&#x27;&#x27;) // 指定鮮食算攝取量</span><br><span class="line"></span><br><span class="line">onMounted(() =&#123;</span><br><span class="line">  fetchFoods()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 取得食物列表</span><br><span class="line">async function fetchFoods() &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    showLoading()</span><br><span class="line">    const res = await apiStore.fetchFoodList()</span><br><span class="line">    const result = res.data</span><br><span class="line"></span><br><span class="line">    console.log(result)</span><br><span class="line"></span><br><span class="line">    if (result &amp;&amp; result.status === &#x27;success&#x27;) &#123;</span><br><span class="line">      foodList.value = result.data</span><br><span class="line">      console.log(foodList.value)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; catch (e) &#123;</span><br><span class="line">    console.log(e)</span><br><span class="line">  &#125; finally &#123;</span><br><span class="line">    hideLoading()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 新增鮮食計算</span><br><span class="line">async function submitCalculatefood() &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    showLoading()</span><br><span class="line">    const res = await apiStore.calculateFood(&#123;</span><br><span class="line">      weight: weight.value,</span><br><span class="line">      activity: activity.value,</span><br><span class="line">      foodId: foodId.value</span><br><span class="line">    &#125;)</span><br><span class="line">    const result = res.data</span><br><span class="line"></span><br><span class="line">    console.log(result)</span><br><span class="line"></span><br><span class="line">    if (result &amp;&amp; result.status === &#x27;success&#x27;) &#123;</span><br><span class="line">      calculatefoodInfo.value = result.data</span><br><span class="line">      console.log(&#x27;新增成功&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; catch (e) &#123;</span><br><span class="line">    console.log(e)</span><br><span class="line">  &#125; finally &#123;</span><br><span class="line">    hideLoading()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;w-full&quot;&gt;</span><br><span class="line">    &lt;!-- * tab --&gt;</span><br><span class="line">    &lt;div class=&quot;flex-wrapper&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;flex overflow-x-auto&quot;&gt;</span><br><span class="line">        &lt;div</span><br><span class="line">          class=&quot;calculator-tab&quot;</span><br><span class="line">          :class=&quot;&#123; &#x27;calculator-tab-active&#x27;: mode === 0 &#125;&quot;</span><br><span class="line">          @click=&quot;mode = 0&quot;</span><br><span class="line">        &gt;</span><br><span class="line">          鮮食隨機配</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div</span><br><span class="line">          class=&quot;calculator-tab&quot;</span><br><span class="line">          :class=&quot;&#123; &#x27;calculator-tab-active&#x27;: mode === 1 &#125;&quot;</span><br><span class="line">          @click=&quot;mode = 1&quot;</span><br><span class="line">        &gt;</span><br><span class="line">          指定鮮食算攝取量</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div</span><br><span class="line">          class=&quot;calculator-tab&quot;</span><br><span class="line">          :class=&quot;&#123; &#x27;calculator-tab-active&#x27;: mode === 2 &#125;&quot;</span><br><span class="line">          @click=&quot;mode = 2&quot;</span><br><span class="line">        &gt;</span><br><span class="line">          指定熱量算鮮食</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div</span><br><span class="line">          class=&quot;calculator-tab&quot;</span><br><span class="line">          :class=&quot;&#123; &#x27;calculator-tab-active&#x27;: mode === 3 &#125;&quot;</span><br><span class="line">          @click=&quot;mode = 3&quot;</span><br><span class="line">        &gt;</span><br><span class="line">          指定飼料算攝取量</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div</span><br><span class="line">          class=&quot;calculator-tab&quot;</span><br><span class="line">          :class=&quot;&#123; &#x27;calculator-tab-active&#x27;: mode === 4 &#125;&quot;</span><br><span class="line">          @click=&quot;mode = 4&quot;</span><br><span class="line">        &gt;</span><br><span class="line">          指定熱量算飼料</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- * content --&gt;</span><br><span class="line">    &lt;div class=&quot;cus-border&quot;&gt;</span><br><span class="line">      &lt;!-- * introduction --&gt;</span><br><span class="line">      &lt;div class=&quot;cus-intro&quot;&gt;</span><br><span class="line">        不知道該給鸚鵡吃什麼嗎？&lt;br /&gt;</span><br><span class="line">        輸入鸚鵡體重跟活動水平，我幫你推薦營養均衡的鮮食！</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;hr class=&quot;cus-line-row&quot; /&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- * page &gt; mode --&gt;</span><br><span class="line">      &lt;!-- ? 0 鮮食隨機配 --&gt;</span><br><span class="line">      &lt;section v-if=&quot;mode === 0&quot; class=&quot;&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;cus-block-padding&quot;&gt;鮮食隨機配&lt;/div&gt;</span><br><span class="line">      &lt;/section&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- ? 1 指定鮮食算攝取量 --&gt;</span><br><span class="line">      &lt;section v-else-if=&quot;mode === 1&quot;&gt;</span><br><span class="line">        &lt;!-- &gt;&gt; 1 指定鮮食算攝取量 info --&gt;</span><br><span class="line">        &lt;div class=&quot;cus-block-padding&quot;&gt;</span><br><span class="line">          &lt;h2 class=&quot;cus-page-title&quot;&gt;輸入基本資料&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">          &lt;div class=&quot;cus-col-3&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;cus-col-1&quot;&gt;</span><br><span class="line">              &lt;label for=&quot;weight&quot; class=&quot;cus-label&quot;</span><br><span class="line">                &gt;1. 體重 (g) &lt;span class=&quot;text-red2&quot;&gt;*&lt;/span&gt;&lt;/label</span><br><span class="line">              &gt;</span><br><span class="line">              &lt;input</span><br><span class="line">                type=&quot;number&quot;</span><br><span class="line">                class=&quot;cus-input&quot;</span><br><span class="line">                id=&quot;weight&quot;</span><br><span class="line">                v-model=&quot;weight&quot;</span><br><span class="line">                placeholder=&quot;請輸入鸚鵡體重 (g)&quot;</span><br><span class="line">              /&gt;</span><br><span class="line">              &lt;span class=&quot;cus-input-note&quot;&gt;基礎代謝率(BMR) = 175 * (體重 / 1000) ^ 0.75&lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">            &lt;div class=&quot;cus-col-1&quot;&gt;</span><br><span class="line">              &lt;label for=&quot;activity&quot; class=&quot;cus-label&quot;</span><br><span class="line">                &gt;2. 活動水平 &lt;span class=&quot;text-red2&quot;&gt;*&lt;/span&gt;&lt;/label</span><br><span class="line">              &gt;</span><br><span class="line">              &lt;div class=&quot;cus-radio-row&quot;&gt;</span><br><span class="line">                &lt;label class=&quot;cus-label-radio&quot; for=&quot;low&quot;&gt;</span><br><span class="line">                  &lt;input</span><br><span class="line">                    type=&quot;radio&quot;</span><br><span class="line">                    name=&quot;activity&quot;</span><br><span class="line">                    class=&quot;&quot;</span><br><span class="line">                    id=&quot;low&quot;</span><br><span class="line">                    v-model=&quot;activity&quot;</span><br><span class="line">                    value=&quot;low&quot;</span><br><span class="line">                  /&gt;</span><br><span class="line">                  &lt;span&gt;&lt;/span&gt;</span><br><span class="line">                  低 - 平常不太活動</span><br><span class="line">                &lt;/label&gt;</span><br><span class="line"></span><br><span class="line">                &lt;label class=&quot;cus-label-radio&quot; for=&quot;medium&quot;&gt;</span><br><span class="line">                  &lt;input</span><br><span class="line">                    type=&quot;radio&quot;</span><br><span class="line">                    name=&quot;activity&quot;</span><br><span class="line">                    class=&quot;&quot;</span><br><span class="line">                    id=&quot;medium&quot;</span><br><span class="line">                    v-model=&quot;activity&quot;</span><br><span class="line">                    value=&quot;medium&quot;</span><br><span class="line">                  /&gt;</span><br><span class="line">                  &lt;span&gt;&lt;/span&gt;</span><br><span class="line">                  中 - 適度活動</span><br><span class="line">                &lt;/label&gt;</span><br><span class="line"></span><br><span class="line">                &lt;label for=&quot;high&quot; class=&quot;cus-label-radio&quot;&gt;</span><br><span class="line">                  &lt;input</span><br><span class="line">                    type=&quot;radio&quot;</span><br><span class="line">                    name=&quot;activity&quot;</span><br><span class="line">                    class=&quot;&quot;</span><br><span class="line">                    id=&quot;high&quot;</span><br><span class="line">                    v-model=&quot;activity&quot;</span><br><span class="line">                    value=&quot;high&quot;</span><br><span class="line">                  /&gt;</span><br><span class="line">                  &lt;span&gt;&lt;/span&gt;高 - 經常活動</span><br><span class="line">                &lt;/label&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">              &lt;span class=&quot;cus-input-note&quot;&gt;活動水平用來調整 BMR，可以更符合需求&lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">            &lt;div class=&quot;cus-col-1&quot; v-if=&quot;foodList.length&quot;&gt;</span><br><span class="line">              &lt;label for=&quot;foodId&quot; class=&quot;cus-label&quot;</span><br><span class="line">                &gt;3. 選擇想計算的食物 &lt;span class=&quot;text-red2&quot;&gt;*&lt;/span&gt;&lt;/label</span><br><span class="line">              &gt;</span><br><span class="line">              &lt;select type=&quot;number&quot; class=&quot;cus-input&quot; id=&quot;foodId&quot; v-model=&quot;foodId&quot;&gt;</span><br><span class="line">                &lt;option value=&quot;&quot; disabled selected&gt;請選擇食物&lt;/option&gt;</span><br><span class="line">                &lt;option v-for=&quot;food in foodList&quot; :key=&quot;food._id&quot; :value=&quot;food._id&quot;&gt;</span><br><span class="line">                  &#123;&#123; food.name &#125;&#125;</span><br><span class="line">                &lt;/option&gt;</span><br><span class="line">              &lt;/select&gt;</span><br><span class="line">              &lt;span class=&quot;cus-input-note&quot;&gt;目前僅提供計算資料庫內的食物&lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">          &lt;button</span><br><span class="line">            class=&quot;cus-btn-primary mt-5&quot;</span><br><span class="line">            :disabled=&quot;!weight || !foodId&quot;</span><br><span class="line">            @click=&quot;submitCalculatefood&quot;</span><br><span class="line">          &gt;</span><br><span class="line">            開始計算</span><br><span class="line">          &lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- &gt;&gt; 1 result &gt; md --&gt;</span><br><span class="line">        &lt;div v-if=&quot;calculatefoodInfo&quot; class=&quot;lg:hidden&quot;&gt;</span><br><span class="line">          &lt;hr class=&quot;cus-line-row&quot; /&gt;</span><br><span class="line">          &lt;div class=&quot;cus-block-padding&quot;&gt;</span><br><span class="line">            &lt;h2 class=&quot;cus-page-title&quot;&gt;計算結果&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!-- ? 每日基本營養需求 --&gt;</span><br><span class="line">            &lt;h3 class=&quot;cus-title-border-left&quot;&gt;每日基本營養需求&lt;/h3&gt;</span><br><span class="line">            &lt;div class=&quot;cus-table mb-5&quot;&gt;</span><br><span class="line">              &lt;div class=&quot;cus-table-row grid grid-cols-2&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;cus-table-th&quot;&gt;熱量 (kcal/day)&lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;cus-table-td&quot;&gt;&#123;&#123; calculatefoodInfo.dailyCalories &#125;&#125;&lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">              &lt;div class=&quot;cus-table-row grid grid-cols-2&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;cus-table-th&quot;&gt;蛋白質 (g/day)&lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;cus-table-td&quot;&gt;&#123;&#123; calculatefoodInfo.dailyProteinNeed &#125;&#125;&lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">              &lt;div class=&quot;cus-table-row grid grid-cols-2&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;cus-table-th&quot;&gt;脂肪 (g/day)&lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;cus-table-td&quot;&gt;&#123;&#123; calculatefoodInfo.dailyFatNeed &#125;&#125;&lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">              &lt;div class=&quot;grid grid-cols-2&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;cus-table-th&quot;&gt;碳水化合物 (g/day)&lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;cus-table-td&quot;&gt;&#123;&#123; calculatefoodInfo.dailyCarbsNeed &#125;&#125;&lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!-- ? 食物營養資訊 --&gt;</span><br><span class="line">            &lt;h3 class=&quot;cus-title-border-left&quot;&gt;食物營養資訊&lt;/h3&gt;</span><br><span class="line">            &lt;div class=&quot;cus-table mb-5&quot;&gt;</span><br><span class="line">              &lt;div class=&quot;cus-table-row grid grid-cols-2&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;cus-table-th&quot;&gt;食物名稱&lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;cus-table-td&quot;&gt;&#123;&#123; calculatefoodInfo.food?.name &#125;&#125;&lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">              &lt;div class=&quot;cus-table-row grid grid-cols-2&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;cus-table-th&quot;&gt;熱量 (kcal/100g)&lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;cus-table-td&quot;&gt;&#123;&#123; calculatefoodInfo.food?.calories &#125;&#125;&lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">              &lt;div class=&quot;cus-table-row grid grid-cols-2&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;cus-table-th&quot;&gt;蛋白質 (g/100g)&lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;cus-table-td&quot;&gt;&#123;&#123; calculatefoodInfo.food?.protein &#125;&#125;&lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">              &lt;div class=&quot;cus-table-row grid grid-cols-2&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;cus-table-th&quot;&gt;脂肪 (g/100g)&lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;cus-table-td&quot;&gt;&#123;&#123; calculatefoodInfo.food?.fat &#125;&#125;&lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">              &lt;div class=&quot;cus-table-row grid grid-cols-2&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;cus-table-th&quot;&gt;碳水化合物 (g/100g)&lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;cus-table-td&quot;&gt;&#123;&#123; calculatefoodInfo.food?.carbs &#125;&#125;&lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">              &lt;div class=&quot;cus-table-row grid grid-cols-2&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;cus-table-th&quot;&gt;每日最大攝取量 (g/day)&lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;cus-table-td&quot;&gt;&#123;&#123; calculatefoodInfo.food?.maxIntake &#125;&#125;&lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">              &lt;div class=&quot;cus-table-row grid grid-cols-2&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;cus-table-th&quot;&gt;食物備註&lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;cus-table-td&quot;&gt;&#123;&#123; calculatefoodInfo.food?.note &#125;&#125;&lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">              &lt;div class=&quot;grid grid-cols-2&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;cus-table-th&quot;&gt;好處&lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;cus-table-td&quot;&gt;&#123;&#123; calculatefoodInfo.food?.nutrition &#125;&#125;&lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!-- ? 食物建議攝取量 &amp; 營養資訊 --&gt;</span><br><span class="line">            &lt;h3 class=&quot;cus-title-border-left&quot;&gt;食物建議攝取量 &amp; 營養資訊&lt;/h3&gt;</span><br><span class="line">            &lt;div class=&quot;cus-table mb-5&quot;&gt;</span><br><span class="line">              &lt;div class=&quot;cus-table-row grid grid-cols-2&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;cus-table-th&quot;&gt;建議攝取量 (g/day)&lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;cus-table-td&quot;&gt;&#123;&#123; calculatefoodInfo.foodIntake &#125;&#125;&lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">              &lt;div class=&quot;cus-table-row grid grid-cols-2&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;cus-table-th&quot;&gt;蛋白質量 (g/day)&lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;cus-table-td&quot;&gt;&#123;&#123; calculatefoodInfo.nutrientsProvided?.protein &#125;&#125;&lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">              &lt;div class=&quot;cus-table-row grid grid-cols-2&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;cus-table-th&quot;&gt;脂肪量 (g/day)&lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;cus-table-td&quot;&gt;&#123;&#123; calculatefoodInfo.nutrientsProvided?.fat &#125;&#125;&lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">              &lt;div class=&quot;grid grid-cols-2&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;cus-table-th&quot;&gt;碳水化合物量 (g/day)&lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;cus-table-td&quot;&gt;&#123;&#123; calculatefoodInfo.nutrientsProvided?.carbs &#125;&#125;&lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">              &lt;div class=&quot;cus-table-row grid grid-cols-2&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;cus-table-th&quot;&gt;提供總熱量 (kcal/day)&lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;cus-table-td&quot;&gt;&#123;&#123; calculatefoodInfo.foodProvidedCalories &#125;&#125;&lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!-- ? 每日所需營養缺失量 --&gt;</span><br><span class="line">            &lt;h3 class=&quot;cus-title-border-left-err&quot; v-if=&quot;calculatefoodInfo.caloriesDifference 0&quot;&gt;</span><br><span class="line">              每日所需營養缺失量： &#123;&#123; calculatefoodInfo.caloriesDifference &#125;&#125; (kcal/day)</span><br><span class="line">            &lt;/h3&gt;</span><br><span class="line">            &lt;h3 v-else class=&quot;cus-title-border-left&quot;&gt;補充小知識&lt;/h3&gt;</span><br><span class="line">            &lt;div class=&quot;text-blue4&quot;&gt;</span><br><span class="line">              每日營養最佳分配比例為：&lt;br /&gt;</span><br><span class="line">              蛋白質 2：脂肪 2：碳水化合物 6，&lt;br /&gt;</span><br><span class="line">              單一種鮮食難以滿足鸚鵡每日所需營養，&lt;br /&gt;</span><br><span class="line">              建議可以使用鮮食隨機配！</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">          &lt;!-- &lt;pre&gt;</span><br><span class="line">            &#123;&#123; calculatefoodInfo &#125;&#125;</span><br><span class="line">          &lt;/pre&gt; --&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- &gt;&gt; 1 result &gt; pc --&gt;</span><br><span class="line">        &lt;div v-if=&quot;calculatefoodInfo&quot; class=&quot;hidden lg:block&quot;&gt;</span><br><span class="line">          &lt;hr class=&quot;cus-line-row&quot; /&gt;</span><br><span class="line">          &lt;div class=&quot;cus-block-padding&quot;&gt;</span><br><span class="line">            &lt;h2 class=&quot;cus-page-title&quot;&gt;計算結果&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!-- ? 每日基本營養需求 --&gt;</span><br><span class="line">            &lt;h3 class=&quot;cus-title-border-left&quot;&gt;每日基本營養需求&lt;/h3&gt;</span><br><span class="line">            &lt;div class=&quot;cus-table mb-5&quot;&gt;</span><br><span class="line">              &lt;div class=&quot;cus-table-row grid grid-cols-4&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;cus-table-th&quot;&gt;熱量 (kcal/day)&lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;cus-table-th&quot;&gt;蛋白質 (g/day)&lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;cus-table-th&quot;&gt;脂肪 (g/day)&lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;cus-table-th&quot;&gt;碳水化合物 (g/day)&lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">              &lt;div class=&quot;grid grid-cols-4&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;cus-table-td&quot;&gt;&#123;&#123; calculatefoodInfo.dailyCalories &#125;&#125;&lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;cus-table-td&quot;&gt;&#123;&#123; calculatefoodInfo.dailyProteinNeed &#125;&#125;&lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;cus-table-td&quot;&gt;&#123;&#123; calculatefoodInfo.dailyFatNeed &#125;&#125;&lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;cus-table-td&quot;&gt;&#123;&#123; calculatefoodInfo.dailyCarbsNeed &#125;&#125;&lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!-- ? 食物營養資訊 --&gt;</span><br><span class="line">            &lt;h3 class=&quot;cus-title-border-left&quot;&gt;食物營養資訊&lt;/h3&gt;</span><br><span class="line">            &lt;div class=&quot;cus-table mb-5&quot;&gt;</span><br><span class="line">              &lt;div class=&quot;cus-table-row grid grid-cols-5&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;cus-table-th&quot;&gt;食物名稱&lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;cus-table-th&quot;&gt;熱量 (kcal/100g)&lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;cus-table-th&quot;&gt;蛋白質 (g/100g)&lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;cus-table-th&quot;&gt;脂肪 (g/100g)&lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;cus-table-th&quot;&gt;碳水化合物 (g/100g)&lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">              &lt;div class=&quot;grid grid-cols-5&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;cus-table-td&quot;&gt;&#123;&#123; calculatefoodInfo.food?.name &#125;&#125;&lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;cus-table-td&quot;&gt;&#123;&#123; calculatefoodInfo.food?.calories &#125;&#125;&lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;cus-table-td&quot;&gt;&#123;&#123; calculatefoodInfo.food?.protein &#125;&#125;&lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;cus-table-td&quot;&gt;&#123;&#123; calculatefoodInfo.food?.fat &#125;&#125;&lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;cus-table-td&quot;&gt;&#123;&#123; calculatefoodInfo.food?.carbs &#125;&#125;&lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">            &lt;div class=&quot;cus-table mb-5&quot;&gt;</span><br><span class="line">              &lt;div class=&quot;cus-table-row grid grid-cols-5&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;cus-table-th&quot;&gt;每日最大攝取量 (g/day)&lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;cus-table-th&quot;&gt;食物備註&lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;cus-table-th col-span-3&quot;&gt;好處&lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">              &lt;div class=&quot;grid grid-cols-5&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;cus-table-td&quot;&gt;&#123;&#123; calculatefoodInfo.food?.maxIntake &#125;&#125;&lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;cus-table-td&quot;&gt;&#123;&#123; calculatefoodInfo.food?.note &#125;&#125;&lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;cus-table-td col-span-3&quot;&gt;&#123;&#123; calculatefoodInfo.food?.nutrition &#125;&#125;&lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!-- ? 食物建議攝取量 &amp; 營養資訊 --&gt;</span><br><span class="line">            &lt;h3 class=&quot;cus-title-border-left&quot;&gt;食物建議攝取量 &amp; 營養資訊&lt;/h3&gt;</span><br><span class="line">            &lt;div class=&quot;cus-table mb-5&quot;&gt;</span><br><span class="line">              &lt;div class=&quot;cus-table-row grid grid-cols-5&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;cus-table-th&quot;&gt;建議攝取量 (g/day)&lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;cus-table-th&quot;&gt;蛋白質量 (g/day)&lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;cus-table-th&quot;&gt;脂肪量 (g/day)&lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;cus-table-th&quot;&gt;碳水化合物量 (g/day)&lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;cus-table-th&quot;&gt;提供總熱量 (kcal/day)&lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">              &lt;div class=&quot;grid grid-cols-5&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;cus-table-td&quot;&gt;&#123;&#123; calculatefoodInfo.foodIntake &#125;&#125;&lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;cus-table-td&quot;&gt;&#123;&#123; calculatefoodInfo.nutrientsProvided?.protein &#125;&#125;&lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;cus-table-td&quot;&gt;&#123;&#123; calculatefoodInfo.nutrientsProvided?.fat &#125;&#125;&lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;cus-table-td&quot;&gt;&#123;&#123; calculatefoodInfo.nutrientsProvided?.carbs &#125;&#125;&lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;cus-table-td&quot;&gt;&#123;&#123; calculatefoodInfo.foodProvidedCalories &#125;&#125;&lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!-- ? 每日所需營養缺失量 --&gt;</span><br><span class="line">            &lt;h3 class=&quot;cus-title-border-left-err&quot; v-if=&quot;calculatefoodInfo.caloriesDifference 0&quot;&gt;</span><br><span class="line">              每日所需營養缺失量： &#123;&#123; calculatefoodInfo.caloriesDifference &#125;&#125; (kcal/day)</span><br><span class="line">            &lt;/h3&gt;</span><br><span class="line">            &lt;h3 v-else class=&quot;cus-title-border-left&quot;&gt;補充小知識&lt;/h3&gt;</span><br><span class="line">            &lt;div class=&quot;text-blue4&quot;&gt;</span><br><span class="line">              每日營養最佳分配比例為：&lt;br /&gt;</span><br><span class="line">              蛋白質 2：脂肪 2：碳水化合物 6，&lt;br /&gt;</span><br><span class="line">              單一種鮮食難以滿足鸚鵡每日所需營養，&lt;br /&gt;</span><br><span class="line">              建議可以使用鮮食隨機配！</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">          &lt;!-- &lt;pre&gt;</span><br><span class="line">            &#123;&#123; calculatefoodInfo &#125;&#125;</span><br><span class="line">          &lt;/pre&gt; --&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/section&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- ? 2 指定熱量算鮮食 --&gt;</span><br><span class="line">      &lt;section v-else-if=&quot;mode === 2&quot; class=&quot;&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;cus-block-padding&quot;&gt;指定熱量算鮮食&lt;/div&gt;</span><br><span class="line">      &lt;/section&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- ? 3 指定飼料算攝取量 --&gt;</span><br><span class="line">      &lt;section v-else-if=&quot;mode === 3&quot; class=&quot;&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;cus-block-padding&quot;&gt;指定飼料算攝取量&lt;/div&gt;</span><br><span class="line">      &lt;/section&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- ? 4 指定熱量算飼料 --&gt;</span><br><span class="line">      &lt;section v-else-if=&quot;mode === 4&quot; class=&quot;&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;cus-block-padding&quot;&gt;指定熱量算飼料&lt;/div&gt;</span><br><span class="line">      &lt;/section&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- * bottom introduction --&gt;</span><br><span class="line">      &lt;hr class=&quot;cus-line-row&quot; /&gt;</span><br><span class="line">      &lt;div class=&quot;cus-intro&quot;&gt;</span><br><span class="line">        推薦食物及計算方式皆由 AI 協助蒐集和整理，僅供參考。&lt;br /&gt;</span><br><span class="line">        若有特殊飲食需求建議尋求專業幫助！</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">/* calculator-tab */</span><br><span class="line">.calculator-tab &#123;</span><br><span class="line">  @apply w-[140px] min-w-[140px] py-[10px] text-center text-[14px] text-blue4 opacity-80;</span><br><span class="line">  border-left: 1px solid transparent;</span><br><span class="line">  border-top: 1px solid transparent;</span><br><span class="line">  border-right: 1px solid transparent;</span><br><span class="line">  border-radius: 6px 6px 0 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.calculator-tab-active &#123;</span><br><span class="line">  @apply font-bold opacity-100;</span><br><span class="line">  border-left: 1px solid var(--color-blue4);</span><br><span class="line">  border-top: 1px solid var(--color-blue4);</span><br><span class="line">  border-right: 1px solid var(--color-blue4);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.overflow-x-auto &#123;</span><br><span class="line">  /* 隱藏滾動條的通用方法 */</span><br><span class="line">  scrollbar-width: none; /* Firefox */</span><br><span class="line">  -ms-overflow-style: none; /* Internet Explorer 10+ */</span><br><span class="line"></span><br><span class="line">  /* 對於 Webkit (Chrome, Safari, etc.) */</span><br><span class="line">  &amp;::-webkit-scrollbar &#123;</span><br><span class="line">    display: none;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* toggle */</span><br><span class="line">.cus-toggle-tab &#123;</span><br><span class="line">  @apply flex gap-2 rounded-md border border-blue4 p-1 text-[14px];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.cus-toggle-tab-item &#123;</span><br><span class="line">  @apply rounded px-3 py-[6px] text-blue4;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.cus-toggle-tab-item-active &#123;</span><br><span class="line">  @apply bg-blue4 text-blue1;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
</details>


<details>
<summary><code>stores/api.ts</code></summary>

<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// stores/api.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> baseURL = <span class="string">&#x27;https://two024it-test-app.onrender.com&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> api = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  baseURL</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useApiStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;api-store&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="comment">// 取得食物列表</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">fetchFoodList</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> response = <span class="keyword">await</span> api.<span class="title function_">get</span>(<span class="string">&#x27;/freshfoods/&#x27;</span>)</span><br><span class="line">      <span class="keyword">return</span> response</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 新增鮮食計算</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">calculateFood</span>(<span class="params"><span class="attr">data</span>: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> response = <span class="keyword">await</span> api.<span class="title function_">post</span>(<span class="string">&#x27;/foods/calculatefood&#x27;</span>, data)</span><br><span class="line">      <span class="keyword">return</span> response</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</details>


<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>哇！我們真的做到了！我們一起完成了一個超酷的鸚鵡鮮食計算機。從設定 API、獲取資料、進行計算，到最後呈現結果，我們一步一步地完成了每個環節。<br>記住，程式設計就像是在搭積木，我們今天學到的每個步驟都是一塊重要的積木。慢慢來，多加練習，你也可以成為一個厲害的程式設計師！<br>最後，別忘了實際動手試試看喔！實踐是最好的學習方式。加油，你一定可以的！<br>大家有沒有想要更詳細補充的部分呢？歡迎在下方留言分享喔！讓我們一起在 Nuxt3 的世界中探險吧！加油！</p>
<br />
<hr />
<br />

<blockquote>
<p>希望這篇文章有幫助到你，謝謝你的觀看，若有想看的系列也歡迎告訴我 😉</p>
</blockquote>
]]></content>
      <tags>
        <tag>2024IT鐵人賽</tag>
        <tag>API</tag>
        <tag>Nuxt3</tag>
      </tags>
  </entry>
  <entry>
    <title>[ 2024 IT 鐵人賽 DAY28 ] Nuxt 3 專案實戰：打造互動式聯絡表單</title>
    <url>/2024/10/07/2024it/d28/</url>
    <content><![CDATA[<p>哈囉，各位好！今天我們要來挑戰實用又有趣的頁面——製作一個互動式的聯絡表單。不管你是剛入門的新手，還是想更深入了解 Nuxt 3 的開發者，這個教學都能讓你學到很多實用的技巧。我們會用到 Nuxt 3、Pinia 和一些基本的表單處理技巧。準備好了嗎？讓我們開始吧！</p>
<span id="more"></span>

<div class="cus-intro-box">
    <h2>房東不給養鸚鵡 - 那就用 Nuxt + Express + MongoDB 30 天寫一個全端鸚鵡專案。</h2>
    <p>挑戰人生第一次鐵人賽，就來個佛心分享 side project，從專案發想、規劃、設計、資料庫、開發到部署，技術使用 Nuxt 3、Tailwind CSS、Pinia、Axios、Express、MongoDB，製作一個前後端分離的鸚鵡專案，功能主要介紹食物計算機和聯絡我們，希望可以讓更多人瞭解專案的完整流程 ✨</p>
    <a href="https://ithelp.ithome.com.tw/users/20159686/ironman/7564" target="_blank">IT 全文章連結</a>
</div>

<h2 id="1-設定-API-Store"><a href="#1-設定-API-Store" class="headerlink" title="1. 設定 API Store"></a>1. 設定 API Store</h2><p>在 <code>stores</code> 資料夾中修改 <code>api.ts</code> 檔案：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// stores/api.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> baseURL = <span class="string">&#x27;&lt;https://two024it-test-app.onrender.com&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> api = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  baseURL</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useApiStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;api-store&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="comment">// 新增回饋</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">createFeedback</span>(<span class="params"><span class="attr">data</span>: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> response = <span class="keyword">await</span> api.<span class="title function_">post</span>(<span class="string">&#x27;/feedbacks&#x27;</span>, data)</span><br><span class="line">      <span class="keyword">return</span> response</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>新增 <code>createFeedback</code> 方法，用來將使用者的回饋發送到伺服器。</p>
<h2 id="2-實作聯絡表單頁面"><a href="#2-實作聯絡表單頁面" class="headerlink" title="2. 實作聯絡表單頁面"></a>2. 實作聯絡表單頁面</h2><p>接下來，我們要在 <code>pages</code> 資料夾中修改 <code>connect.vue</code> 檔案。這個檔案會包含我們的表單和相關邏輯。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- pages/connect.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; useApiStore &#125; <span class="keyword">from</span> <span class="string">&#x27;~/stores/api&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; showLoading, hideLoading &#125; <span class="keyword">from</span> <span class="string">&#x27;~/stores/eventBus&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> apiStore = <span class="title function_">useApiStore</span>()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> contactPerson = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> phone = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> email = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> feedback = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> source = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> sourceOption = [<span class="string">&#x27;網路搜尋&#x27;</span>, <span class="string">&#x27;社群媒體&#x27;</span>, <span class="string">&#x27;親友介紹&#x27;</span>, <span class="string">&#x27;其他&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// ... 其他程式碼會在後續步驟中添加</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 模板內容會在後續步驟中添加 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在這個檔案中，我們：</p>
<ol>
<li>引入了必要的函式和 store。</li>
<li>設定了表單所需的響應式變數。</li>
<li>定義了一個來源選項的陣列。</li>
</ol>
<h2 id="3-定義資料結構"><a href="#3-定義資料結構" class="headerlink" title="3. 定義資料結構"></a>3. 定義資料結構</h2><p>在開始實作表單邏輯之前，我們需要先定義清晰的資料結構。這是程式設計中非常重要的一步，它能幫助我們更好地組織和管理數據。</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">FeedbackData</span> &#123;</span><br><span class="line">  <span class="attr">contactPerson</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">phone</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">email</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">feedback</span>: <span class="built_in">string</span></span><br><span class="line">  source?: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>讓我們深入了解這個 interface：</p>
<ul>
<li><code>contactPerson</code>、<code>phone</code>、<code>email</code> 和 <code>feedback</code> 都被定義為 <code>string</code> 類型，這意味著它們必須是文字資料。</li>
<li><code>source</code> 後面的 <code>?</code> 表示這是一個可選欄位。使用者可以填寫，也可以不填寫。</li>
</ul>
<p>使用 interface 的好處：</p>
<ol>
<li><strong>型別安全</strong>：TypeScript 會在編譯時檢查我們的程式碼，確保我們使用了正確的資料類型。</li>
<li><strong>程式碼提示</strong>：當我們使用這個 interface 時，IDE 會提供相應的程式碼提示。</li>
<li><strong>文件化</strong>：interface 本身就是一種文件，清楚地描述了我們期望的資料結構。</li>
<li><strong>可重用性</strong>：我們可以在多個地方重複使用這個 interface。</li>
</ol>
<h2 id="4-實作表單邏輯"><a href="#4-實作表單邏輯" class="headerlink" title="4. 實作表單邏輯"></a>4. 實作表單邏輯</h2><p>現在，讓我們深入了解表單的核心邏輯：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 送出聯絡我們</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">sendContact</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="title function_">showLoading</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="attr">data</span>: <span class="title class_">FeedbackData</span> = &#123;</span><br><span class="line">      <span class="attr">contactPerson</span>: contactPerson.<span class="property">value</span>,</span><br><span class="line">      <span class="attr">phone</span>: phone.<span class="property">value</span>,</span><br><span class="line">      <span class="attr">email</span>: email.<span class="property">value</span>,</span><br><span class="line">      <span class="attr">feedback</span>: feedback.<span class="property">value</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// source 有值才加入</span></span><br><span class="line">    <span class="keyword">if</span> (source.<span class="property">value</span>) &#123;</span><br><span class="line">      data = &#123; ...data, <span class="attr">source</span>: source.<span class="property">value</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> apiStore.<span class="title function_">createFeedback</span>(data <span class="keyword">as</span> <span class="built_in">any</span>)</span><br><span class="line">    <span class="keyword">const</span> result = res.<span class="property">data</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (result &amp;&amp; result.<span class="property">status</span> === <span class="string">&#x27;success&#x27;</span>) &#123;</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&#x27;感謝您的回饋，我們會盡快處理！&#x27;</span>)</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 清空表單</span></span><br><span class="line">      contactPerson.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">      phone.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">      email.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">      feedback.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">      source.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&#x27;發生錯誤，請稍後再試！&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;發生錯誤，請稍後再試！&#x27;</span>)</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="title function_">hideLoading</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 檢查 email 格式 (blur 事件觸發)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkEmail</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (email.<span class="property">value</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> emailReg = <span class="regexp">/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]&#123;2,&#125;$/</span></span><br><span class="line">    <span class="keyword">if</span> (!emailReg.<span class="title function_">test</span>(email.<span class="property">value</span>)) &#123;</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&#x27;請輸入正確的 email 格式！&#x27;</span>)</span><br><span class="line">      email.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>sendContact</code> 函式的詳細說明：</p>
<ol>
<li>使用 <code>try-catch</code> 結構來處理可能發生的錯誤。</li>
<li><code>showLoading()</code> 顯示載入畫面，提升用戶體驗。</li>
<li>創建 <code>data</code> 物件，使用我們之前定義的 <code>FeedbackData</code> interface。</li>
<li>使用條件判斷來處理可選的 <code>source</code> 欄位。</li>
<li>使用 <code>apiStore.createFeedback()</code> 發送資料到後端。</li>
<li>根據回應來顯示成功或失敗的訊息。</li>
<li>如果成功，清空所有表單欄位。</li>
<li>最後，不管成功與否，都會呼叫 <code>hideLoading()</code> 來隱藏載入畫面。</li>
</ol>
<p><code>checkEmail</code> 函式的作用：</p>
<ol>
<li>使用正則表達式來驗證 email 格式。</li>
<li>如果格式不正確，顯示警告訊息並清空輸入欄位。</li>
<li>這個函式通常綁定在 email 輸入框的 <code>blur</code> 事件上，當使用者離開輸入框時觸發。</li>
</ol>
<h2 id="5-製作表單介面"><a href="#5-製作表單介面" class="headerlink" title="5. 製作表單介面"></a>5. 製作表單介面</h2><p>這個 Vue 模板實現了一個功能完整的聯絡表單頁面。讓我們來看看它的三個主要區塊：</p>
<h3 id="5-1-簡介區"><a href="#5-1-簡介區" class="headerlink" title="5-1. 簡介區"></a>5-1. 簡介區</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-intro lg:hidden&quot;</span>&gt;</span></span><br><span class="line">  使用上遇到困難？<span class="tag">&lt;<span class="name">br</span> /&gt;</span>希望有更好用的功能？<span class="tag">&lt;<span class="name">br</span> /&gt;</span>覺得網站很實用？<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  把想法都告訴我們吧，<span class="tag">&lt;<span class="name">br</span> /&gt;</span>我們可以把你的想法化為現實。<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  非常歡迎擁有專業知識的夥伴加入我們的 side project ✨</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-intro hidden lg:block&quot;</span>&gt;</span></span><br><span class="line">  使用上遇到困難？希望有更好用的功能？覺得網站很實用？<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  把想法都告訴我們吧，我們可以把你的想法化為現實。<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  非常歡迎擁有專業知識的夥伴加入我們的 side project ✨</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>說明：</p>
<ul>
<li>這個區塊包含了兩個版本的簡介文字，分別針對手機和桌面版面。</li>
<li>使用 Tailwind 的響應式類別（<code>lg:hidden</code> 和 <code>hidden lg:block</code>）來控制不同螢幕尺寸下的顯示。</li>
<li>簡介內容鼓勵用戶提供回饋，並邀請他們參與專案。</li>
</ul>
<h3 id="5-2-表單區"><a href="#5-2-表單區" class="headerlink" title="5-2. 表單區"></a>5-2. 表單區</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">html</span><br><span class="line">Copy</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-block-padding&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;cus-page-title&quot;</span>&gt;</span>填寫表單幫助我們變得更好<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cus-col-3&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 名稱、電話、信箱、內容輸入框 --&gt;</span><span class="comment">&lt;!-- 來源選擇（單選按鈕） --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">&quot;cus-btn-primary mt-5&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:disabled</span>=<span class="string">&quot;!contactPerson || !phone || !email || !feedback&quot;</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">click</span>=<span class="string">&quot;sendContact&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    送出表單</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>說明：</p>
<ul>
<li>這是表單的主體部分，包含多個輸入欄位和一個提交按鈕。</li>
<li>使用 <code>v-model</code> 指令實現數據的雙向綁定。</li>
<li>表單欄位包括：名稱、電話、信箱、內容（都是必填），以及來源（選填，使用單選按鈕）。</li>
<li>提交按鈕使用 <code>:disabled</code> 綁定來控制是否可點擊，確保必填欄位都有值。</li>
<li><code>@click=&quot;sendContact&quot;</code> 綁定了提交事件。</li>
</ul>
<h3 id="5-3-聯絡資訊區"><a href="#5-3-聯絡資訊區" class="headerlink" title="5-3. 聯絡資訊區"></a>5-3. 聯絡資訊區</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;cus-block-padding&quot;&gt;</span><br><span class="line">  &lt;h2 class=&quot;cus-page-title&quot;&gt;或是你也可以用其他方式聯繫我們&lt;/h2&gt;</span><br><span class="line">  &lt;a href=&quot;https://profile.2fishs.com/&quot; target=&quot;_blank&quot; class=&quot;mb-2 flex transform items-end gap-2 text-blue4 duration-300 hover:text-blue3&quot;&gt;</span><br><span class="line">    &lt;Icon name=&quot;ph:link&quot; size=&quot;20&quot; /&gt;</span><br><span class="line">    &lt;p&gt;profile_web&lt;/p&gt;</span><br><span class="line">  &lt;/a&gt;</span><br><span class="line">  &lt;a href=&quot;mailto:yu13142013@gmail.com&quot; target=&quot;_blank&quot; class=&quot;flex transform items-end gap-2 text-blue4 duration-300 hover:text-blue3&quot;&gt;</span><br><span class="line">    &lt;Icon name=&quot;ph:envelope-simple-light&quot; size=&quot;20&quot; /&gt;</span><br><span class="line">    &lt;p&gt;yu13142013@gmail.com&lt;/p&gt;</span><br><span class="line">  &lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>說明：</p>
<ul>
<li>這個區塊提供了其他聯繫方式，增加了用戶與網站互動的選擇。</li>
<li>包含兩個連結：一個指向個人資料頁面，另一個是郵件聯繫。</li>
<li>使用 Icon 組件來添加視覺效果。</li>
<li>應用了 hover 效果，提升了用戶體驗。</li>
</ul>
<h3 id="整體設計考量："><a href="#整體設計考量：" class="headerlink" title="整體設計考量："></a>整體設計考量：</h3><ol>
<li>響應式設計：使用 Tailwind 的響應式類別，確保在不同設備上都有良好的顯示效果。</li>
<li>用戶體驗：提供清晰的指引和多種聯繫方式，方便用戶反饋。</li>
<li>視覺一致性：使用自定義的 CSS 類別（如 <code>cus-border</code>、<code>cus-intro</code> 等）來保持整體風格的統一。</li>
<li>功能性：結合了 Vue 的各種功能，如數據綁定、條件渲染和事件處理，實現了豐富的交互功能。<br>這個模板不僅在視覺上吸引人，還具有良好的功能性和用戶體驗，是一個優秀的聯絡表單設計範例。</li>
</ol>
<h2 id="今日實作頁面成果錄影"><a href="#今日實作頁面成果錄影" class="headerlink" title="今日實作頁面成果錄影"></a>今日實作頁面成果錄影</h2><blockquote>
<p>點擊圖片可以打開 YouTube 影片歐 ~<br><a href="https://www.youtube.com/watch?v=pEIh5BspbQQ"><img src="https://img.youtube.com/vi/pEIh5BspbQQ/0.jpg" alt="Yes"></a></p>
</blockquote>
<h2 id="今日範例完整程式碼"><a href="#今日範例完整程式碼" class="headerlink" title="今日範例完整程式碼"></a>今日範例完整程式碼</h2><details>
<summary><code>pages/connect.vue</code></summary>
    <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- pages / connect.vue --&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; useApiStore &#125; from &#x27;~/stores/api&#x27;</span><br><span class="line">const apiStore = useApiStore()</span><br><span class="line">import &#123; showLoading, hideLoading &#125; from &#x27;~/stores/eventBus&#x27;</span><br><span class="line"></span><br><span class="line">const contactPerson = ref(&#x27;&#x27;)</span><br><span class="line">const phone = ref(&#x27;&#x27;)</span><br><span class="line">const email = ref(&#x27;&#x27;)</span><br><span class="line">const feedback = ref(&#x27;&#x27;)</span><br><span class="line">const source = ref(&#x27;&#x27;) // &quot;網路搜尋&quot;, &quot;社群媒體&quot;, &quot;親友介紹&quot;, &quot;其他&quot;</span><br><span class="line"></span><br><span class="line">const sourceOption = [&#x27;網路搜尋&#x27;, &#x27;社群媒體&#x27;, &#x27;親友介紹&#x27;, &#x27;其他&#x27;]</span><br><span class="line"></span><br><span class="line">interface feedbackData &#123;</span><br><span class="line">contactPerson: string</span><br><span class="line">phone: string</span><br><span class="line">email: string</span><br><span class="line">feedback: string</span><br><span class="line">source?: string // 使 source 屬性成為可選的</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 送出聯絡我們</span><br><span class="line">async function sendContact() &#123;</span><br><span class="line">try &#123;</span><br><span class="line">    showLoading()</span><br><span class="line"></span><br><span class="line">    let data: feedbackData = &#123;</span><br><span class="line">    contactPerson: contactPerson.value,</span><br><span class="line">    phone: phone.value,</span><br><span class="line">    email: email.value,</span><br><span class="line">    feedback: feedback.value</span><br><span class="line">    &#125;</span><br><span class="line">    // source 有值才加入</span><br><span class="line">    if (source.value) &#123;</span><br><span class="line">    data = &#123; ...data, source: source.value &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    const res = await apiStore.createFeedback(data as any)</span><br><span class="line">    // console.log(res)</span><br><span class="line"></span><br><span class="line">    const result = res.data</span><br><span class="line">    if (result &amp;&amp; result.status === &#x27;success&#x27;) &#123;</span><br><span class="line">    alert(&#x27;感謝您的回饋，我們會盡快處理！&#x27;)</span><br><span class="line">    contactPerson.value = &#x27;&#x27;</span><br><span class="line">    phone.value = &#x27;&#x27;</span><br><span class="line">    email.value = &#x27;&#x27;</span><br><span class="line">    feedback.value = &#x27;&#x27;</span><br><span class="line">    source.value = &#x27;&#x27;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">    alert(&#x27;發生錯誤，請稍後再試！&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125; catch (error) &#123;</span><br><span class="line">    alert(&#x27;發生錯誤，請稍後再試！&#x27;)</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">    hideLoading()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 檢查 email 格式 (blur 事件觸發)</span><br><span class="line">function checkEmail() &#123;</span><br><span class="line">if (email.value) &#123;</span><br><span class="line">    const emailReg = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]&#123;2,&#125;$/</span><br><span class="line">    if (!emailReg.test(email.value)) &#123;</span><br><span class="line">    alert(&#x27;請輸入正確的 email 格式！&#x27;)</span><br><span class="line">    email.value = &#x27;&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;w-full&quot;&gt;</span><br><span class="line">    &lt;!-- * content --&gt;</span><br><span class="line">    &lt;div class=&quot;cus-border&quot;&gt;</span><br><span class="line">    &lt;!-- * introduction --&gt;</span><br><span class="line">    &lt;div class=&quot;cus-intro lg:hidden&quot;&gt;</span><br><span class="line">        使用上遇到困難？&lt;br /&gt;希望有更好用的功能？&lt;br /&gt;覺得網站很實用？&lt;br /&gt;</span><br><span class="line">        把想法都告訴我們吧，&lt;br /&gt;我們可以把你的想法化為現實。&lt;br /&gt;</span><br><span class="line">        非常歡迎擁有專業知識的夥伴加入我們的 side project ✨</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;cus-intro hidden lg:block&quot;&gt;</span><br><span class="line">        使用上遇到困難？希望有更好用的功能？覺得網站很實用？&lt;br /&gt;</span><br><span class="line">        把想法都告訴我們吧，我們可以把你的想法化為現實。&lt;br /&gt;</span><br><span class="line">        非常歡迎擁有專業知識的夥伴加入我們的 side project ✨</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;hr class=&quot;cus-line-row&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- * feedback info --&gt;</span><br><span class="line">    &lt;div class=&quot;cus-block-padding&quot;&gt;</span><br><span class="line">        &lt;h2 class=&quot;cus-page-title&quot;&gt;填寫表單幫助我們變得更好&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div class=&quot;cus-col-3&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;cus-col-1&quot;&gt;</span><br><span class="line">            &lt;label for=&quot;contactPerson&quot; class=&quot;cus-label&quot;</span><br><span class="line">            &gt;名稱 &lt;span class=&quot;text-red2&quot;&gt;*&lt;/span&gt;&lt;/label</span><br><span class="line">            &gt;</span><br><span class="line">            &lt;input</span><br><span class="line">            type=&quot;text&quot;</span><br><span class="line">            class=&quot;cus-input&quot;</span><br><span class="line">            id=&quot;contactPerson&quot;</span><br><span class="line">            v-model=&quot;contactPerson&quot;</span><br><span class="line">            placeholder=&quot;請輸入名稱&quot;</span><br><span class="line">            /&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div class=&quot;cus-col-1&quot;&gt;</span><br><span class="line">            &lt;label for=&quot;phone&quot; class=&quot;cus-label&quot;&gt;電話 &lt;span class=&quot;text-red2&quot;&gt;*&lt;/span&gt;&lt;/label&gt;</span><br><span class="line">            &lt;input</span><br><span class="line">            type=&quot;tel&quot;</span><br><span class="line">            class=&quot;cus-input&quot;</span><br><span class="line">            id=&quot;phone&quot;</span><br><span class="line">            v-model=&quot;phone&quot;</span><br><span class="line">            placeholder=&quot;請輸入電話&quot;</span><br><span class="line">            /&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div class=&quot;cus-col-1&quot;&gt;</span><br><span class="line">            &lt;label for=&quot;email&quot; class=&quot;cus-label&quot;&gt;信箱 &lt;span class=&quot;text-red2&quot;&gt;*&lt;/span&gt;&lt;/label&gt;</span><br><span class="line">            &lt;input</span><br><span class="line">            type=&quot;email&quot;</span><br><span class="line">            class=&quot;cus-input&quot;</span><br><span class="line">            id=&quot;email&quot;</span><br><span class="line">            v-model=&quot;email&quot;</span><br><span class="line">            placeholder=&quot;請輸入信箱&quot;</span><br><span class="line">            @blur=&quot;checkEmail&quot;</span><br><span class="line">            /&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div class=&quot;cus-col-1&quot;&gt;</span><br><span class="line">            &lt;label for=&quot;feedback&quot; class=&quot;cus-label&quot;&gt;內容 &lt;span class=&quot;text-red2&quot;&gt;*&lt;/span&gt;&lt;/label&gt;</span><br><span class="line">            &lt;input</span><br><span class="line">            type=&quot;text&quot;</span><br><span class="line">            class=&quot;cus-input&quot;</span><br><span class="line">            id=&quot;feedback&quot;</span><br><span class="line">            v-model=&quot;feedback&quot;</span><br><span class="line">            placeholder=&quot;請輸入內容&quot;</span><br><span class="line">            /&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div class=&quot;cus-col-1&quot;&gt;</span><br><span class="line">            &lt;label for=&quot;source&quot; class=&quot;cus-label&quot;&gt;從哪裡得知此網站&lt;/label&gt;</span><br><span class="line">            &lt;div class=&quot;cus-radio-row&quot;&gt;</span><br><span class="line">            &lt;label class=&quot;cus-label-radio&quot; for=&quot;網路搜尋&quot;&gt;</span><br><span class="line">                &lt;input</span><br><span class="line">                type=&quot;radio&quot;</span><br><span class="line">                name=&quot;source&quot;</span><br><span class="line">                class=&quot;&quot;</span><br><span class="line">                id=&quot;網路搜尋&quot;</span><br><span class="line">                v-model=&quot;source&quot;</span><br><span class="line">                value=&quot;網路搜尋&quot;</span><br><span class="line">                /&gt;</span><br><span class="line">                &lt;span&gt;&lt;/span&gt;</span><br><span class="line">                網路搜尋</span><br><span class="line">            &lt;/label&gt;</span><br><span class="line"></span><br><span class="line">            &lt;label class=&quot;cus-label-radio&quot; for=&quot;社群媒體&quot;&gt;</span><br><span class="line">                &lt;input</span><br><span class="line">                type=&quot;radio&quot;</span><br><span class="line">                name=&quot;source&quot;</span><br><span class="line">                class=&quot;&quot;</span><br><span class="line">                id=&quot;社群媒體&quot;</span><br><span class="line">                v-model=&quot;source&quot;</span><br><span class="line">                value=&quot;社群媒體&quot;</span><br><span class="line">                /&gt;</span><br><span class="line">                &lt;span&gt;&lt;/span&gt;</span><br><span class="line">                社群媒體</span><br><span class="line">            &lt;/label&gt;</span><br><span class="line"></span><br><span class="line">            &lt;label for=&quot;親友介紹&quot; class=&quot;cus-label-radio&quot;&gt;</span><br><span class="line">                &lt;input</span><br><span class="line">                type=&quot;radio&quot;</span><br><span class="line">                name=&quot;source&quot;</span><br><span class="line">                class=&quot;&quot;</span><br><span class="line">                id=&quot;親友介紹&quot;</span><br><span class="line">                v-model=&quot;source&quot;</span><br><span class="line">                value=&quot;親友介紹&quot;</span><br><span class="line">                /&gt;</span><br><span class="line">                &lt;span&gt;&lt;/span&gt;親友介紹</span><br><span class="line">            &lt;/label&gt;</span><br><span class="line"></span><br><span class="line">            &lt;label for=&quot;其他&quot; class=&quot;cus-label-radio&quot;&gt;</span><br><span class="line">                &lt;input</span><br><span class="line">                type=&quot;radio&quot;</span><br><span class="line">                name=&quot;source&quot;</span><br><span class="line">                class=&quot;&quot;</span><br><span class="line">                id=&quot;其他&quot;</span><br><span class="line">                v-model=&quot;source&quot;</span><br><span class="line">                value=&quot;其他&quot;</span><br><span class="line">                /&gt;</span><br><span class="line">                &lt;span&gt;&lt;/span&gt;其他</span><br><span class="line">            &lt;/label&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;button</span><br><span class="line">        class=&quot;cus-btn-primary mt-5&quot;</span><br><span class="line">        :disabled=&quot;!contactPerson || !phone || !email || !feedback&quot;</span><br><span class="line">        @click=&quot;sendContact&quot;</span><br><span class="line">        &gt;</span><br><span class="line">        送出表單</span><br><span class="line">        &lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;hr class=&quot;cus-line-row&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- * contact --&gt;</span><br><span class="line">    &lt;div class=&quot;cus-block-padding&quot;&gt;</span><br><span class="line">        &lt;h2 class=&quot;cus-page-title&quot;&gt;或是你也可以用其他方式聯繫我們&lt;/h2&gt;</span><br><span class="line">        &lt;a</span><br><span class="line">        href=&quot;https://profile.2fishs.com/&quot;</span><br><span class="line">        target=&quot;_blank&quot;</span><br><span class="line">        class=&quot;mb-2 flex transform items-end gap-2 text-blue4 duration-300 hover:text-blue3&quot;</span><br><span class="line">        &gt;</span><br><span class="line">        &lt;Icon name=&quot;ph:link&quot; size=&quot;20&quot; /&gt;</span><br><span class="line">        &lt;p&gt;profile_web&lt;/p&gt;</span><br><span class="line">        &lt;/a&gt;</span><br><span class="line"></span><br><span class="line">        &lt;a</span><br><span class="line">        href=&quot;mailto:yu13142013@gmail.com&quot;</span><br><span class="line">        target=&quot;_blank&quot;</span><br><span class="line">        class=&quot;flex transform items-end gap-2 text-blue4 duration-300 hover:text-blue3&quot;</span><br><span class="line">        &gt;</span><br><span class="line">        &lt;Icon name=&quot;ph:envelope-simple-light&quot; size=&quot;20&quot; /&gt;</span><br><span class="line">        &lt;p&gt;yu13142013@gmail.com&lt;/p&gt;</span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure>
</details>

<details>
<summary><code>stores/api.ts</code></summary>
    <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// stores/api.ts</span><br><span class="line"></span><br><span class="line">import &#123; defineStore &#125; from &#x27;pinia&#x27;</span><br><span class="line">import axios from &#x27;axios&#x27;</span><br><span class="line"></span><br><span class="line">const baseURL = &#x27;https://two024it-test-app.onrender.com&#x27;</span><br><span class="line"></span><br><span class="line">const api = axios.create(&#123;</span><br><span class="line">baseURL</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">export const useApiStore = defineStore(&#x27;api-store&#x27;, &#123;</span><br><span class="line">actions: &#123;</span><br><span class="line">    // 取得食物列表</span><br><span class="line">    async fetchFoodList() &#123;</span><br><span class="line">    const response = await api.get(&#x27;/freshfoods/&#x27;)</span><br><span class="line">    return response</span><br><span class="line">    &#125;,</span><br><span class="line">    // 新增鮮食計算</span><br><span class="line">    async calculateFood(data: any) &#123;</span><br><span class="line">    const response = await api.post(&#x27;/foods/calculatefood&#x27;, data)</span><br><span class="line">    return response</span><br><span class="line">    &#125;,</span><br><span class="line">    // 新增回饋</span><br><span class="line">    async createFeedback(data: any) &#123;</span><br><span class="line">    const response = await api.post(&#x27;/feedbacks&#x27;, data)</span><br><span class="line">    return response</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</details>

<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>我們已經深入探討了如何使用 Nuxt 3 和 Vue 3 來創建一個功能完整的聯絡表單。從資料結構的定義，到表單邏輯的實現，再到用戶界面的設計，每一步都是前端開發中重要的環節。這個過程不僅讓我們學習了技術細節，更讓我們理解了如何從使用者的角度來思考和設計。<br>雖然由於時間限制，我們只能實作兩個頁面，但這已經足以讓我們掌握 Nuxt 3 專案的基本架構和開發流程。記住，實踐是學習的最好方式。即使只有兩個頁面，也要盡可能地將所學付諸實踐，這樣才能真正理解和掌握這些概念。<br>明天，我們將邁出最後一步 —— 將專案部署到雲端！這將是一個將我們的作品展示給全世界的機會。在此之前，別忘了每天都要將你的更新推送到 GitHub。這不僅是一個好習慣，也是確保你的程式碼安全的重要步驟。<br>最後，記住程式開發是一個持續學習和改進的過程。今天的每一小步，都是邁向成為優秀開發者的重要一步。保持好奇心，勇於嘗試，相信自己的能力。我們在雲端見！<br>大家有沒有想要更詳細補充的部分呢？歡迎在下方留言分享喔！讓我們一起在 Nuxt3 的世界中探險吧！加油！</p>
<br />
<hr />
<br />

<blockquote>
<p>希望這篇文章有幫助到你，謝謝你的觀看，若有想看的系列也歡迎告訴我 😉</p>
</blockquote>
]]></content>
      <tags>
        <tag>2024IT鐵人賽</tag>
        <tag>API</tag>
        <tag>Nuxt3</tag>
      </tags>
  </entry>
  <entry>
    <title>[ 2024 IT 鐵人賽 DAY3 ] 網站規劃三部曲：發想、收斂、畫網站地圖</title>
    <url>/2024/09/12/2024it/d3/</url>
    <content><![CDATA[<p>哈囉大家好！我是 2魚，今天是第三天鐵人賽，我們要來聊聊這個專案的規劃過程，從腦中的靈光一閃到具體的網站地圖，一起來看看這段有趣的歷程吧！</p>
<span id="more"></span>

<div class="cus-intro-box">
    <h2>房東不給養鸚鵡 - 那就用 Nuxt + Express + MongoDB 30 天寫一個全端鸚鵡專案。</h2>
    <p>挑戰人生第一次鐵人賽，就來個佛心分享 side project，從專案發想、規劃、設計、資料庫、開發到部署，技術使用 Nuxt 3、Tailwind CSS、Pinia、Axios、Express、MongoDB，製作一個前後端分離的鸚鵡專案，功能主要介紹食物計算機和聯絡我們，希望可以讓更多人瞭解專案的完整流程 ✨</p>
    <a href="https://ithelp.ithome.com.tw/users/20159686/ironman/7564" target="_blank">IT 全文章連結</a>
</div>

<h2 id="網站功能發想：從零到無限大！"><a href="#網站功能發想：從零到無限大！" class="headerlink" title="網站功能發想：從零到無限大！"></a>網站功能發想：從零到無限大！</h2><p>最一開始我只是想做個鸚鵡食物計算機而已，就是那種可以幫鸚鵡主人計算出每天要餵食多少的小工具。有了這個想法之後，我第一件事當然是先去 Google 一下啦！畢竟重複造輪子就不好玩了嘛！（而且身為工程師，我們都知道，先 Google 一下可以省下超多時間）<br>結果發現，大家做的都是知識分享、資料整理、買賣、訓練等等的網站… 欸？好像沒有人專門做食物計算機耶！這下我可興奮了，看來我找到一個小小的藍海市場了呢！<br>於是我就帶著我的主要功能，去找我的 AI 好朋友 GPT，跟他分享我的想法，順便問問他有沒有更多好意見。你們知道嗎？這位 AI 朋友超級大方，給了我一個超～長～的功能清單！真的是又驚又喜，我都不知道該說謝謝還是該說「欸欸冷靜一點」了啦！<br>（這邊省略 GPT 給的功能清單，因為太長了XD）</p>
<h2 id="收斂專案-MVP-功能：Reality-Check-時間到！"><a href="#收斂專案-MVP-功能：Reality-Check-時間到！" class="headerlink" title="收斂專案 MVP 功能：Reality Check 時間到！"></a>收斂專案 MVP 功能：Reality Check 時間到！</h2><p>雖然 GPT 的想法讓人感動到要落淚，但現實總是殘酷的，對吧？身為一個剛出社會沒多久的菜鳥工程師，又是一人開發團隊（欸，等等，這樣說好像有點慘？），我們需要收斂自己最想做的功能，也就是所謂的最小可行產品（Minimum Viable Product，MVP）。</p>
<blockquote>
<p>小知識時間！MVP 是什麼咧？<br>MVP 就是一個產品的最早期版本，包含足夠的核心功能來滿足早期使用者，並且能夠收集使用者回饋以指導未來的開發。這個概念幫助開發者快速驗證產品想法，避免過度開發可能沒人要用的功能。簡單說，就是「先求有，再求好」的概念啦！</p>
</blockquote>
<p>經歷了一番激烈的思想鬥爭後（其實就是我左腦右腦吵了一架），我最後決定還是以食物計算機為主軸，再加上以下頁面作為第一版網站的 MVP：</p>
<ol>
<li>功能介紹的首頁：就是告訴大家這個網站在幹嘛的啦！</li>
<li>醫療資訊頁面：因為健康很重要，對吧？</li>
<li>鸚鵡資訊頁面：讓大家更了解這些可愛的小傢伙！</li>
<li>食物資訊頁面：這可是我們的主角啊！</li>
<li>回饋表單：畢竟要聽聽使用者的心聲嘛！</li>
</ol>
<p>這樣既能實現核心功能，又能提供足夠的附加價值，讓使用者對網站有更全面的了解。而且，這樣的規模對我來說也比較容易駕馭，不會還沒開始就先把自己嚇跑了（笑）。</p>
<h2 id="網站地圖繪製：視覺化我們的藍圖！"><a href="#網站地圖繪製：視覺化我們的藍圖！" class="headerlink" title="網站地圖繪製：視覺化我們的藍圖！"></a>網站地圖繪製：視覺化我們的藍圖！</h2><p>說到網站地圖，很多人可能會覺得有點陌生，沒關係！讓我來簡單解釋一下：</p>
<blockquote>
<p>又來了！小知識時間～<br>網站地圖（Sitemap）是一個網站的結構示意圖，顯示了網站的所有頁面如何組織和連結。它不僅幫助開發者規劃網站結構，也能協助搜尋引擎更好地理解和索引網站內容。簡單說，就是畫出網站的骨架啦！</p>
</blockquote>
<p>製作網站地圖時，我們的 AI 好朋友 GPT 又派上用場了！這次我使用了 GPT 的擴充套件 Whimsical Diagrams。它能夠產出一個可以連結到 Whimsical（一個超好用的線上繪圖工具）的檔案。跳轉到 Whimsical 頁面後，我就可以根據需求進行修改調整，簡直是懶人救星啊！<br><img src="https://ithelp.ithome.com.tw/upload/images/20240912/20159686xxUvfA8xis.png" alt="https://ithelp.ithome.com.tw/upload/images/20240912/20159686xxUvfA8xis.png"></p>
<blockquote>
<p>製作流程範例<br><img src="https://ithelp.ithome.com.tw/upload/images/20240912/20159686ZducsLueuT.png" alt="https://ithelp.ithome.com.tw/upload/images/20240912/20159686ZducsLueuT.png"><br><img src="https://ithelp.ithome.com.tw/upload/images/20240912/201596864Xv66QMpY4.png" alt="https://ithelp.ithome.com.tw/upload/images/20240912/201596864Xv66QMpY4.png"></p>
</blockquote>
<p>經過一番沉思和修改後（其實就是我邊喝咖啡邊戳戳點點啦），最終的網站地圖就暫定長這樣了：<br><img src="https://ithelp.ithome.com.tw/upload/images/20240912/20159686fmtJbozSab.png" alt="https://ithelp.ithome.com.tw/upload/images/20240912/20159686fmtJbozSab.png"><br>看起來是不是很有模有樣啊？這個網站地圖清楚地展示了我們的 MVP 結構，讓整個開發過程更有方向感。有了這個藍圖，我就可以更有信心地開始實際的開發工作了！</p>
<h2 id="結語：從想法到藍圖，我們的旅程才正要開始！"><a href="#結語：從想法到藍圖，我們的旅程才正要開始！" class="headerlink" title="結語：從想法到藍圖，我們的旅程才正要開始！"></a>結語：從想法到藍圖，我們的旅程才正要開始！</h2><p>好啦，今天就跟大家分享到這裡。從最初的「欸，來做個鸚鵡食物計算機好了」，到現在有了清晰的 MVP 功能和網站地圖，這個過程真的超有趣的！雖然還沒開始實際寫程式，但感覺我們的小專案已經開始有雛形了呢！<br>接下來的日子，我會繼續分享開發的過程，包括遇到的困難、學到的新知識，還有那些讓人又愛又恨的 Debug 時光（工程師的日常啊）。希望我的經驗能夠幫助到同樣在學習路上的你們！<br>如果你對這個專案有什麼想法或建議，歡迎在下面留言告訴我喔！我們一起討論、一起成長！明天見啦，掰掰～</p>
<br />
<hr />
<br />

<blockquote>
<p>希望這篇文章有幫助到你，謝謝你的觀看，若有想看的系列也歡迎告訴我 😉</p>
</blockquote>
]]></content>
      <tags>
        <tag>2024IT鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>[ 2024 IT 鐵人賽 DAY29 ] Nuxt 3 專案最終章：Vercel 部署全攻略</title>
    <url>/2024/10/08/2024it/d29/</url>
    <content><![CDATA[<p>哈囉大家好！今天要來分享如何將我們辛苦製作的 Nuxt 3 專案部署到雲端。是不是聽起來很厲害？別擔心，跟著我一步一步來，保證你也能輕鬆搞定！</p>
<span id="more"></span>

<div class="cus-intro-box">
    <h2>房東不給養鸚鵡 - 那就用 Nuxt + Express + MongoDB 30 天寫一個全端鸚鵡專案。</h2>
    <p>挑戰人生第一次鐵人賽，就來個佛心分享 side project，從專案發想、規劃、設計、資料庫、開發到部署，技術使用 Nuxt 3、Tailwind CSS、Pinia、Axios、Express、MongoDB，製作一個前後端分離的鸚鵡專案，功能主要介紹食物計算機和聯絡我們，希望可以讓更多人瞭解專案的完整流程 ✨</p>
    <a href="https://ithelp.ithome.com.tw/users/20159686/ironman/7564" target="_blank">IT 全文章連結</a>
</div>

<h3 id="Vercel-簡介"><a href="#Vercel-簡介" class="headerlink" title="Vercel 簡介"></a>Vercel 簡介</h3><p>首先，讓我來介紹一下我們今天的主角——Vercel。Vercel 是一個超級好用的雲端平台，特別適合部署前端專案。它不只免費，還能自動幫我們處理很多複雜的設定。簡直就是前端開發者的好朋友啊！</p>
<h2 id="部署流程"><a href="#部署流程" class="headerlink" title="部署流程"></a>部署流程</h2><h3 id="1-確定更新都已推送到-Github"><a href="#1-確定更新都已推送到-Github" class="headerlink" title="1. 確定更新都已推送到 Github"></a>1. 確定更新都已推送到 Github</h3><p>首先，請確保你的專案都已經更新到 Github 囉。這個步驟超級重要！因為 Vercel 會直接從你的 Github 倉庫拉取程式碼。如果忘記推送最新的修改，那部署出來的網站就不是最新版本了，那就糗大了！<br><img src="https://ithelp.ithome.com.tw/upload/images/20241008/201596868pKAWzSoBG.png" alt="https://ithelp.ithome.com.tw/upload/images/20241008/201596868pKAWzSoBG.png"></p>
<h3 id="2-註冊-Vercel"><a href="#2-註冊-Vercel" class="headerlink" title="2. 註冊 Vercel"></a>2. 註冊 Vercel</h3><p>接下來，我們要註冊 Vercel 帳號。建議直接用 Github 帳號登入，這樣不只省時間，還可以省去一些權限設定的麻煩。</p>
<ol>
<li>前往 <a href="https://vercel.com/">Vercel 官網</a></li>
<li>點選「Sign Up」，然後選擇「Continue with Github」</li>
<li>授權 Vercel 存取你的 Github 帳號</li>
</ol>
<h3 id="3-新增部署專案"><a href="#3-新增部署專案" class="headerlink" title="3. 新增部署專案"></a>3. 新增部署專案</h3><p>好啦，現在來到重頭戲了！讓我們一步步來部署我們的專案：</p>
<ol>
<li><p>在 Vercel 儀表板中，點擊「Add New」，然後選擇「Project」<br> <img src="https://ithelp.ithome.com.tw/upload/images/20241008/20159686ORanLMWJ1w.png" alt="https://ithelp.ithome.com.tw/upload/images/20241008/20159686ORanLMWJ1w.png"></p>
</li>
<li><p>你會看到一列 Github 倉庫，找到你要部署的專案，點擊「Import」<br> <img src="https://ithelp.ithome.com.tw/upload/images/20241008/201596868PnWaAyEgw.png" alt="https://ithelp.ithome.com.tw/upload/images/20241008/201596868PnWaAyEgw.png"></p>
</li>
<li><p>進入設置頁面後，大部分的設定都可以保持預設。Vercel 超聰明的，它會自動識別這是一個 Nuxt 3 專案，並做好相應的設定。</p>
</li>
<li><p>確認無誤後，點擊「Deploy」開始部署<br> <img src="https://ithelp.ithome.com.tw/upload/images/20241008/20159686Co3fdi6y9G.png" alt="https://ithelp.ithome.com.tw/upload/images/20241008/20159686Co3fdi6y9G.png"></p>
</li>
<li><p>接下來就是見證奇蹟的時刻！Vercel 會開始構建和部署你的專案。這時候你可以去泡杯咖啡，或是跟隔壁座位的同事聊個天。<br> <img src="https://ithelp.ithome.com.tw/upload/images/20241008/20159686GxwcfhYkFP.png" alt="https://ithelp.ithome.com.tw/upload/images/20241008/20159686GxwcfhYkFP.png"></p>
</li>
<li><p>耶！部署成功了！你會看到一個預覽圖，點擊它就可以打開你的網站了。<br> <img src="https://ithelp.ithome.com.tw/upload/images/20241008/20159686jLZ1xfo6Y4.png" alt="https://ithelp.ithome.com.tw/upload/images/20241008/20159686jLZ1xfo6Y4.png"></p>
</li>
</ol>
<h3 id="4-分享你的作品"><a href="#4-分享你的作品" class="headerlink" title="4. 分享你的作品"></a>4. 分享你的作品</h3><p>想要跟朋友炫耀你的新網站嗎？在 Vercel 的專案頁面上，你可以找到一個「Domains」部分，那裡有你網站的網址。複製它，然後到處分享吧！<br><img src="https://ithelp.ithome.com.tw/upload/images/20241008/20159686WvTGISyRe0.png" alt="https://ithelp.ithome.com.tw/upload/images/20241008/20159686WvTGISyRe0.png"></p>
<h2 id="bonus：自訂網站名稱和圖示"><a href="#bonus：自訂網站名稱和圖示" class="headerlink" title="bonus：自訂網站名稱和圖示"></a>bonus：自訂網站名稱和圖示</h2><p>既然都做到這裡了，我們來為網站加點個人風格如何？</p>
<ol>
<li><p>首先，挑一張你喜歡的圖片作為網站圖示。我們把它命名為 <code>icon.png</code>，然後放到專案的 <code>public</code> 資料夾裡。<br> <img src="https://ithelp.ithome.com.tw/upload/images/20241008/20159686VNg8CERJpk.png" alt="https://ithelp.ithome.com.tw/upload/images/20241008/20159686VNg8CERJpk.png"></p>
</li>
<li><p>接著，打開 <code>nuxt.config.ts</code>，加入以下程式碼：</p>
 <figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line">typescript</span><br><span class="line"><span class="title class_">Copy</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineNuxtConfig</span>(&#123;</span><br><span class="line"><span class="comment">// ... 其他設定 ...</span></span><br><span class="line">  <span class="attr">app</span>: &#123;</span><br><span class="line">    <span class="attr">head</span>: &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;鸚鸚食堂 Parrot Bistro&#x27;</span>,<span class="comment">// 你的網站名稱</span></span><br><span class="line">      <span class="attr">link</span>: [&#123; <span class="attr">rel</span>: <span class="string">&#x27;icon&#x27;</span>, <span class="attr">type</span>: <span class="string">&#x27;image/x-icon&#x27;</span>, <span class="attr">href</span>: <span class="string">&#x27;/icon.png&#x27;</span> &#125;]<span class="comment">// 網站圖示</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>儲存檔案，然後在本地運行專案，確認一下修改是否生效。<br> <img src="https://ithelp.ithome.com.tw/upload/images/20241008/20159686g741jpVmne.png" alt="https://ithelp.ithome.com.tw/upload/images/20241008/20159686g741jpVmne.png"></p>
</li>
<li><p>確認沒問題後，記得把修改推送到 Github 喔！<br> <img src="https://ithelp.ithome.com.tw/upload/images/20241008/20159686L5vilBFDXN.png" alt="https://ithelp.ithome.com.tw/upload/images/20241008/20159686L5vilBFDXN.png"></p>
</li>
<li><p>神奇的事情發生了！當你推送更新後，Vercel 會自動檢測到變更，並重新部署你的網站。是不是很方便？<br> <img src="https://ithelp.ithome.com.tw/upload/images/20241008/20159686GIWU8ZrH7p.png" alt="https://ithelp.ithome.com.tw/upload/images/20241008/20159686GIWU8ZrH7p.png"></p>
</li>
<li><p>等待片刻，再次打開你的網站。瞧！你的網站現在有了新的名字和圖示，是不是看起來更有專業感了呢？<br> <img src="https://ithelp.ithome.com.tw/upload/images/20241008/20159686jYJcVTa33k.png" alt="https://ithelp.ithome.com.tw/upload/images/20241008/20159686jYJcVTa33k.png"><br> <img src="https://ithelp.ithome.com.tw/upload/images/20241008/20159686P9KPCcdGe5.png" alt="https://ithelp.ithome.com.tw/upload/images/20241008/20159686P9KPCcdGe5.png"></p>
</li>
</ol>
<h3 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h3><p>哇！我們終於完成整個專案了！從本地開發到雲端部署，你現在已經掌握了一個完整的網站開發流程。感覺自己是不是也變得很厲害了呢？<br>記住，每天推送更新到 Github 是個好習慣。不只是為了備份，也是為了讓你的網站隨時保持最新狀態。<br>最後，我知道你們一定迫不及待想看到完整的專案連結。別著急，我明天就會分享給大家。（畢竟還有最後一篇文章要寫嘛，嘿嘿）<br>繼續保持學習的熱情，相信不久的將來，你也能成為一位出色的工程師！<br>大家有沒有想要更詳細補充的部分呢？歡迎在下方留言分享喔！讓我們一起在 Nuxt3 的世界中探險吧！加油！</p>
<br />
<hr />
<br />

<blockquote>
<p>希望這篇文章有幫助到你，謝謝你的觀看，若有想看的系列也歡迎告訴我 😉</p>
</blockquote>
]]></content>
      <tags>
        <tag>2024IT鐵人賽</tag>
        <tag>API</tag>
        <tag>Nuxt3</tag>
        <tag>Vercel</tag>
      </tags>
  </entry>
  <entry>
    <title>[ 2024 IT 鐵人賽 DAY4 ] 翱翔於需求與設計之間：鸚鵡網站的使用者故事與流程圖</title>
    <url>/2024/09/13/2024it/d4/</url>
    <content><![CDATA[<p>哈囉大家好！2魚又來啦～今天是鐵人賽的第四天，我們要來聊聊使用者故事和流程圖這兩個超級實用的工具！別擔心，雖然聽起來很專業，但我會用最簡單的方式解釋給大家聽喔！</p>
<span id="more"></span>

<div class="cus-intro-box">
    <h2>房東不給養鸚鵡 - 那就用 Nuxt + Express + MongoDB 30 天寫一個全端鸚鵡專案。</h2>
    <p>挑戰人生第一次鐵人賽，就來個佛心分享 side project，從專案發想、規劃、設計、資料庫、開發到部署，技術使用 Nuxt 3、Tailwind CSS、Pinia、Axios、Express、MongoDB，製作一個前後端分離的鸚鵡專案，功能主要介紹食物計算機和聯絡我們，希望可以讓更多人瞭解專案的完整流程 ✨</p>
    <a href="https://ithelp.ithome.com.tw/users/20159686/ironman/7564" target="_blank">IT 全文章連結</a>
</div>

<h2 id="使用者故事：站在使用者的角度思考"><a href="#使用者故事：站在使用者的角度思考" class="headerlink" title="使用者故事：站在使用者的角度思考"></a>使用者故事：站在使用者的角度思考</h2><p>首先，讓我們來認識一下「使用者故事」吧！<br>使用者故事是什麼呢？簡單來說，就是用一句話來描述「誰」要做「什麼事」，以及「為什麼」要這麼做。聽起來很簡單吧？但正是這種簡單的方式，讓我們能夠更容易地理解使用者的需求呢！</p>
<p>使用者故事通常長這樣：<br>「作為一個【角色】，我想要【行動】，以便【達到某個目的】。」</p>
<p>舉個例子：<br>「作為一位鸚鵡飼主，我想要使用食物計算機，以便準確計算我的鸚鵡每天應攝取的食物量。」<br>是不是一看就懂啦？這就是使用者故事的魔力！它簡單直接，讓我們能夠快速抓住重點，知道我們要為誰設計、設計什麼功能、以及這個功能的目的是什麼。<br>對了，使用者故事還有一個超厲害的地方！它能幫助我們專注在真正重要的事情上。畢竟，我們的目標是讓使用者開心，而不是堆砌一堆沒人要用的功能，對吧？<br>好啦，既然知道使用者故事這麼棒，那我們就來看看我們的「鸚鸚食堂」網站有哪些使用者故事吧！</p>
<p>💡 鸚鸚食堂網站的使用者故事：</p>
<ul>
<li>作為一位網站訪客，我希望能夠瀏覽首頁，以快速了解網站的主要功能和內容。</li>
<li>作為一位鸚鵡飼主，我想要使用食物計算機，以計算我的鸚鵡每天應攝取的食物量。</li>
<li>作為一位關心鸚鵡健康的飼主，我希望能夠瀏覽營養指南頁面，以了解鸚鵡可食用和不可食用的食物。</li>
<li>作為一位鸚鵡愛好者，我想要瀏覽百科全書頁面，以認識更多不同品種的鸚鵡。</li>
<li>作為一位需要尋找獸醫的飼主，我希望能在醫護站頁面篩選我所在地區的醫院資訊。</li>
<li>作為一位網站使用者，我想要通過聯絡我們頁面填寫表單，以提供使用網站的反饋和建議。<br>看完這些使用者故事，是不是對我們的網站要做什麼更清楚了呢？每一個故事都代表了一個重要的功能或頁面，這些都是我們接下來要努力實現的目標喔！</li>
</ul>
<h2 id="流程圖：讓想法變得更清晰"><a href="#流程圖：讓想法變得更清晰" class="headerlink" title="流程圖：讓想法變得更清晰"></a>流程圖：讓想法變得更清晰</h2><p>接下來，讓我們來認識另一個超級好用的工具：流程圖！</p>
<p>流程圖聽起來很高深，但其實就是用一些簡單的圖形和箭頭，把一個過程或系統畫出來啦！它就像是我們思考的地圖，幫助我們整理腦中的想法，讓複雜的事情變得簡單明瞭。</p>
<p>在流程圖中，我們會看到一些特定的圖形符號：</p>
<ol>
<li>橢圓形：就像是起跑線和終點線，標誌著流程的開始和結束。</li>
<li>矩形：這是我們的主角！代表具體的處理步驟或行動。</li>
<li>菱形：遇到它就要做選擇啦！表示需要做出決策的判斷點。</li>
<li>平行四邊形：負責資料的進出，代表數據的輸入或輸出。</li>
<li>箭頭：指引方向的小幫手，告訴我們下一步該往哪走。</li>
</ol>
<p>流程圖在網站開發中特別有用，它可以幫助我們：</p>
<ol>
<li>設計用戶體驗：規劃使用者怎麼跟網站互動。</li>
<li>設計功能：詳細規劃每個功能要怎麼運作。</li>
<li>規劃後端邏輯：思考資料要怎麼處理。</li>
<li>規劃測試：設計全面的測試方案。</li>
<li>處理錯誤：預想可能出錯的地方，並想出解決方法。</li>
</ol>
<p>畫流程圖就像是在為我們的網站畫設計圖，讓我們能夠更清楚地看到整個網站的結構和運作方式。這樣不只能幫助我們做出更好的設計，還能讓團隊的溝通更順暢呢！</p>
<p><img src="https://ithelp.ithome.com.tw/upload/images/20240913/20159686zZXF6BXWc5.png" alt="https://ithelp.ithome.com.tw/upload/images/20240913/20159686zZXF6BXWc5.png"></p>
<p>如果你對流程圖的製作技巧感興趣，可以參考這篇超詳細的教學文章：<a href="https://projectmanager.com.tw/%e5%b0%88%e6%a1%88%e7%ae%a1%e7%90%86/%e6%b5%81%e7%a8%8b%e5%9c%96-%e6%b5%81%e7%a8%8b%e5%9c%96%e8%a3%bd%e4%bd%9c-flow-chart/">【流程圖製作教學】流程圖符號規範+圖示說明 | Flow Chart範例 - ProjectManager</a>。裡面有更多關於流程圖的小技巧喔！</p>
<h2 id="結語：用故事和圖畫，打造夢想中的網站！"><a href="#結語：用故事和圖畫，打造夢想中的網站！" class="headerlink" title="結語：用故事和圖畫，打造夢想中的網站！"></a>結語：用故事和圖畫，打造夢想中的網站！</h2><p>今天我們學到了使用者故事和流程圖這兩個超強工具！使用者故事幫助我們站在使用者的角度思考，而流程圖則讓我們的想法變得更加清晰。<br>接下來，我會為每個使用者故事畫一張流程圖，這樣不只能幫助我更好地理解每個功能該怎麼實現，也能讓大家更清楚地看到我的想法。期待之後能和大家分享這些流程圖喔！<br>記住，無論是寫程式還是規劃專案，最重要的就是把複雜的事情變簡單。使用者故事和流程圖就是幫助我們做到這一點的好幫手！<br>好啦，今天的分享就到這裡。如果你對使用者故事或流程圖有什麼想法，或是有什麼不懂的地方，歡迎在下面留言跟我討論喔！我們明天見～掰掰！</p>
<br />
<hr />
<br />

<blockquote>
<p>希望這篇文章有幫助到你，謝謝你的觀看，若有想看的系列也歡迎告訴我 😉</p>
</blockquote>
]]></content>
      <tags>
        <tag>2024IT鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>[ 2024 IT 鐵人賽 DAY30 ] 鐵人賽尾聲：回顧、感想與未來展望</title>
    <url>/2024/10/09/2024it/d30/</url>
    <content><![CDATA[<p>哇！終於到最後一天了，感覺不只變成鐵人，都快要變成小金人了啦！這一個月真的是超級充實，每天寫文章、寫程式，腦細胞都要燒光光了呢！但是，回頭一看，才發現我們已經走了這麼長的一段路，真的是太有成就感了！</p>
<span id="more"></span>

<div class="cus-intro-box">
    <h2>房東不給養鸚鵡 - 那就用 Nuxt + Express + MongoDB 30 天寫一個全端鸚鵡專案。</h2>
    <p>挑戰人生第一次鐵人賽，就來個佛心分享 side project，從專案發想、規劃、設計、資料庫、開發到部署，技術使用 Nuxt 3、Tailwind CSS、Pinia、Axios、Express、MongoDB，製作一個前後端分離的鸚鵡專案，功能主要介紹食物計算機和聯絡我們，希望可以讓更多人瞭解專案的完整流程 ✨</p>
    <a href="https://ithelp.ithome.com.tw/users/20159686/ironman/7564" target="_blank">IT 全文章連結</a>
</div>

<h2 id="回顧這一個月的歷程"><a href="#回顧這一個月的歷程" class="headerlink" title="回顧這一個月的歷程"></a>回顧這一個月的歷程</h2><p>我們從無到有，一步一步地完成了這個專案：</p>
<ul>
<li>從腦中的想法開始發想</li>
<li>認真地收集和整理各種資料</li>
<li>畫了一堆超級厲害的圖稿（自己說）</li>
<li>設計出吸睛的網頁介面</li>
<li>建立了一個完整的資料庫</li>
<li>開發了一系列的 API</li>
<li>前端辛苦地切版、串接資料</li>
<li>實作了各種有趣的功能</li>
<li>最後還把網站成功部署上線<br>是不是光是看這個列表就覺得超有料的啊！我自己回想起來都覺得不可思議，我們真的在一個月內完成了這麼多事情！</li>
</ul>
<h2 id="關於這個專案的小秘密"><a href="#關於這個專案的小秘密" class="headerlink" title="關於這個專案的小秘密"></a>關於這個專案的小秘密</h2><p>其實啊，這個專案在兩個月前就已經完整地做好了。本來我是打算直接拿現成的程式碼來寫文章，想說這樣應該很輕鬆。結果！我發現這樣不行欸！因為我怕我寫的步驟跟實際操作不一樣，可能會讓大家遇到麻煩。<br>所以，我做了一個瘋狂的決定 —— 全部重寫！沒錯，你沒聽錯，我把整個專案從頭到尾重新寫了一遍。這真的是一個超級大工程，每天寫到手指快斷掉了啦！但是為了讓大家能夠順利跟著學習，這點辛苦算什麼呢？</p>
<h2 id="專案連結"><a href="#專案連結" class="headerlink" title="專案連結"></a>專案連結</h2><p>好啦，說了這麼多，相信大家一定很想看看完整的程式碼吧？來，這邊幫大家準備好了四個連結，包括鐵人賽的範例和完整專案的前後端 Repo：</p>
<ol>
<li>鐵人賽範例 前端 <a href="https://github.com/sunny96087/2024it-test-web">Repo</a></li>
<li>鐵人賽範例 後端 <a href="https://github.com/sunny96087/2024it-test-app">Repo</a></li>
<li>鐵人賽範例 網站 <a href="https://2024it-test-web.vercel.app/">Demo</a></li>
<li>完整專案 前端 <a href="https://github.com/sunny96087/parrot_web">Repo</a></li>
<li>完整專案 後端 <a href="https://github.com/sunny96087/parrot_api">Repo</a></li>
<li>完整 網站 <a href="https://parrot.2fishs.com/">Demo</a><br>不過要提醒大家的是，因為重寫的關係，範例和完整專案可能會有一些不同。建議大家不要混著用喔，不然可能會遇到一些奇怪的問題呢！</li>
</ol>
<h2 id="專案的起源"><a href="#專案的起源" class="headerlink" title="專案的起源"></a>專案的起源</h2><p>還記得我在第一天時跟大家分享的嗎？我因為南漂到高雄工作，租的房子不能養寵物。作為一個遵紀守法的好公民，我當然不會偷偷養啦！但是，想養鸚鵡的心情實在是太強烈了，所以就想說，既然不能真的養，那就來寫個專案過過乾癮吧！</p>
<p>不過呢，我要跟大家報告一個好消息！其實在我開始寫這系列文章之前，我已經搬好新家，而且成功養到鸚鵡了！來，讓我介紹一下我的新朋友們：左邊這位帥哥是金凱 空空，右邊這位帥哥是和尚 Bebe。是不是覺得他們超可愛的啊？我每天看到他們都會融化呢！<br><img src="https://ithelp.ithome.com.tw/upload/images/20241009/20159686G9qRylFGmj.jpg" alt="https://ithelp.ithome.com.tw/upload/images/20241009/20159686G9qRylFGmj.jpg"></p>
<h2 id="專案的未來展望"><a href="#專案的未來展望" class="headerlink" title="專案的未來展望"></a>專案的未來展望</h2><p>說實在的，一開始我只是想做個簡單的鸚鵡飲食計算機就好。但是，在跟 AI 聊天的過程中，它給了我超多天馬行空的想法！所以呢，我現在腦袋裡已經有一堆新點子在蠢蠢欲動了。</p>
<p>初步的計畫是這樣的：</p>
<ul>
<li>加入會員登入功能：讓每個鸚鵡奴都能有自己的專屬帳號</li>
<li>鸚鵡日記：記錄寶貝們每天的生活點滴</li>
<li>討論區：讓鸚鵡愛好者們可以交流心得、分享經驗</li>
</ul>
<p>當然啦，這些功能最後會不會真的實現，還要看我有沒有時間（誤）。不過，就算真的做出來了，可能也不會有人用啦！（自己默默地覺得很有趣）</p>
<h2 id="總結與心得"><a href="#總結與心得" class="headerlink" title="總結與心得"></a>總結與心得</h2><p>老實說，做這個專案的初衷，是希望能夠幫助到那些跟以前的我一樣，對 API 還一知半解的前端朋友們。我希望通過這個專案，大家能夠更了解前後端是如何合作的，在跟設計師討論或是規劃頁面的時候，能夠更有自信、更站得住腳。<br>如果你覺得這個系列對你有幫助，歡迎在下面留言分享你的心得或回饋喔！你的每一個留言都是我持續創作的動力呢！</p>
<h2 id="學習的道路永無止盡"><a href="#學習的道路永無止盡" class="headerlink" title="學習的道路永無止盡"></a>學習的道路永無止盡</h2><p>說真的，自從轉職進入這個領域後，我才發現技術的世界真的是無窮無盡。每天都有新的東西冒出來，感覺永遠都學不完！不過，這也正是這個領域最迷人的地方，不是嗎？<br>我自己還有一堆想學的技術呢：React、Docker、AWS、Python…光是想到就覺得興奮又害怕（笑）。<br>希望大家都能保持這份學習的熱情，繼續在程式的世界裡探索、成長。共勉之！讓我們一起加油，用程式碼改變世界吧！💪✨</p>
<h2 id="從軍人到工程師：我的轉職心路歷程"><a href="#從軍人到工程師：我的轉職心路歷程" class="headerlink" title="從軍人到工程師：我的轉職心路歷程"></a>從軍人到工程師：我的轉職心路歷程</h2><p>最後的最後，我想跟大家分享一下我的故事。我曾經是一名空軍志願役，服役了 3 年半。沒錯，你沒聽錯，是 3 年半！因為我最後決定賠錢退伍，只為了不再蹉跎任何一天在那個不適合我的地方。<br>我的軍旅生涯是從志願役士兵開始的。作為一名飛修科畢業生，我透過專長遴選成為了一名飛修兵。（說真的，除非你對飛機有特別的熱情，否則真的不建議去碰飛機啊！）<br>入伍訓後，我被分配到空軍第一戰術戰鬥機聯隊。我們的主要工作是負責飛機的週期保養和定檢。因為飛機數量多，工作量自然也就很大。白天要出公差、修飛機，晚上還要打掃、點名、整理工單。雖然單位裡大多數人都很 nice（除了一位有點奇怪的方丈班長），但那種朝五晚十一的生活真的很累人。<br>另外因為單位說修飛機需要「高壓管理」，所以我沒有外膳宿的機會，放假還只能放洞八。（ 我真的謝謝</p>
<p>兩年後，我終於去報名了兵轉士。</p>
<p>接著就是航校的日子了。去過航校的人都懂，沒去過的…嗯，不知道可能比較好。那裡真的不是人待的地方。<br>最後，我以不錯的成績畢業，自選到了空軍第一後勤指揮部。當時只能選擇專長名稱和地點，下部隊後才知道是做後勤文書類的工作。本來以為終於找到理想的工作環境，結果辦公室裡都是老學長姐，融入起來有點困難。<br>更糟的是，我來沒多久，一連走了三位比我早來的學長姐，他們的業務全都落到我一個人身上。工作量大得讓人喘不過氣，學長姐們不願意幫忙就算了，還一直找麻煩。最後，我決定當個「爛草莓」，直接申請退伍。</p>
<p>轉職成為前端工程師的路並不平坦。我經歷了無數個日夜的苦惱和不知所措，常常感覺像是在迷霧中摸索前進。但我從未放棄，不斷地查資料、請教老師、諮詢 AI，努力找尋前進的方向。<br>最讓我感恩的是，我遇到了一群志同道合的同學。我們一起討論問題、合作專案，甚至還一起參加比賽寫文章！正是這些經歷，讓我在轉職的道路上不至於感到孤單。<br>如今，我不只成功轉職，還有機會帶領一群新手朋友們做專題（目前是個美食地圖項目）。雖然最近他們的學習熱情有點低落（也許是因為免費的東西總是缺乏動力？哈哈），但我仍然樂在其中。<br>我深知轉職路上的艱辛，所以現在的我希望能夠幫助更多人少走一些彎路。如果你正在考慮轉職，或是在學習路上感到迷茫，歡迎來跟我聊聊天！也許我能為你指點一二，或者只是單純地給你一些鼓勵。</p>
<p>記住，每個人的轉職故事都是獨一無二的。無論你現在在哪個階段，只要保持熱情和毅力，終會找到屬於自己的一片天！加油！</p>
<br />
<hr />
<br />

<blockquote>
<p>希望這篇文章有幫助到你，謝謝你的觀看，若有想看的系列也歡迎告訴我 😉</p>
</blockquote>
]]></content>
      <tags>
        <tag>2024IT鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>[ 2024 IT 鐵人賽 DAY6 ] 從黑白到繽紛：Figma 的網站調色與 Mockup 實驗室</title>
    <url>/2024/09/15/2024it/d6/</url>
    <content><![CDATA[<p>哈囉大家好！我是 2魚，今天是鐵人賽的第六天啦！經過前幾天的準備工作，我們終於要進入令人期待的設計階段了！今天我要跟大家分享如何從簡單的線稿圖進化到精美的高保真原型，也就是所謂的「精稿」。我們會一起探索強大的設計工具 Figma，並且學習如何選擇配色和運用 UI Kit。準備好來場視覺饗宴了嗎？Let’s go！</p>
<span id="more"></span>

<div class="cus-intro-box">
    <h2>房東不給養鸚鵡 - 那就用 Nuxt + Express + MongoDB 30 天寫一個全端鸚鵡專案。</h2>
    <p>挑戰人生第一次鐵人賽，就來個佛心分享 side project，從專案發想、規劃、設計、資料庫、開發到部署，技術使用 Nuxt 3、Tailwind CSS、Pinia、Axios、Express、MongoDB，製作一個前後端分離的鸚鵡專案，功能主要介紹食物計算機和聯絡我們，希望可以讓更多人瞭解專案的完整流程 ✨</p>
    <a href="https://ithelp.ithome.com.tw/users/20159686/ironman/7564" target="_blank">IT 全文章連結</a>
</div>

<h2 id="繪製精稿"><a href="#繪製精稿" class="headerlink" title="繪製精稿"></a>繪製精稿</h2><blockquote>
<p>精稿（High-fidelity Prototype）是什麼？</p>
</blockquote>
<p>精稿是設計流程中的高保真度原型，展現產品的最終視覺效果和交互細節。與線稿圖（Wireframe）相比，精稿更接近成品的外觀和使用體驗。精稿的特點包括：</p>
<ol>
<li>視覺完整性：呈現最終的 UI（用戶界面）設計，包括配色方案、字體選擇和圖標設計。</li>
<li>交互保真度（Interaction Fidelity）：模擬實際的用戶交互，如懸停效果、轉場動畫等。</li>
<li>內容真實性：使用實際內容而非佔位符（Lorem Ipsum），以更好地展現版面配置。</li>
<li>響應式設計（Responsive Design）：展示在不同設備和螢幕尺寸下的介面效果。</li>
</ol>
<blockquote>
<p>今天使用到的工具：Figma ✨</p>
</blockquote>
<p>Figma 是一款基於雲端的協作式 UI&#x2F;UX 設計工具。它具有以下核心功能：</p>
<ol>
<li>實時協作（Real-time Collaboration）：<br>多人可同時編輯同一個文件，支持即時評論和反饋。</li>
<li>版本歷史（Version History）：<br>自動保存修改，可輕鬆回溯不同版本。</li>
<li>組件系統（Component System）：<br>創建可重用的設計元素，支持嵌套組件和變體（Variants）。</li>
<li>自動佈局（Auto Layout）：<br>智能調整元素位置，簡化響應式設計過程。</li>
<li>原型設計（Prototyping）：<br>在設計文件中直接創建交互原型，支持複雜的交互邏輯。</li>
<li>設計系統（Design System）：<br>建立和管理一致的設計語言，包括顏色、字體和組件庫。</li>
<li>開發者交接（Developer Handoff）：<br>自動生成 CSS 代碼，簡化設計到開發的過渡。</li>
<li>插件生態系統（Plugin Ecosystem）：<br>豐富的第三方插件擴展功能，如自動生成內容、色彩管理等。</li>
</ol>
<p>Figma 官網：<a href="https://www.figma.com/">https://www.figma.com</a><br>Figma 的這些功能使得設計團隊能夠更高效地進行迭代設計（Iterative Design），並與開發團隊緊密協作，從而優化整個產品開發生命週期（Product Development Lifecycle）。</p>
<h2 id="如何開始使用-Figma："><a href="#如何開始使用-Figma：" class="headerlink" title="如何開始使用 Figma："></a>如何開始使用 Figma：</h2><ul>
<li><p>註冊 Figma 帳號（可使用 Google 帳號快速註冊）</p>
</li>
<li><p>創建新的設計檔<br><img src="https://ithelp.ithome.com.tw/upload/images/20240915/20159686yUbuVGao4l.png" alt="https://ithelp.ithome.com.tw/upload/images/20240915/20159686yUbuVGao4l.png"><br>  Figma 儀表板簡介</p>
</li>
<li><p>進入設計檔後，會看到以下主要區域：</p>
<ul>
<li>左側：工具欄和圖層面板</li>
<li>中間：畫布區域</li>
<li>右側：屬性面板</li>
<li>頂部：菜單欄 (回首頁、切換檔案)<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20240915/20159686kWvNbGDyhN.png" alt="https://ithelp.ithome.com.tw/upload/images/20240915/20159686kWvNbGDyhN.png"></li>
</ul>
</li>
</ul>
<p>下面的步驟都是使用這個 Figma 的設計檔操作哦</p>
<hr>
<h2 id="選擇網站配色方案"><a href="#選擇網站配色方案" class="headerlink" title="選擇網站配色方案"></a>選擇網站配色方案</h2><ul>
<li>Coolors：快速生成色彩搭配方案。</li>
<li>Color Palette Generator：根據選定的顏色生成配套色彩。</li>
<li>Tailwind CSS Color Generator：生成與 Tailwind CSS 命名和調色方式相符的配色方案。</li>
</ul>
<p>我選完之後會將他們放到 Figma 的檔案內 (範例如圖)</p>
<p>配色小技巧：</p>
<ul>
<li>將顏色區分為主色、輔色、強調色、背景色和灰階等類別</li>
<li>主色和輔色各選擇深淺三個色階，根據需要逐步擴展</li>
<li>考慮到使用 Tailwind CSS 框架，可直接採用框架內建的灰階色彩<br><img src="https://ithelp.ithome.com.tw/upload/images/20240915/20159686DFNmDFYhjZ.png" alt="https://ithelp.ithome.com.tw/upload/images/20240915/20159686DFNmDFYhjZ.png"></li>
</ul>
<hr>
<h2 id="設計資源推薦"><a href="#設計資源推薦" class="headerlink" title="設計資源推薦"></a>設計資源推薦</h2><p>如果您對設計不太有把握，可以利用現成的 UI Kit。Figma 社群提供了大量優質的公開資源(如圖)。<br><img src="https://ithelp.ithome.com.tw/upload/images/20240915/20159686dKSYrRccHk.png" alt="https://ithelp.ithome.com.tw/upload/images/20240915/20159686dKSYrRccHk.png"><br>本次專案使用的是 Myna UI - TailwindCSS &amp; shadcn&#x2F;ui &amp; Radix Premium UI Kit。選擇 UI Kit 時，可以參考使用者數量和收藏數來判斷其質量和受歡迎程度。</p>
<p>使用 UI Kit：</p>
<ol>
<li>打開選定的 UI Kit 檔案 (點擊按鈕 Open in Figma)</li>
<li>將需要的元件複製到您的設計檔中</li>
<li>根據需要進行自定義修改<br><img src="https://ithelp.ithome.com.tw/upload/images/20240915/20159686ka4HWRuOse.png" alt="https://ithelp.ithome.com.tw/upload/images/20240915/20159686ka4HWRuOse.png"></li>
</ol>
<hr>
<h2 id="有了顏色方案和-UI-元件後，接下來就是發揮個人創意的時候囉"><a href="#有了顏色方案和-UI-元件後，接下來就是發揮個人創意的時候囉" class="headerlink" title="有了顏色方案和 UI 元件後，接下來就是發揮個人創意的時候囉"></a>有了顏色方案和 UI 元件後，接下來就是發揮個人創意的時候囉</h2><p>考慮到本系列文章的重點是帶領讀者完整體驗專案開發流程，因此不會深入探討設計技巧。<br>附上本專案的設計成果：</p>
<ul>
<li><p>Mockup（模擬圖）<br><img src="https://ithelp.ithome.com.tw/upload/images/20240915/20159686q0nZ0nHOWJ.png" alt="https://ithelp.ithome.com.tw/upload/images/20240915/20159686q0nZ0nHOWJ.png"></p>
</li>
<li><p>UI Kit（介面元件庫）<br><img src="https://ithelp.ithome.com.tw/upload/images/20240915/20159686u8AJizVshI.png" alt="https://ithelp.ithome.com.tw/upload/images/20240915/20159686u8AJizVshI.png"></p>
</li>
</ul>
<h3 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h3><p>哇，今天我們一起完成了一個重要的里程碑呢！從最初的想法，到線稿圖，再到現在的精美設計，「鸚鸚食堂」的樣貌越來越清晰了。透過 Figma 這個強大的工具，我們不只是畫出了漂亮的介面，更是為接下來的開發工作鋪平了道路。<br>回顧今天的過程，我們學會了如何選擇配色方案、善用 UI Kit，還有如何利用 Figma 的各種功能來提高工作效率。這些技能不只適用於這個專案，相信在未來的工作中也會派上大用場！<br>雖然設計過程中遇到了不少挑戰，但看到最後的成果，真的覺得一切都值得。希望通過我的分享，能讓大家對 UI&#x2F;UX 設計有更深入的了解，也許還能激發你們的設計靈感呢！<br>明天我們將進入開發階段，把這些漂亮的設計變成真正可以運作的網站。我已經迫不及待要開始寫程式了，你們呢？<br>如果你對今天的內容有任何問題，或是想分享你的設計經驗，歡迎在下方留言喔！讓我們一起學習、一起成長。明天見啦，掰掰～</p>
<br />
<hr />
<br />

<blockquote>
<p>希望這篇文章有幫助到你，謝謝你的觀看，若有想看的系列也歡迎告訴我 😉</p>
</blockquote>
]]></content>
      <tags>
        <tag>2024IT鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>[ 2024 IT 鐵人賽 DAY7 ] 資料管理新手村：MongoDB 結構設計初體驗</title>
    <url>/2024/09/16/2024it/d7/</url>
    <content><![CDATA[<p>哈囉大家好！我是 2魚，今天是鐵人賽的第七天啦！經過前幾天的努力，我們已經有了網站的基本設計，現在是時候來處理網站的「大腦」了 —— 也就是資料庫！今天，我們要一起探索資料庫的世界，特別是 MongoDB 這個強大的 NoSQL 資料庫。不管你是資料庫新手還是老手，相信今天的內容都能讓你有新的收穫。準備好要當資料管理大師了嗎？Let’s dive in！</p>
<span id="more"></span>

<div class="cus-intro-box">
    <h2>房東不給養鸚鵡 - 那就用 Nuxt + Express + MongoDB 30 天寫一個全端鸚鵡專案。</h2>
    <p>挑戰人生第一次鐵人賽，就來個佛心分享 side project，從專案發想、規劃、設計、資料庫、開發到部署，技術使用 Nuxt 3、Tailwind CSS、Pinia、Axios、Express、MongoDB，製作一個前後端分離的鸚鵡專案，功能主要介紹食物計算機和聯絡我們，希望可以讓更多人瞭解專案的完整流程 ✨</p>
    <a href="https://ithelp.ithome.com.tw/users/20159686/ironman/7564" target="_blank">IT 全文章連結</a>
</div>

<h2 id="關聯式資料庫-vs-NoSQL-資料庫"><a href="#關聯式資料庫-vs-NoSQL-資料庫" class="headerlink" title="關聯式資料庫 vs NoSQL 資料庫"></a>關聯式資料庫 vs NoSQL 資料庫</h2><h3 id="關聯式資料庫（如-MySQL-PostgreSQL）："><a href="#關聯式資料庫（如-MySQL-PostgreSQL）：" class="headerlink" title="關聯式資料庫（如 MySQL, PostgreSQL）："></a>關聯式資料庫（如 MySQL, PostgreSQL）：</h3><p>想像一下一個巨大的 Excel 表格集合，每個表格都有固定的列和行。</p>
<p>特點：</p>
<ul>
<li>結構化數據：資料必須符合預定義的結構</li>
<li>使用 SQL 語言查詢</li>
<li>強大的關聯能力：可以輕鬆地在不同表格間建立關聯</li>
<li>ACID 特性：確保交易的可靠性</li>
</ul>
<h3 id="NoSQL-資料庫（如-MongoDB）："><a href="#NoSQL-資料庫（如-MongoDB）：" class="headerlink" title="NoSQL 資料庫（如 MongoDB）："></a>NoSQL 資料庫（如 MongoDB）：</h3><p>想像一本可以自由發揮的筆記本，每頁都可以有不同的格式。</p>
<p>特點：</p>
<ul>
<li>靈活的資料結構：可以存儲非結構化數據</li>
<li>使用特定的查詢語言或 API</li>
<li>高度可擴展：適合處理大量數據和高流量</li>
<li>快速開發：不需要預先定義結構</li>
</ul>
<hr>
<h2 id="MongoDB-簡介"><a href="#MongoDB-簡介" class="headerlink" title="MongoDB 簡介"></a>MongoDB 簡介</h2><p>MongoDB 是一種 NoSQL 資料庫，與傳統的關聯式資料庫有很大不同。</p>
<h3 id="特點對比："><a href="#特點對比：" class="headerlink" title="特點對比："></a>特點對比：</h3><ol>
<li>資料結構：<ul>
<li>關聯式：固定的表格結構</li>
<li>MongoDB：靈活的文檔結構，可以輕鬆添加新欄位</li>
</ul>
</li>
<li>查詢語言：<ul>
<li>關聯式：SQL</li>
<li>MongoDB：類 JSON 的查詢語言</li>
</ul>
</li>
<li>關聯處理：<ul>
<li>關聯式：強大的表間關聯（JOIN 操作）</li>
<li>MongoDB：通過嵌入文檔或引用實現關聯</li>
</ul>
</li>
<li>擴展性：<ul>
<li>關聯式：垂直擴展（增加單機硬體資源）</li>
<li>MongoDB：水平擴展（增加更多機器）</li>
</ul>
</li>
<li>適用場景：<ul>
<li>關聯式：需要複雜事務和強一致性的應用（如銀行系統）</li>
<li>MongoDB：需要處理大量非結構化數據的應用（如社交媒體、內容管理系統）</li>
</ul>
</li>
</ol>
<h3 id="MongoDB-常用的資料類型："><a href="#MongoDB-常用的資料類型：" class="headerlink" title="MongoDB 常用的資料類型："></a>MongoDB 常用的資料類型：</h3><ul>
<li>String：適合存放文字</li>
<li>Number：用於數字資料</li>
<li>Date：記錄日期和時間</li>
<li>Boolean：用於是&#x2F;否的選項</li>
<li>Array：存放多個相關項目的列表</li>
<li>Object：用於複雜的資料結構</li>
</ul>
<h2 id="設計資料表"><a href="#設計資料表" class="headerlink" title="設計資料表"></a>設計資料表</h2><p>在 MongoDB 中，我們不使用傳統的表格，而是使用”集合”（Collection）和”文檔”（Document）。讓我們以「聯繫我們」頁面為例，設計一個 Feedback 集合：<br><img src="https://ithelp.ithome.com.tw/upload/images/20240916/20159686HREbjQRhXI.png" alt="https://ithelp.ithome.com.tw/upload/images/20240916/20159686HREbjQRhXI.png"></p>
<table>
<thead>
<tr>
<th>KEY</th>
<th>英文欄位名稱</th>
<th>中文欄位名稱</th>
<th>型態</th>
<th>必填</th>
<th>預設值</th>
<th>備註</th>
</tr>
</thead>
<tbody><tr>
<td>PK</td>
<td>_id</td>
<td>ID</td>
<td>ObjectID</td>
<td>v</td>
<td></td>
<td></td>
</tr>
<tr>
<td>FK</td>
<td>memberId</td>
<td>會員 ID</td>
<td>ObjectID</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>contactPerson</td>
<td>名稱</td>
<td>String</td>
<td>v</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>phone</td>
<td>電話</td>
<td>String</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>email</td>
<td>信箱</td>
<td>String</td>
<td>v</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>content</td>
<td>內容</td>
<td>String</td>
<td>v</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>source</td>
<td>從哪裡得知本網站</td>
<td>Number</td>
<td></td>
<td></td>
<td>1:網路搜尋 2:社群媒體 3:親友介紹 4:其他</td>
</tr>
<tr>
<td></td>
<td>createTime</td>
<td>創建時間</td>
<td>Date</td>
<td></td>
<td>now</td>
<td></td>
</tr>
</tbody></table>
<p>資料集合各欄位詳細說明：</p>
<ul>
<li>KEY：表示欄位是否為主鍵（PK）或外鍵（FK）。這就像是資料的身份證或連結橋樑。</li>
<li>英文欄位名稱：欄位的英文名稱，用於程式碼中。選擇有意義的名稱很重要，例如 ‘contactPerson’ 比 ‘cp’ 更容易理解。</li>
<li>中文欄位名稱：欄位的中文名稱或描述，幫助非技術人員理解欄位用途。</li>
<li>型態：資料的類型，如 String、Number 等。選擇合適的型態可以提高資料的準確性和查詢效率。</li>
<li>必填：標示欄位是否必須填寫，通常用 “v” 表示必填。這確保了重要資訊不會被遺漏。</li>
<li>預設值：若未填寫時的預設內容。例如，’createTime’ 的預設值 ‘now’ 確保每條記錄都有創建時間。</li>
<li>備註：額外的說明或注釋，如可選的固定選項或其他重要資訊。這對於維護和理解資料結構很有幫助。<br>這種結構幫助快速了解每個欄位的基本屬性和用途，對於資料庫設計和開發都很有幫助。</li>
</ul>
<blockquote>
<p>💡 PK（主鍵）和 FK（外鍵）在 MongoDB 中的應用：</p>
</blockquote>
<ol>
<li>PK（主鍵）：<ul>
<li>在 MongoDB 中，每個文檔都有一個自動生成的 “_id” 欄位作為主鍵。</li>
<li>不同於關聯式資料庫需要手動設置主鍵，MongoDB 自動處理這一步。</li>
</ul>
</li>
<li>FK（外鍵）：<ul>
<li>MongoDB 沒有嚴格意義上的外鍵約束。</li>
<li>可以通過文檔嵌套或引用其他文檔的 _id 來建立關聯。</li>
<li>例如，在 Feedback 集合中，我們可以包含一個 memberId 欄位來引用會員集合中的文檔。</li>
</ul>
</li>
</ol>
<h3 id="實踐練習：設計鸚鵡食堂的食物資料集合"><a href="#實踐練習：設計鸚鵡食堂的食物資料集合" class="headerlink" title="實踐練習：設計鸚鵡食堂的食物資料集合"></a>實踐練習：設計鸚鵡食堂的食物資料集合</h3><p>根據我們學到的 MongoDB 資料結構和範例，可以試著設計一個簡單的”鸚鵡食物”(ParrotFood)集合。考慮以下幾點：</p>
<ol>
<li>食物的基本資訊應該包含哪些欄位？</li>
<li>如何表示食物的營養成分？</li>
</ol>
<h3 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h3><p>哇，今天我們真的學了超多東西呢！從關聯式資料庫和 NoSQL 的比較，到 MongoDB 的特性，再到實際的資料表設計，我們可說是來了一趟資料庫的小旅行。<br>回顧一下，我們了解了為什麼選擇 MongoDB 作為我們的資料庫，學會了如何設計基本的資料結構，還動手設計了「鸚鵡食堂」的第一個資料集合。這些知識不只適用於這個專案，在未來的開發工作中也一定會派上用場！<br>雖然資料庫設計看起來有點抽象，但它就像是在為我們的網站打地基。有了好的資料結構，我們後續的開發工作就能事半功倍了！<br>明天，我們將開始實際操作 MongoDB，把今天學到的概念真正應用到專案中。我已經迫不及待要開始實作了，你們呢？<br>如果你對今天的內容有任何疑問，或是想分享你的資料庫設計經驗，歡迎在下方留言喔！讓我們一起學習、一起成長。明天見啦，掰掰～</p>
<br />
<hr />
<br />

<blockquote>
<p>希望這篇文章有幫助到你，謝謝你的觀看，若有想看的系列也歡迎告訴我 😉</p>
</blockquote>
]]></content>
      <tags>
        <tag>2024IT鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>[ 2024 IT 鐵人賽 DAY5 ] 當線條開始敘事：用線稿圖探索網站設計的起點</title>
    <url>/2024/09/14/2024it/d5/</url>
    <content><![CDATA[<p>哈囉大家好！我是 2魚，今天是鐵人賽的第五天啦！今天我們要來聊聊一個超級有趣又實用的東西：線稿圖（Wireframe）！沒錯，就是那個看起來像草稿，卻能讓你的網站設計事半功倍的神奇工具！</p>
<span id="more"></span>

<div class="cus-intro-box">
    <h2>房東不給養鸚鵡 - 那就用 Nuxt + Express + MongoDB 30 天寫一個全端鸚鵡專案。</h2>
    <p>挑戰人生第一次鐵人賽，就來個佛心分享 side project，從專案發想、規劃、設計、資料庫、開發到部署，技術使用 Nuxt 3、Tailwind CSS、Pinia、Axios、Express、MongoDB，製作一個前後端分離的鸚鵡專案，功能主要介紹食物計算機和聯絡我們，希望可以讓更多人瞭解專案的完整流程 ✨</p>
    <a href="https://ithelp.ithome.com.tw/users/20159686/ironman/7564" target="_blank">IT 全文章連結</a>
</div>

<h2 id="線稿圖：把腦中的想法變成圖！"><a href="#線稿圖：把腦中的想法變成圖！" class="headerlink" title="線稿圖：把腦中的想法變成圖！"></a>線稿圖：把腦中的想法變成圖！</h2><p>首先，讓我們來認識一下什麼是線稿圖吧！<br>線稿圖就像是網頁或 APP 的設計草圖。它用簡單的線條和方框展示頁面的結構、功能佈局和內容層次。簡單來說，就是把我們腦中的想法，用最簡單的方式畫出來啦！</p>
<p>為什麼線稿圖這麼重要呢？讓我們來看看它的神奇之處：</p>
<ol>
<li>溝通神器：它能幫助設計師、工程師和老闆們達成共識，避免「你說你的，我做我的」的尷尬情況。</li>
<li>快速修改：因為很簡單，所以很容易改。想到新點子？馬上就能畫出來！</li>
<li>專注重點：不會被漂亮的顏色和花俏的設計分心，讓我們能專心思考功能和使用者體驗。</li>
<li>省時省錢：在早期就發現問題，比等到做好才發現問題省下超多時間和金錢！</li>
</ol>
<h2 id="線稿圖的特色：簡單就是美！"><a href="#線稿圖的特色：簡單就是美！" class="headerlink" title="線稿圖的特色：簡單就是美！"></a>線稿圖的特色：簡單就是美！</h2><p>線稿圖有幾個重要的特點：</p>
<ol>
<li>簡潔：就像速寫一樣，用最簡單的線條和方框表達想法。</li>
<li>快速：能迅速把腦中的想法變成圖，方便團隊討論和修改。</li>
<li>重點突出：突顯頁面結構和功能，不被漂亮的視覺設計分散注意力。</li>
<li>靈活：很容易調整和優化，隨時跟上設計需求的變化。</li>
<li>清晰：清楚地展示內容的層次和重要性，讓人一目了然。</li>
</ol>
<h2 id="我的選擇：Whimsical"><a href="#我的選擇：Whimsical" class="headerlink" title="我的選擇：Whimsical"></a>我的選擇：Whimsical</h2><p>這次我選擇了 Whimsical 作為主要的線稿圖工具。為什麼選它呢？原因如下：</p>
<ul>
<li>超級簡單好上手：對我這種新手來說，學習曲線超平緩的！</li>
<li>元素庫超豐富：各種現成的線稿圖元素，讓我畫圖速度飛快！</li>
<li>支援團隊協作：雖然我是一人開發團隊啦，但想到以後可能會用到，就先學起來！</li>
<li>免費版功能就很夠用：身為一個剛出社會的菜鳥工程師，錢包還是要精打細算的嘛！<br>當然，市面上還有其他不錯的工具，像是 Miro（適合大型專案）和 Figma（可以從線稿圖一路做到高保真原型）。不過對現在的我來說，Whimsical 已經很夠用啦！</li>
</ul>
<h2 id="實戰經驗：線稿圖繪製小撇步"><a href="#實戰經驗：線稿圖繪製小撇步" class="headerlink" title="實戰經驗：線稿圖繪製小撇步"></a>實戰經驗：線稿圖繪製小撇步</h2><p>在實際畫線稿圖的過程中，我整理了幾個小技巧，跟大家分享：</p>
<ol>
<li>對照流程圖：一定要時不時看看之前畫的流程圖，確保沒有漏掉重要的功能。</li>
<li>別忘了「返回」：每個頁面都要有明確的返回選項，讓使用者不會迷路。</li>
<li>用真實文案：儘量用真的文字內容，不要全部都是 Lorem Ipsum。這樣更能感受實際效果！</li>
<li>重視結構不重視美觀：這時候不用在意美不美，重點是結構對不對！</li>
<li>先畫電腦版：先把電腦版的頁面畫好，手機版可以之後再調整。</li>
<li>標註互動行為：比如說點擊後會怎樣，這樣開發時就不會搞錯意思啦！</li>
<li>考慮極端情況：想像一下如果內容超級多或超級少，頁面會變成什麼樣子。</li>
</ol>
<h2 id="意外收穫：鸚鵡食量計算公式"><a href="#意外收穫：鸚鵡食量計算公式" class="headerlink" title="意外收穫：鸚鵡食量計算公式"></a>意外收穫：鸚鵡食量計算公式</h2><p>在畫線稿圖的過程中，我遇到了一個有趣的小挑戰。身為一個沒養過鸚鵡的人，我突然發現我對鸚鵡的日常飲食需求一無所知！這可怎麼辦？<br>於是我開始了一段驚奇的網路衝浪之旅。在翻閱了無數鸚鵡飼養網站和論壇後，我終於找到了這個寶貴的公式：</p>
<blockquote>
<p>$BMR &#x3D; 70 * (體重) ^ 0.75 &#x3D; ＿＿ kcal&#x2F;日</p>
</blockquote>
<p>看到這個公式時，我真的鬆了一口氣！原來鸚鵡的食量計算也是有科學根據的呀！這次的小插曲不僅解決了我的設計難題，還讓我對鸚鵡的日常生活有了新的認識。<br>這次經歷讓我意識到，在設計過程中，我們有時候需要學習一些意料之外的知識。即使是看似不相關的資訊，也可能對我們的設計和規劃有意想不到的幫助呢！</p>
<h2 id="我的線稿圖成果"><a href="#我的線稿圖成果" class="headerlink" title="我的線稿圖成果"></a>我的線稿圖成果</h2><p>經過一番努力，我終於完成了「鸚鸚食堂」的主要頁面線稿圖。雖然還沒有畫首頁（我打算等確定完整功能後再畫），但其他頁面已經有了大致的樣子。<br>至於我畫的長什麼樣子，獻醜了 qq</p>
<p><img src="https://ithelp.ithome.com.tw/upload/images/20240914/20159686cDVWto1UoY.png" alt="https://ithelp.ithome.com.tw/upload/images/20240914/20159686cDVWto1UoY.png"><br><img src="https://ithelp.ithome.com.tw/upload/images/20240914/20159686iHE9vCuCwG.png" alt="https://ithelp.ithome.com.tw/upload/images/20240914/20159686iHE9vCuCwG.png"><br><img src="https://ithelp.ithome.com.tw/upload/images/20240914/20159686RuGaL3er4v.png" alt="https://ithelp.ithome.com.tw/upload/images/20240914/20159686RuGaL3er4v.png"><img src="https://ithelp.ithome.com.tw/upload/images/20240914/20159686lHu1ZxYi47.png" alt="https://ithelp.ithome.com.tw/upload/images/20240914/20159686lHu1ZxYi47.png"><img src="https://ithelp.ithome.com.tw/upload/images/20240914/20159686PvHoXz9mjg.png" alt="https://ithelp.ithome.com.tw/upload/images/20240914/20159686PvHoXz9mjg.png"><img src="https://ithelp.ithome.com.tw/upload/images/20240914/20159686JQX6U5Odq3.png" alt="https://ithelp.ithome.com.tw/upload/images/20240914/20159686JQX6U5Odq3.png"></p>
<h2 id="結語：從腦中的想法到具體的圖"><a href="#結語：從腦中的想法到具體的圖" class="headerlink" title="結語：從腦中的想法到具體的圖"></a>結語：從腦中的想法到具體的圖</h2><p>今天我們學習了線稿圖這個超級實用的工具。它幫助我們把腦中模糊的想法變成具體的圖形，為後續的設計和開發鋪平了道路。<br>通過繪製線稿圖，我不僅更清楚地看到了「鸚鸚食堂」的樣子，還意外學到了鸚鵡的食量計算方法！這再次證明，在開發過程中，我們總是能學到意想不到的新知識。<br>記住，線稿圖的重點不在於美觀，而在於清晰地表達你的想法。所以不要怕畫得不夠漂亮，重要的是把你的構想表達出來！<br>好啦，今天的分享就到這裡。如果你對線稿圖有什麼想法，或是有什麼不懂的地方，歡迎在下面留言跟我討論喔！我們明天見～掰掰！</p>
<br />
<hr />
<br />

<blockquote>
<p>希望這篇文章有幫助到你，謝謝你的觀看，若有想看的系列也歡迎告訴我 😉</p>
</blockquote>
]]></content>
      <tags>
        <tag>2024IT鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>[ 2024 IT 鐵人賽 DAY8 ] 資料庫新手的雲端之旅：Atlas 部署與 Compass 探索</title>
    <url>/2024/09/17/2024it/d8/</url>
    <content><![CDATA[<p>哈囉大家好！我是 2魚，歡迎來到鐵人賽第八天的資料庫冒險！昨天我們學習了如何規劃資料表，今天我們要更進一步，實際動手把我們的鸚鵡食堂搬進雲端啦！我們將使用 MongoDB Atlas 和 Compass 這兩個超級好用的工具，來建立我們的資料管理系統。不用擔心，即使你是資料庫新手，跟著我的步驟來，也能輕鬆駕馭這些強大的工具。準備好要讓你的鸚鵡食堂起飛了嗎？Let’s go！</p>
<span id="more"></span>

<div class="cus-intro-box">
    <h2>房東不給養鸚鵡 - 那就用 Nuxt + Express + MongoDB 30 天寫一個全端鸚鵡專案。</h2>
    <p>挑戰人生第一次鐵人賽，就來個佛心分享 side project，從專案發想、規劃、設計、資料庫、開發到部署，技術使用 Nuxt 3、Tailwind CSS、Pinia、Axios、Express、MongoDB，製作一個前後端分離的鸚鵡專案，功能主要介紹食物計算機和聯絡我們，希望可以讓更多人瞭解專案的完整流程 ✨</p>
    <a href="https://ithelp.ithome.com.tw/users/20159686/ironman/7564" target="_blank">IT 全文章連結</a>
</div>

<p>在上一篇文章中，我們學習了如何規劃資料表。</p>
<p>附上昨天的實踐練習答案：</p>
<table>
<thead>
<tr>
<th>KEY</th>
<th>英文欄位名稱</th>
<th>中文欄位名稱</th>
<th>型態</th>
<th>必填</th>
<th>預設值</th>
<th>備註</th>
</tr>
</thead>
<tbody><tr>
<td>PK</td>
<td>_id</td>
<td>ID</td>
<td>ObjectID</td>
<td>v</td>
<td></td>
<td>MongoDB自動生成</td>
</tr>
<tr>
<td></td>
<td>name</td>
<td>食物名稱</td>
<td>String</td>
<td>v</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>description</td>
<td>說明</td>
<td>String</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>calories</td>
<td>卡路里</td>
<td>Number</td>
<td>v</td>
<td></td>
<td>每100克</td>
</tr>
<tr>
<td></td>
<td>fat</td>
<td>脂肪</td>
<td>Number</td>
<td>v</td>
<td></td>
<td>克&#x2F;100克</td>
</tr>
<tr>
<td></td>
<td>protein</td>
<td>蛋白質</td>
<td>Number</td>
<td>v</td>
<td></td>
<td>克&#x2F;100克</td>
</tr>
<tr>
<td></td>
<td>carbs</td>
<td>碳水化合物</td>
<td>Number</td>
<td>v</td>
<td></td>
<td>克&#x2F;100克</td>
</tr>
<tr>
<td></td>
<td>maxDailyAmount</td>
<td>每日最大食用量</td>
<td>Number</td>
<td>v</td>
<td></td>
<td>克&#x2F;天</td>
</tr>
<tr>
<td></td>
<td>createdAt</td>
<td>創建時間</td>
<td>Date</td>
<td>v</td>
<td>now</td>
<td></td>
</tr>
</tbody></table>
<p>這個鸚鵡食物集合的設計考慮了以下幾個要素：</p>
<ol>
<li>基本資訊完整性：<ul>
<li>包含了食物的名稱、描述等基本資訊，確保使用者能夠清楚識別每種食物。</li>
<li>創建時間欄位有助於追蹤資料的新增時間。</li>
</ul>
</li>
<li>營養資訊的標準化：<ul>
<li>營養成分（卡路里、脂肪、蛋白質、碳水化合物）均以每100克為單位，這樣的標準化有助於不同食物間的比較。</li>
<li>選擇了鸚鵡飼養中最關鍵的幾個營養指標，確保資訊既全面又不過於複雜。</li>
</ul>
</li>
<li>安全性考量：<ul>
<li>加入了每日最大食用量欄位，這對於鸚鵡的健康飲食極為重要，可以幫助飼主避免過量餵食。</li>
</ul>
</li>
<li>資料完整性：<ul>
<li>將重要欄位（如名稱、營養成分、每日最大食用量）設為必填，確保核心資訊的完整性。</li>
</ul>
</li>
<li>擴展性：<ul>
<li>雖然目前欄位相對簡單，但這個結構為將來可能的擴展（如添加更多營養成分、適用鸚鵡品種等）預留了空間。</li>
</ul>
</li>
<li>MongoDB特性應用：<ul>
<li>利用MongoDB的自動生成ID特性，簡化了主鍵的管理。</li>
<li>使用了多種MongoDB支援的資料類型，如String、Number、Date等，充分利用了MongoDB的靈活性。</li>
</ul>
</li>
</ol>
<p>接著進入正題囉 ~</p>
<hr>
<p>今天，我們要用 MongoDB Atlas 和 Compass 來建立鸚鵡食堂的資料管理系統。這兩個工具會讓我們的資料管理變得更簡單。<br>注意：在這個教學中，我們不會涉及本地端 MongoDB 的安裝和操作。我們直接使用雲端服務，這樣可以省去配置本地環境的複雜步驟。</p>
<h2 id="MongoDB-Atlas：雲端資料庫服務"><a href="#MongoDB-Atlas：雲端資料庫服務" class="headerlink" title="MongoDB Atlas：雲端資料庫服務"></a>MongoDB Atlas：雲端資料庫服務</h2><p>MongoDB Atlas 是 MongoDB 官方的雲端服務。選擇 Atlas 有幾個好處：</p>
<ol>
<li>不用自己管理伺服器</li>
<li>可以隨著需求增加或減少資源</li>
<li>有免費方案可以使用</li>
</ol>
<h3 id="部署步驟："><a href="#部署步驟：" class="headerlink" title="部署步驟："></a>部署步驟：</h3><ol>
<li><p>註冊 MongoDB Atlas 帳號（可以使用 Google 帳號快速註冊）<br><img src="https://ithelp.ithome.com.tw/upload/images/20240917/20159686zWlT5cI5U9.png" alt="https://ithelp.ithome.com.tw/upload/images/20240917/20159686zWlT5cI5U9.png"><br><img src="https://ithelp.ithome.com.tw/upload/images/20240917/20159686tg78JYhof2.png" alt="https://ithelp.ithome.com.tw/upload/images/20240917/20159686tg78JYhof2.png"><br><img src="https://ithelp.ithome.com.tw/upload/images/20240917/20159686pf1M4aD9jO.png" alt="https://ithelp.ithome.com.tw/upload/images/20240917/20159686pf1M4aD9jO.png"></p>
</li>
<li><p>創建一個新的集群（Cluster）<br><img src="https://ithelp.ithome.com.tw/upload/images/20240917/20159686lzuZmbvJUF.png" alt="https://ithelp.ithome.com.tw/upload/images/20240917/20159686lzuZmbvJUF.png"><br><img src="https://ithelp.ithome.com.tw/upload/images/20240917/201596865G1jPCyZ3R.png" alt="https://ithelp.ithome.com.tw/upload/images/20240917/201596865G1jPCyZ3R.png"></p>
</li>
<li><p>設置資料庫用戶和網路訪問權限<br><img src="https://ithelp.ithome.com.tw/upload/images/20240917/20159686Lc07Ogb1xl.png" alt="https://ithelp.ithome.com.tw/upload/images/20240917/20159686Lc07Ogb1xl.png"><br><img src="https://ithelp.ithome.com.tw/upload/images/20240917/20159686JJzxsonUPY.png" alt="https://ithelp.ithome.com.tw/upload/images/20240917/20159686JJzxsonUPY.png"></p>
</li>
<li><p>使用 Compass 連接 MongoDB Atlas</p>
<ol>
<li><p>下載並安裝 <a href="https://www.mongodb.com/try/download/compass">MongoDB Compass</a> </p>
</li>
<li><p>在 Cluster0 中點擊 “Connect” 按鈕<br> <img src="https://ithelp.ithome.com.tw/upload/images/20240917/20159686xnNji1jJ6N.png" alt="https://ithelp.ithome.com.tw/upload/images/20240917/20159686xnNji1jJ6N.png"></p>
</li>
<li><p>選擇 Compass 連接方式<br> <img src="https://ithelp.ithome.com.tw/upload/images/20240917/201596861SSZaFTAGV.png" alt="https://ithelp.ithome.com.tw/upload/images/20240917/201596861SSZaFTAGV.png"><br> <img src="https://ithelp.ithome.com.tw/upload/images/20240917/20159686v1AJx4OoR8.png" alt="https://ithelp.ithome.com.tw/upload/images/20240917/20159686v1AJx4OoR8.png"></p>
</li>
</ol>
</li>
<li><p>打開 MongoDB Compass，進行連接<br> <img src="https://ithelp.ithome.com.tw/upload/images/20240917/20159686XcUVZbsjHL.png" alt="https://ithelp.ithome.com.tw/upload/images/20240917/20159686XcUVZbsjHL.png"></p>
</li>
<li><p>連接成功（今天的教學到此為止，之後的實戰中我們會繼續使用）<br> <img src="https://ithelp.ithome.com.tw/upload/images/20240917/20159686wIILz1mHrz.png" alt="https://ithelp.ithome.com.tw/upload/images/20240917/20159686wIILz1mHrz.png"></p>
</li>
</ol>
<h3 id="MongoDB-Compass：資料庫管理工具"><a href="#MongoDB-Compass：資料庫管理工具" class="headerlink" title="MongoDB Compass：資料庫管理工具"></a>MongoDB Compass：資料庫管理工具</h3><p>MongoDB Compass 是一個圖形化的管理工具，就像是我們資料庫的儀表板。它讓我們可以直觀地操作和管理資料，不需要寫複雜的指令。</p>
<p>主要功能：</p>
<ol>
<li>瀏覽和編輯資料：<ul>
<li>點擊集合名稱，就能看到裡面所有的文檔。</li>
<li>雙擊任何文檔，可以直接修改內容。</li>
</ul>
</li>
<li>執行查詢：<ul>
<li>使用 Compass 的查詢編輯器，可以輕鬆寫出複雜的查詢。</li>
</ul>
</li>
<li>分析資料庫性能：<ul>
<li>在 “Performance” 標籤頁可以看到資料庫的運行狀況。</li>
<li>觀察查詢時間，找出需要優化的地方。</li>
</ul>
</li>
<li>管理索引和用戶：<ul>
<li>在 “Indexes” 標籤頁可以創建和管理索引，加速查詢。</li>
<li>“Users” 部分允許我們管理資料庫用戶，控制訪問權限。</li>
</ul>
</li>
<li>資料可視化：<ul>
<li>使用 “Charts” 功能，可以將數據轉換成圖表，直觀地看出數據趨勢。</li>
</ul>
</li>
</ol>
<hr>
<p>接下來動手玩玩看 Compass 吧</p>
<h3 id="新增資料表"><a href="#新增資料表" class="headerlink" title="新增資料表"></a>新增資料表</h3><p><img src="https://ithelp.ithome.com.tw/upload/images/20240917/20159686Khe4Y6izcW.png" alt="https://ithelp.ithome.com.tw/upload/images/20240917/20159686Khe4Y6izcW.png"><br><img src="https://ithelp.ithome.com.tw/upload/images/20240917/20159686qSOgrzjD5x.png" alt="https://ithelp.ithome.com.tw/upload/images/20240917/20159686qSOgrzjD5x.png"><br><img src="https://ithelp.ithome.com.tw/upload/images/20240917/20159686exAuMdrPVR.png" alt="https://ithelp.ithome.com.tw/upload/images/20240917/20159686exAuMdrPVR.png"></p>
<h3 id="新增一筆資料"><a href="#新增一筆資料" class="headerlink" title="新增一筆資料"></a>新增一筆資料</h3><p><img src="https://ithelp.ithome.com.tw/upload/images/20240917/201596861zlcdKpPUV.png" alt="https://ithelp.ithome.com.tw/upload/images/20240917/201596861zlcdKpPUV.png"><br>範例是手 key 新增資料，<br>當然也有提供匯入資料 (import JSON or CSV file)</p>
<p>這邊使用昨天我們設計的食物結構作為範例資料：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;$oid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;66bf8246f3acda432feda6b8&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;向日葵籽&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;營養豐富的鸚鵡零食&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;calories&quot;</span><span class="punctuation">:</span> <span class="number">584</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;fat&quot;</span><span class="punctuation">:</span> <span class="number">51</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;protein&quot;</span><span class="punctuation">:</span> <span class="number">21</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;carbs&quot;</span><span class="punctuation">:</span> <span class="number">20</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;maxDailyAmount&quot;</span><span class="punctuation">:</span> <span class="number">10</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://ithelp.ithome.com.tw/upload/images/20240917/20159686ITGrFDDhm0.png" alt="https://ithelp.ithome.com.tw/upload/images/20240917/20159686ITGrFDDhm0.png"><img src="https://ithelp.ithome.com.tw/upload/images/20240917/2015968680omq1AI4v.png" alt="https://ithelp.ithome.com.tw/upload/images/20240917/2015968680omq1AI4v.png"></p>
<h3 id="編輯-刪除資料"><a href="#編輯-刪除資料" class="headerlink" title="編輯&#x2F;刪除資料"></a>編輯&#x2F;刪除資料</h3><p>滑鼠懸浮在資料上時會顯示功能按鈕，都可以動手玩玩看哦<br><img src="https://ithelp.ithome.com.tw/upload/images/20240917/2015968653LBsMpBbV.png" alt="https://ithelp.ithome.com.tw/upload/images/20240917/2015968653LBsMpBbV.png"></p>
<hr>
<h3 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h3><p>哇，今天我們真的完成了一件大事呢！我們不僅成功地將鸚鵡食堂的資料庫部署到了雲端，還學會了使用 MongoDB Compass 這個超級好用的工具。有了它，管理我們的資料就像是在照顧一群快樂的鸚鵡一樣輕鬆愉快。<br>回顧一下，我們學會了如何設置 MongoDB Atlas，如何連接 Compass，還親手新增了我們的第一筆資料。這些技能不只適用於這個專案，在未來的開發工作中也一定會派上大用場！<br>準備好開始下一階段的學習了嗎？讓我們一起繼續這段有趣的資料庫冒險吧！如果你對今天的內容有任何疑問，或是想分享你的資料庫使用經驗，歡迎在下方留言喔！我們明天見啦，掰掰～</p>
<br />
<hr />
<br />

<blockquote>
<p>希望這篇文章有幫助到你，謝謝你的觀看，若有想看的系列也歡迎告訴我 😉</p>
</blockquote>
]]></content>
      <tags>
        <tag>2024IT鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>[ 2024 IT 鐵人賽 DAY9 ] 資料庫填充秘笈：AI 助手、JSON 轉換與 Compass 完美配合</title>
    <url>/2024/09/18/2024it/d9/</url>
    <content><![CDATA[<p>大家好！我是 2魚，歡迎來到鐵人賽第九天的資料處理小教室！還記得昨天我們學會了如何使用 MongoDB Compass 手動輸入資料嗎？今天，我們要面對一個更大的挑戰：如何處理大量的專案資料。畢竟，我們的鸚鵡食堂可不是只有幾筆資料那麼簡單！別擔心，我會和大家分享一個超級實用的技巧，讓我們能夠輕鬆地整理和匯入大量資料。準備好要成為資料管理高手了嗎？Let’s dive in！</p>
<span id="more"></span>

<div class="cus-intro-box">
    <h2>房東不給養鸚鵡 - 那就用 Nuxt + Express + MongoDB 30 天寫一個全端鸚鵡專案。</h2>
    <p>挑戰人生第一次鐵人賽，就來個佛心分享 side project，從專案發想、規劃、設計、資料庫、開發到部署，技術使用 Nuxt 3、Tailwind CSS、Pinia、Axios、Express、MongoDB，製作一個前後端分離的鸚鵡專案，功能主要介紹食物計算機和聯絡我們，希望可以讓更多人瞭解專案的完整流程 ✨</p>
    <a href="https://ithelp.ithome.com.tw/users/20159686/ironman/7564" target="_blank">IT 全文章連結</a>
</div>

<h2 id="如何整理專案資料"><a href="#如何整理專案資料" class="headerlink" title="如何整理專案資料"></a>如何整理專案資料</h2><p>昨天，我使用 Compass 手動將部分資料鍵入資料庫中，但我們專案所需的資料量更為龐大，像是鸚鵡能食用的食物、鸚鵡種類、醫療資訊等等的。為了快速彙整資料，我決定使用 AI 來幫助我整理和擴充資料量。</p>
<h3 id="整理資料步驟："><a href="#整理資料步驟：" class="headerlink" title="整理資料步驟："></a>整理資料步驟：</h3><ol>
<li><p><strong>初步收集資料：</strong></p>
<ul>
<li>首先，AI 可能會將資料以表格（如 Excel）的形式提供。這時候，我會先把資料整理到 Excel 中，並隨著資料量的增加，不斷檢查資料是否需要進一步調整或修改。<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20240918/20159686G7cF3DGFmY.png" alt="https://ithelp.ithome.com.tw/upload/images/20240918/20159686G7cF3DGFmY.png"></li>
</ul>
</li>
<li><p><strong>資料格式轉換：</strong></p>
<ul>
<li><p>收集到足夠的資料後，我會將這些資料複製並請 AI 幫忙將其整理成 JSON 格式，這樣就能方便地匯入 MongoDB 中使用。<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20240918/201596861uVlvDmqvx.png" alt="https://ithelp.ithome.com.tw/upload/images/20240918/201596861uVlvDmqvx.png"></p>
</li>
<li><p>在 VS Code 中存檔：</p>
<ol>
<li><p>我會打開 VS Code，按下快捷鍵 <code>cmd + N</code> 新增一個文字檔案。<br> <img src="https://ithelp.ithome.com.tw/upload/images/20240918/201596860MSVwbdFH3.png" alt="https://ithelp.ithome.com.tw/upload/images/20240918/201596860MSVwbdFH3.png"><br><img src="https://ithelp.ithome.com.tw/upload/images/20240918/20159686za5zf0mWH3.png" alt="https://ithelp.ithome.com.tw/upload/images/20240918/20159686za5zf0mWH3.png"></p>
</li>
<li><p>接著，將整理好的 JSON 資料貼上到這個檔案中。<br> <img src="https://ithelp.ithome.com.tw/upload/images/20240918/20159686fd29FsNwtJ.png" alt="https://ithelp.ithome.com.tw/upload/images/20240918/20159686fd29FsNwtJ.png"></p>
</li>
<li><p>最後，將這個檔案保存到一個我可以輕鬆找到的位置。<br> <img src="https://ithelp.ithome.com.tw/upload/images/20240918/20159686rEPYk6SrdW.png" alt="https://ithelp.ithome.com.tw/upload/images/20240918/20159686rEPYk6SrdW.png"><br> <img src="https://ithelp.ithome.com.tw/upload/images/20240918/20159686wCSJQQfgSM.png" alt="https://ithelp.ithome.com.tw/upload/images/20240918/20159686wCSJQQfgSM.png"></p>
</li>
</ol>
</li>
<li><p>匯入資料到 MongoDB：</p>
<ol>
<li><p>在打開 Compass 之後，我會使用匯入功能將剛剛的 JSON 檔案匯入資料庫。這次我選擇匯入鸚鵡能食用的食物資料，因此我會先在資料庫中新增一個集合（collection）。<br> <img src="https://ithelp.ithome.com.tw/upload/images/20240918/20159686MQ8ebtid8s.png" alt="https://ithelp.ithome.com.tw/upload/images/20240918/20159686MQ8ebtid8s.png"><br> <img src="https://ithelp.ithome.com.tw/upload/images/20240918/20159686pXJm4F74gV.png" alt="https://ithelp.ithome.com.tw/upload/images/20240918/20159686pXJm4F74gV.png"></p>
</li>
<li><p>然後，我會將剛才保存的 JSON 檔案匯入到這個新的集合中。<br> 這裡提供了一些範例的資料，大家可以將資料存到 food.json 文件，跟著一起動手試試看：</p>
 <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;向日葵籽&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;calories_per_100g&quot;</span><span class="punctuation">:</span> <span class="number">584</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;protein_per_100g&quot;</span><span class="punctuation">:</span> <span class="number">20.78</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;fat_per_100g&quot;</span><span class="punctuation">:</span> <span class="number">51.46</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;carbohydrates_per_100g&quot;</span><span class="punctuation">:</span> <span class="number">20</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;consumption_note&quot;</span><span class="punctuation">:</span> <span class="string">&quot;生食&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;daily_max_recommended_intake_g&quot;</span><span class="punctuation">:</span> <span class="string">&quot;5-10&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;南瓜籽&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;calories_per_100g&quot;</span><span class="punctuation">:</span> <span class="number">559</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;protein_per_100g&quot;</span><span class="punctuation">:</span> <span class="number">30.23</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;fat_per_100g&quot;</span><span class="punctuation">:</span> <span class="number">49.05</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;carbohydrates_per_100g&quot;</span><span class="punctuation">:</span> <span class="number">10.71</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;consumption_note&quot;</span><span class="punctuation">:</span> <span class="string">&quot;生食&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;daily_max_recommended_intake_g&quot;</span><span class="punctuation">:</span> <span class="string">&quot;5-10&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;蘋果&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;calories_per_100g&quot;</span><span class="punctuation">:</span> <span class="number">52</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;protein_per_100g&quot;</span><span class="punctuation">:</span> <span class="number">0.26</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;fat_per_100g&quot;</span><span class="punctuation">:</span> <span class="number">0.17</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;carbohydrates_per_100g&quot;</span><span class="punctuation">:</span> <span class="number">13.81</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;consumption_note&quot;</span><span class="punctuation">:</span> <span class="string">&quot;生食，去核&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;daily_max_recommended_intake_g&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10-20&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;胡蘿蔔&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;calories_per_100g&quot;</span><span class="punctuation">:</span> <span class="number">41</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;protein_per_100g&quot;</span><span class="punctuation">:</span> <span class="number">0.93</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;fat_per_100g&quot;</span><span class="punctuation">:</span> <span class="number">0.24</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;carbohydrates_per_100g&quot;</span><span class="punctuation">:</span> <span class="number">9.58</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;consumption_note&quot;</span><span class="punctuation">:</span> <span class="string">&quot;生食或煮熟食用&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;daily_max_recommended_intake_g&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10-15&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;杏仁&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;calories_per_100g&quot;</span><span class="punctuation">:</span> <span class="number">579</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;protein_per_100g&quot;</span><span class="punctuation">:</span> <span class="number">21.15</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;fat_per_100g&quot;</span><span class="punctuation">:</span> <span class="number">49.93</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;carbohydrates_per_100g&quot;</span><span class="punctuation">:</span> <span class="number">21.55</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;consumption_note&quot;</span><span class="punctuation">:</span> <span class="string">&quot;生食或輕微烘烤後食用&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;daily_max_recommended_intake_g&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3-5&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;花生&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;calories_per_100g&quot;</span><span class="punctuation">:</span> <span class="number">567</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;protein_per_100g&quot;</span><span class="punctuation">:</span> <span class="number">25.8</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;fat_per_100g&quot;</span><span class="punctuation">:</span> <span class="number">49.24</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;carbohydrates_per_100g&quot;</span><span class="punctuation">:</span> <span class="number">16.13</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;consumption_note&quot;</span><span class="punctuation">:</span> <span class="string">&quot;生食或輕微烘烤後食用&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;daily_max_recommended_intake_g&quot;</span><span class="punctuation">:</span> <span class="string">&quot;5-10&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;核桃&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;calories_per_100g&quot;</span><span class="punctuation">:</span> <span class="number">654</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;protein_per_100g&quot;</span><span class="punctuation">:</span> <span class="number">15.23</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;fat_per_100g&quot;</span><span class="punctuation">:</span> <span class="number">65.21</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;carbohydrates_per_100g&quot;</span><span class="punctuation">:</span> <span class="number">13.71</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;consumption_note&quot;</span><span class="punctuation">:</span> <span class="string">&quot;生食或輕微烘烤後食用&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;daily_max_recommended_intake_g&quot;</span><span class="punctuation">:</span> <span class="string">&quot;5-10&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;莓果類&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;calories_per_100g&quot;</span><span class="punctuation">:</span> <span class="number">43</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;protein_per_100g&quot;</span><span class="punctuation">:</span> <span class="number">0.7</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;fat_per_100g&quot;</span><span class="punctuation">:</span> <span class="number">0.33</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;carbohydrates_per_100g&quot;</span><span class="punctuation">:</span> <span class="number">10.1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;consumption_note&quot;</span><span class="punctuation">:</span> <span class="string">&quot;生食（藍莓、草莓等）&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;daily_max_recommended_intake_g&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10-20&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>
<p> <img src="https://ithelp.ithome.com.tw/upload/images/20240918/20159686820DE7r8e8.png" alt="https://ithelp.ithome.com.tw/upload/images/20240918/20159686820DE7r8e8.png"><img src="https://ithelp.ithome.com.tw/upload/images/20240918/20159686cRMoclSuZa.png" alt="https://ithelp.ithome.com.tw/upload/images/20240918/20159686cRMoclSuZa.png"></p>
</li>
<li><p>成功匯入資料後，資料庫就會顯示這些資料，方便進行後續操作。<br> <img src="https://ithelp.ithome.com.tw/upload/images/20240918/20159686H6gxogn2pg.png" alt="https://ithelp.ithome.com.tw/upload/images/20240918/20159686H6gxogn2pg.png"></p>
</li>
</ol>
</li>
</ul>
</li>
</ol>
<h3 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h3><p>哇，今天我們學到了一個超級實用的技巧呢！透過結合 AI 的強大處理能力和我們對資料的精細把控，我們不僅能快速擴充資料量，還能保持資料的一致性與準確性。這個方法真的是處理大量資料時的救星啊！<br>想想看，這個流程不只適用於我們的鸚鵡食堂專案，在未來處理任何需要大量資料的專案時都能派上用場。無論是開發過程中的資料蒐集，還是後續的數據處理與分析，這個方法都能讓我們事半功倍。<br>如果你正在進行類似的專案，或是正為龐大的資料整理而煩惱，真的很推薦你試試看這個流程。相信我，它會讓你的工作變得更加輕鬆高效！<br>大家有沒有自己處理大量資料的秘訣呢？歡迎在下方留言分享喔！我們一起學習、一起成長。明天見啦，掰掰～</p>
<br />
<hr />
<br />

<blockquote>
<p>希望這篇文章有幫助到你，謝謝你的觀看，若有想看的系列也歡迎告訴我 😉</p>
</blockquote>
]]></content>
      <tags>
        <tag>2024IT鐵人賽</tag>
      </tags>
  </entry>
</search>
